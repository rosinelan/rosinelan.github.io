<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-11-26T10:24:12.224Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python函数定义及默认参数</title>
    <link href="https://rosinelan.github.io/2018/11/26/python%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%8F%8A%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/26/python函数定义及默认参数/</id>
    <published>2018-11-26T10:11:44.000Z</published>
    <updated>2018-11-26T10:24:12.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><p>函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。<br>函数调用就是通过函数名在程序的不同地方多次执行。<br>函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。<br><a id="more"></a><br>使用函数可以降低编程难度(将大问题划分为多个小问题)；可以实现代码重用，提高效率。</p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><p>def 函数名([参数列表]):</p><p>函数名首字母小写，其余单词首字母大写</p><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>函数名([参数])</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>判断键盘输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_Is_Num</span><span class="params">()</span>:</span></span><br><span class="line">    sth = raw_input(<span class="string">"Please input something:"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> type(int(sth)) == type(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is a number"</span> %sth</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is not a number"</span> %sth</span><br><span class="line"></span><br><span class="line">fun_Is_Num()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:www</span><br><span class="line">www <span class="keyword">is</span> <span class="keyword">not</span> a number</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:<span class="number">12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number</span><br></pre></td></tr></table></figure></p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>参数分为形式参数和实际参数。<br>在定义函数时，函数名后面括号中的变量名称叫做形式参数。<br>在调用函数时，函数名后面括号中的变量名称叫做实际参数。</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>判断输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">print</span> <span class="string">"%s is not a number."</span> %s</span><br><span class="line">           sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is a number."</span> %s</span><br><span class="line"></span><br><span class="line">isNum(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number.</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12ffff</span></span><br><span class="line"><span class="number">12</span>ffff <span class="keyword">is</span> <span class="keyword">not</span> a number.</span><br></pre></td></tr></table></figure></p><h4 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h4><p>返回一个列表，其中<code>argv[0]</code>表示文件路径，后面的依次为参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> sys.argv</span><br><span class="line"></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>]</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py 1 b e</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>, <span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>]</span><br><span class="line">[root@linux02 ~]<span class="comment"># python /root/aming/advance/1_1_1.py 2</span></span><br><span class="line">[<span class="string">'/root/aming/advance/1_1_1.py'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>打印系统所有的PID，要求从/proc读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#           print "%s is not a number." %s</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> s, </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'/proc'</span>):</span><br><span class="line">    isNum(i)</span><br></pre></td></tr></table></figure></p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数必须连续设置，直至最后一个参数，中间不可间断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">10</span>,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z=<span class="number">10</span>)</span>    错误</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br></pre></td></tr></table></figure></p><p>调用函数时，对于已经给的参数从左向右进行匹配。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python函数&quot;&gt;&lt;a href=&quot;#python函数&quot; class=&quot;headerlink&quot; title=&quot;python函数&quot;&gt;&lt;/a&gt;python函数&lt;/h2&gt;&lt;p&gt;函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。&lt;br&gt;函数调用就是通过函数名在程序的不同地方多次执行。&lt;br&gt;函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="函数" scheme="https://rosinelan.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="参数" scheme="https://rosinelan.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="默认参数" scheme="https://rosinelan.github.io/tags/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python文件及数据类型转换</title>
    <link href="https://rosinelan.github.io/2018/11/23/python%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://rosinelan.github.io/2018/11/23/python文件及数据类型转换/</id>
    <published>2018-11-23T08:18:45.000Z</published>
    <updated>2018-11-23T08:40:09.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>python内置函数<code>open()</code>进行文件操作，默认使用<code>r</code>方式打开文件。<br><a id="more"></a><br>操作示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = open(‘/tmp/tmp.txt’,’w’)</span><br><span class="line">fd.write(“<span class="number">123</span>”)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure></p><p>其他打开方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r    读方式打开(文件不存在报错)</span><br><span class="line">w    写方式打开(文件不存在会新建，存在会被覆盖)</span><br><span class="line">a    追加模式(文件不存在会创建)</span><br><span class="line">r+    读写模式打开</span><br><span class="line">w+    读写模式打开</span><br><span class="line">a+    读写模式打开</span><br><span class="line">rb    二进制读模式</span><br><span class="line">wb    二进制写模式</span><br><span class="line">ab    二进制追加模式</span><br><span class="line">rb+    二进制读写模式打开</span><br><span class="line">wb+    二进制读写模式打开</span><br><span class="line">ab+    二进制读写模式打开</span><br></pre></td></tr></table></figure></p><p><code>w</code>方式打开文件，原文件将被覆盖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: fd.write(<span class="string">'1234\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>a</code>方式打开文件，追加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: fd.write(<span class="string">'5678\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p>文件读取方法</p><ul><li>fd.read()    返回字符串</li><li>fd.readline()    返回字符串</li><li>fd.readlines()    返回列表</li></ul><p><code>fd.read()</code>    返回字符串，读取文件所有内容，再次读取时返回空<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: fd.read()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'1234\n5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: fd.read()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readline()</code>    返回字符串，按行顺序读取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'1234\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readlines()</code>    返回列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: fd.readlines()</span><br><span class="line">Out[<span class="number">30</span>]: [<span class="string">'1234\n'</span>, <span class="string">'5678\n'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><h3 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h3><h4 id="for循环遍历文件"><a href="#for循环遍历文件" class="headerlink" title="for循环遍历文件"></a>for循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="comment">#for line in fd.readlines():</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line"><span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>读取方式有2种，分别为<br><code>for line in fd.realines()</code><br><code>for line in fd</code><br>对于大文件进行遍历，建议使用第二种方法，第一种会创建列表，需要占用大量内存；第二种则不会。</p><h4 id="while循环遍历文件"><a href="#while循环遍历文件" class="headerlink" title="while循环遍历文件"></a>while循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = fd.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h4 id="with-open-用法示例"><a href="#with-open-用法示例" class="headerlink" title="with open 用法示例"></a>with open 用法示例</h4><p>使用此方式打开文件，不用再次调用fd.close()关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/aming/tmp.txt'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line = fd.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> line,</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>统计系统free内存和所占百分比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/proc/meminfo'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">for</span> free <span class="keyword">in</span> fd:</span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemTotal'</span>):</span><br><span class="line">            total = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemFree'</span>):</span><br><span class="line">            free = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(total)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/float(total))+<span class="string">'%'</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">557.22</span>M</span><br><span class="line"><span class="number">1862.21</span>M</span><br><span class="line"><span class="number">0.30</span>%</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>16进制转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: int(<span class="string">'a'</span>,<span class="number">16</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为16进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: hex(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'0xa'</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: str(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'10'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: int(<span class="string">'10'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>计算MAC地址,已知当前MAC地址，计算下一个MAC地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">macaddr = <span class="string">'00:0C:29:A5:62:0A'</span></span><br><span class="line">prefix_mac = macaddr[:<span class="number">-3</span>]</span><br><span class="line">last_two = macaddr[<span class="number">-2</span>:]</span><br><span class="line">plus_one = int(last_two, <span class="number">16</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> plus_one <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> len(new_last_two) == <span class="number">1</span>:</span><br><span class="line">        new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line">new_mac = prefix_mac + <span class="string">':'</span> + new_last_two</span><br><span class="line"><span class="keyword">print</span> new_mac.upper()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:A5:<span class="number">62</span>:<span class="number">0</span>B</span><br></pre></td></tr></table></figure></p><h3 id="元组字典列表转换"><a href="#元组字典列表转换" class="headerlink" title="元组字典列表转换"></a>元组字典列表转换</h3><p>字符串转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: l = list(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>列表转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="string">''</span>.join(l)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: t = tuple(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="string">''</span>.join(t)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>列表转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: l</span><br><span class="line">Out[<span class="number">24</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: tuple(l)</span><br><span class="line">Out[<span class="number">25</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: t</span><br><span class="line">Out[<span class="number">26</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: list(t)</span><br><span class="line">Out[<span class="number">27</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>字典转换为列表    字典的items()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: dic = &#123;<span class="string">'a'</span> : <span class="number">1</span>, <span class="string">'b'</span> : <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: dic.items()</span><br><span class="line">Out[<span class="number">29</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure></p><p>列表转换为字典    dict()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: l1</span><br><span class="line">Out[<span class="number">32</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: dict(l1)</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;p&gt;python内置函数&lt;code&gt;open()&lt;/code&gt;进行文件操作，默认使用&lt;code&gt;r&lt;/code&gt;方式打开文件。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="文件" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="类型转换" scheme="https://rosinelan.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制之if</title>
    <link href="https://rosinelan.github.io/2018/11/21/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8Bif/"/>
    <id>https://rosinelan.github.io/2018/11/21/python流程控制之if/</id>
    <published>2018-11-21T08:26:47.000Z</published>
    <updated>2018-11-21T11:13:18.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><a id="more"></a> <p>缩进使用4个空格，不建议使用TAB键。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>键盘输入数字，&gt;90输出A,&gt;80输出B，&gt;=70输出C，&lt;70输出D。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat if.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">score = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Very Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'pass'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'D'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not pass'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br></pre></td></tr></table></figure></p><p>逻辑值包含2个量。  </p><ul><li>True：表示非空的量，所有非零数。  </li><li>False：表示0，none，空的量等。  <h2 id="if实例"><a href="#if实例" class="headerlink" title="if实例"></a>if实例</h2></li><li><p>输入三个整数x,y,z，请把这三个数由小到大输出。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    list1.append(int(input(<span class="string">'&#123;&#125;:'</span>.format(i))))</span><br><span class="line">print(list1)</span><br><span class="line">x = min(list1)</span><br><span class="line">list1.remove(x)</span><br><span class="line">z = max(list1)</span><br><span class="line">y = list1[<span class="number">0</span>]</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure></li><li><p>企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line"><span class="keyword">if</span> I &gt;= <span class="number">100</span>:</span><br><span class="line">    A = (I<span class="number">-100</span>) * <span class="number">0.01</span> + <span class="number">3.95</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">60</span>:</span><br><span class="line">    A = (I - <span class="number">60</span>)* <span class="number">0.015</span> + <span class="number">3.35</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">40</span>:</span><br><span class="line">    A = (I - <span class="number">40</span>)*<span class="number">0.03</span> + <span class="number">2.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">20</span>:</span><br><span class="line">    A = (I - <span class="number">20</span>)*<span class="number">0.05</span> + <span class="number">1.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">10</span>:</span><br><span class="line">    A = (I - <span class="number">10</span>)*<span class="number">0.075</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    A = I*<span class="number">0.1</span></span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></li></ul><p>更简洁的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line">arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line">rat = [<span class="number">0.01</span>, <span class="number">0.015</span>, <span class="number">0.03</span>, <span class="number">0.05</span>, <span class="number">0.075</span>, <span class="number">0.1</span>]</span><br><span class="line">A = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> I &gt; arr[idx]:</span><br><span class="line">        A += (I-arr[idx])*rat[idx]</span><br><span class="line">        I = arr[idx]</span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h2&gt;&lt;h3 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; expression:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="流程控制" scheme="https://rosinelan.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制for while</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6for-while/"/>
    <id>https://rosinelan.github.io/2018/11/16/python流程控制for-while/</id>
    <published>2018-11-16T09:32:01.000Z</published>
    <updated>2018-11-22T10:36:13.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="for-序列"><a href="#for-序列" class="headerlink" title="for 序列"></a>for 序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i,</span><br></pre></td></tr></table></figure><a id="more"></a><p>print默认输出每行都带换行符，加逗号可以抑制换行符。</p><ul><li><p>tange()函数，返回列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></li><li><p>列表重写(列表表达式)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>实例<br>计算1+2+….+100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum = sum + i</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></li></ul><p><code>xrange()</code>函数返回对象，不占用内存资源，比<code>range()</code>更快更高效。</p><h3 id="for-字典"><a href="#for-字典" class="headerlink" title="for 字典"></a>for 字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: dic1 = dict.fromkeys(<span class="string">'abcde'</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: dic1</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">'a'</span>: <span class="number">100</span>, <span class="string">'b'</span>: <span class="number">100</span>, <span class="string">'c'</span>: <span class="number">100</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'e'</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i,dic1[i]</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> i</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'e'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'d'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> v,k <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> v,k</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>乘法口诀实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> “%sx%s” %(j, i, j*i),</span><br><span class="line">    <span class="keyword">print</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环的退出"><a href="#循环的退出" class="headerlink" title="循环的退出"></a>循环的退出</h2><ul><li>for<br>循环正常结束才会执行else。</li><li>if<br>出现多个时，每个都会判断。</li><li>elif<br>当前面有if满足条件时，该条件不再判断。</li><li>break<br>直接退出循环，不再执行。</li><li>continue<br>退出该次循环，执行下一次循环。</li><li>pass<br>占位符，无意义</li><li>sys.exit()<br>退出整个脚本<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_5.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">7</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"main end"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hahaha"</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_1_5.py </span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><ul><li>系统生成一个20以内的随机整数<br>玩家有6次机会进行猜猜看，每次猜测都有反馈(猜大了，猜小了，猜对了，结束)<br>6次中，猜对了，玩家赢了<br>否则系统赢<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_6.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">digt = random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span> digt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    in_num = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line">    <span class="keyword">if</span> in_num &gt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too big;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num &lt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too small;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num == digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"you are right."</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"have no change,system win!"</span></span><br><span class="line"><span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"congratulation!You win!"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>for循环用在有次数的循环上。<br>while循环用在有条件的控制上。<br>while循环，直到表达式为假才退出；表达式是一个逻辑表达式，必须返回一个True或False。<br>while循环后的else用法同for循环，当while条件正常结束时执行，否则不执行。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="number">2</span>_2_2.py</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">in_put = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> in_put != <span class="string">"q"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line">    in_put = raw_input(<span class="string">"Please input something,q for quit:"</span>)</span><br><span class="line"><span class="comment">#    if in_put == ''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> in_put:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> in_put == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"continue"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_2_2.py </span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:a</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:q</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure></p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><ul><li>有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？<br>程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去  掉不满足条件的排列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span>((a != b) <span class="keyword">and</span> (a != c) <span class="keyword">and</span> (b != c)):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                d = a + b*<span class="number">10</span> + c*<span class="number">100</span></span><br><span class="line">                list1.append(d)</span><br><span class="line">print(<span class="string">"满足条件的三位数共有&#123;&#125;个，如下列表所示"</span>.format(i))</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">满足条件的三位数共有<span class="number">24</span>个，如下列表所示</span><br><span class="line">[<span class="number">321</span>, <span class="number">421</span>, <span class="number">231</span>, <span class="number">431</span>, <span class="number">241</span>, <span class="number">341</span>, <span class="number">312</span>, <span class="number">412</span>, <span class="number">132</span>, <span class="number">432</span>, <span class="number">142</span>, <span class="number">342</span>, <span class="number">213</span>, <span class="number">413</span>, <span class="number">123</span>, <span class="number">423</span>, <span class="number">143</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">314</span>, <span class="number">124</span>, <span class="number">324</span>, <span class="number">134</span>, <span class="number">234</span>]</span><br></pre></td></tr></table></figure></p><ul><li>打印出所有的“水仙花数”,所谓“水仙花数”是指一个三位数,其各位数字立方和等于该数本身。例如：153是一个“水仙花数”,因为153=1的三次方＋5的三次方＋3的三次方。<br>程序分析：利用for循环控制100-999个数,每个数分解出个位,十位,百位。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    str1 = str(i)</span><br><span class="line">    a, b , c = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span>(int(a)**<span class="number">3</span> + int(b)**<span class="number">3</span> + int(c)**<span class="number">3</span> == i):</span><br><span class="line">        list2.append(i)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">153</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">407</span>]</span><br></pre></td></tr></table></figure></p><ul><li>两个乒乓球队进行比赛,各出三人。甲队为a,b,c三人,乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比,c说他不和x,z比,请编程序找出三队赛手的名单。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">list1 = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(list1):</span><br><span class="line">    <span class="keyword">if</span>(i[<span class="number">0</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'z'</span>):</span><br><span class="line">        print(<span class="string">'a vs &#123;0&#125;, b vs &#123;1&#125;, c vs &#123;2&#125;'</span>.format(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a vs z, b vs x, c vs y</span><br></pre></td></tr></table></figure></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><ul><li>将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。<br>程序分析：对n进行分解质因数,应先找到一个最小的质数i,然后按下述步骤完成：<br>(1)如果分解后商为1,则说明分解质因数的过程已经结束,打印出即可。<br>(2)如果商不为1,则应打印出i的值,并用n除以i的商,作为新的正整数进行分解,重复执行第一步。<br>(3)如果n不能被i整除,则i的值加1,重复执行第一步。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"input a integer:"</span>))</span><br><span class="line">list1 = [num]</span><br><span class="line">str1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(num+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            list1.append(i)</span><br><span class="line">            num = num / i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(list1)):</span><br><span class="line">    str1 += str(list1[j])</span><br><span class="line">print(<span class="string">"&#123;0&#125;="</span>.format(list1[<span class="number">0</span>]), end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'*'</span>.join(str1))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input a integer:<span class="number">175</span></span><br><span class="line"><span class="number">175</span>=<span class="number">5</span>*<span class="number">5</span>*<span class="number">7</span></span><br></pre></td></tr></table></figure></p><ul><li>猴子吃桃问题：猴子第一天摘下若干个桃子,当即吃了一半,还不瘾,又多吃了一个，第二天早上又将剩下的桃子吃掉一半,又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时,见只剩下一个桃子了。求第一天共摘了多少。<br>程序分析：采取逆向思维的方法,从后往前推断。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    p = (p+<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1534</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;h3 id=&quot;for-序列&quot;&gt;&lt;a href=&quot;#for-序列&quot; class=&quot;headerlink&quot; title=&quot;for 序列&quot;&gt;&lt;/a&gt;for 序列&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
  </entry>
  
  <entry>
    <title>python字典</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E5%AD%97%E5%85%B8/"/>
    <id>https://rosinelan.github.io/2018/11/16/python字典/</id>
    <published>2018-11-16T09:31:49.000Z</published>
    <updated>2018-11-21T10:55:30.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><p>字典是python中唯一的映射类型(哈希表)。<br>字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: type(dic)</span><br><span class="line">Out[<span class="number">2</span>]: dict</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: dic</span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="number">1</span>: <span class="number">123</span>, <span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><ul><li><p>keys()<br>返回列表，内容为字典的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dic.keys()</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'a'</span>, <span class="number">1</span>, (<span class="string">'a'</span>, <span class="string">'b'</span>)]</span><br></pre></td></tr></table></figure></li><li><p>values()<br>返回列表，内容为字典中的value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: dic.values()</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">123</span>, <span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure></li><li><p>items()<br>返回列表，内容为字典的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dic.items()</span><br><span class="line">Out[<span class="number">9</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">123</span>), ((<span class="string">'a'</span>, <span class="string">'b'</span>), <span class="string">'hello'</span>)]</span><br></pre></td></tr></table></figure></li></ul><h2 id="字典练习"><a href="#字典练习" class="headerlink" title="字典练习"></a>字典练习</h2><p>从键盘读取输入，存入字典，输出。</p><h3 id="输出方式1"><a href="#输出方式1" class="headerlink" title="输出方式1"></a>输出方式1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">print</span> info</span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:mike</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">&#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'name'</span>: <span class="string">'mike'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="输出方式2"><a href="#输出方式2" class="headerlink" title="输出方式2"></a>输出方式2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:tom</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">(<span class="string">'gender'</span>, <span class="string">'M'</span>)</span><br><span class="line">(<span class="string">'age'</span>, <span class="string">'20'</span>)</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'tom'</span>)</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式3"><a href="#输出方式3" class="headerlink" title="输出方式3"></a>输出方式3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> k,v</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender M</span><br><span class="line">age <span class="number">33</span></span><br><span class="line">name Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式4"><a href="#输出方式4" class="headerlink" title="输出方式4"></a>输出方式4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s: %s'</span> %(k,v)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender: M</span><br><span class="line">age: <span class="number">33</span></span><br><span class="line">name: Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h2 id="字典实例"><a href="#字典实例" class="headerlink" title="字典实例"></a>字典实例</h2><ul><li>现有一个字典dict1 保存的是小写字母a-z对应的ASCII码<br>dict1 = {‘a’: 97, ‘c’: 99, ‘b’: 98, ‘e’: 101, ‘d’: 100, ‘g’: 103, ‘f’: 102, ‘i’: 105, ‘h’: 104, ‘k’: 107, ‘j’: 106, ‘m’: 109, ‘l’: 108, ‘o’: 96, ‘n’: 110, ‘q’: 113, ‘p’: 112, ‘s’: 115, ‘r’: 114, ‘u’: 117, ‘t’: 116, ‘w’: 119, ‘v’: 118, ‘y’: 121, ‘x’: 120, ‘z’: 122}<br>1） 将该字典按照ASCII码的值排序<br>2） 有一个字母的ASCII错了，修改为正确的值，并重新排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dict1 = &#123;<span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">96</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'o'</span>, <span class="number">96</span>), (<span class="string">'a'</span>, <span class="number">97</span>), (<span class="string">'b'</span>, <span class="number">98</span>), (<span class="string">'c'</span>, <span class="number">99</span>), (<span class="string">'d'</span>, <span class="number">100</span>), (<span class="string">'e'</span>, <span class="number">101</span>), (<span class="string">'f'</span>, <span class="number">102</span>), (<span class="string">'g'</span>, <span class="number">103</span>), (<span class="string">'h'</span>, <span class="number">104</span>), (<span class="string">'i'</span>, <span class="number">105</span>), (<span class="string">'j'</span>, <span class="number">106</span>), (<span class="string">'k'</span>, <span class="number">107</span>), (<span class="string">'l'</span>, <span class="number">108</span>), (<span class="string">'m'</span>, <span class="number">109</span>), (<span class="string">'n'</span>, <span class="number">110</span>), (<span class="string">'p'</span>, <span class="number">112</span>), (<span class="string">'q'</span>, <span class="number">113</span>), (<span class="string">'r'</span>, <span class="number">114</span>), (<span class="string">'s'</span>, <span class="number">115</span>), (<span class="string">'t'</span>, <span class="number">116</span>), (<span class="string">'u'</span>, <span class="number">117</span>), (<span class="string">'v'</span>, <span class="number">118</span>), (<span class="string">'w'</span>, <span class="number">119</span>), (<span class="string">'x'</span>, <span class="number">120</span>), (<span class="string">'y'</span>, <span class="number">121</span>), (<span class="string">'z'</span>, <span class="number">122</span>)]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="keyword">if</span> j != ord(i):</span><br><span class="line">        print(<span class="string">"&#123;0&#125;'s value is not correct,shoud be &#123;1&#125;"</span>.format(i, ord(i)))</span><br><span class="line">        dict1[i] = ord(i)</span><br><span class="line"><span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o<span class="string">'s value is not correct,shoud be 111</span></span><br><span class="line"><span class="string">[('</span>a<span class="string">', 97), ('</span><span class="string">b', 98), ('</span>c<span class="string">', 99), ('</span>d<span class="string">', 100), ('</span>e<span class="string">', 101), ('</span><span class="string">f', 102), ('</span>g<span class="string">', 103), ('</span>h<span class="string">', 104), ('</span>i<span class="string">', 105), ('</span>j<span class="string">', 106), ('</span>k<span class="string">', 107), ('</span>l<span class="string">', 108), ('</span>m<span class="string">', 109), ('</span>n<span class="string">', 110), ('</span>o<span class="string">', 111), ('</span>p<span class="string">', 112), ('</span>q<span class="string">', 113), ('</span><span class="string">r', 114), ('</span>s<span class="string">', 115), ('</span>t<span class="string">', 116), ('</span><span class="string">u', 117), ('</span>v<span class="string">', 118), ('</span>w<span class="string">', 119), ('</span>x<span class="string">', 120), ('</span>y<span class="string">', 121), ('</span>z<span class="string">', 122)]</span></span><br></pre></td></tr></table></figure></p><ul><li><p>用最简洁的代码，自己生成一个大写字母 A-Z 及其对应的ASCII码值的字典dict2(使用dict，zip，range方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: dict2=dict(zip(string.uppercase, range(ord(<span class="string">'A'</span>), ord(<span class="string">'Z'</span>)+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">print</span> dict2</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>将dict2与第一题排序后的dict1合并成一个dict3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: dict2.update(dict1)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dict3=dict2.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> dict3</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>, <span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">111</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典的定义&quot;&gt;&lt;a href=&quot;#字典的定义&quot; class=&quot;headerlink&quot; title=&quot;字典的定义&quot;&gt;&lt;/a&gt;字典的定义&lt;/h2&gt;&lt;p&gt;字典是python中唯一的映射类型(哈希表)。&lt;br&gt;字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="字典" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="dict" scheme="https://rosinelan.github.io/tags/dict/"/>
    
      <category term="items" scheme="https://rosinelan.github.io/tags/items/"/>
    
  </entry>
  
  <entry>
    <title>python字符串元组列表</title>
    <link href="https://rosinelan.github.io/2018/11/15/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%83%E7%BB%84%E5%88%97%E8%A1%A8/"/>
    <id>https://rosinelan.github.io/2018/11/15/python字符串元组列表/</id>
    <published>2018-11-15T02:48:21.000Z</published>
    <updated>2018-11-20T10:02:38.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>python数据类型包括数值、字符串、列表、元组和字典。</p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>数值类型包括整型、长整型、浮点型和复数型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型   <span class="number">2</span></span><br><span class="line">长整型  <span class="number">100L</span></span><br><span class="line">浮点型  <span class="number">0.0</span>, <span class="number">12.0</span>, <span class="number">-18.8</span>, <span class="number">3e+7</span></span><br><span class="line">复数型(complex)  <span class="number">-3.14j</span>, <span class="number">8.32e-36j</span></span><br></pre></td></tr></table></figure></p><a id="more"></a>  <h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串有3种定义方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'this is a string'</span></span><br><span class="line">str = <span class="string">"this is a string"</span></span><br><span class="line">str = <span class="string">'''this is a string'''</span></span><br></pre></td></tr></table></figure></p><p>此处的3引号可以是3个单引号，也可以是3个双引号，但不可混用。<br>字符串是序列的一种，可以通过切片的方式操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcde'</span></span><br><span class="line">a[<span class="number">0</span>] = a  </span><br><span class="line">a[<span class="number">-1</span>] = e  </span><br><span class="line">a[:] = abcde  </span><br><span class="line">a[:<span class="number">-1</span>] = abcd  </span><br><span class="line">a[::<span class="number">1</span>] = abcde  </span><br><span class="line">a[::<span class="number">2</span>] = ace</span><br><span class="line">a[<span class="number">-4</span>:<span class="number">-2</span>] = bc           </span><br><span class="line">a[<span class="number">-2</span>:<span class="number">-4</span>:<span class="number">-1</span>] = dc         从右向左取</span><br></pre></td></tr></table></figure></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>字符串、元组和列表都是序列。  </p><h3 id="序列的特点"><a href="#序列的特点" class="headerlink" title="序列的特点"></a>序列的特点</h3><ul><li>索引操作符<br>可以从序列中抓取一个特定的项目。  </li><li>切片操作符<br>能够获取序列的一个切片，即一部分序列。<h3 id="序列的基本操作"><a href="#序列的基本操作" class="headerlink" title="序列的基本操作"></a>序列的基本操作</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4>序列的长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">2</span>]: len(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ul><h4 id=""><a href="#" class="headerlink" title="+"></a>+</h4><p>连接2个字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">4</span>]: a + <span class="string">'f'</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'abcdef'</span></span><br></pre></td></tr></table></figure></p><h4 id="-1"><a href="#-1" class="headerlink" title="*"></a>*</h4><p>重复序列元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="string">'#'</span> * <span class="number">10</span></span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'##########'</span></span><br></pre></td></tr></table></figure></p><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>判断元素是否在序列中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">11</span>]: <span class="string">'a'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></span><br><span class="line">In [<span class="number">12</span>]: <span class="string">'f'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">12</span>]: <span class="keyword">False</span></span><br><span class="line">In [<span class="number">13</span>]: <span class="string">'f'</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">13</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><p>返回最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">15</span>]: max(a)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'e'</span></span><br></pre></td></tr></table></figure></p><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><p>返回最小值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: a</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">17</span>]: min(a)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><h4 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x,y)"></a>cmp(x,y)</h4><p>比较2个序列是否相等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: a</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'abcde'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: cmp(a,<span class="string">'ac'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: cmp(a,<span class="string">'abcde'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: cmp(a,<span class="string">'abcdef'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cmp(a,<span class="string">'ab'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组和字符串一样是不可变的；元组可以存储一系列的值；元组通常用在用户定义的函数能够安全的采用一组值的时候，即被使用的元组的值不会改变。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>使用括号<code>()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: t = (<span class="string">'a'</span>,<span class="number">1</span>,(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: t</span><br><span class="line">Out[<span class="number">10</span>]: (<span class="string">'a'</span>, <span class="number">1</span>, (<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: t[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><h3 id="元祖操作"><a href="#元祖操作" class="headerlink" title="元祖操作"></a>元祖操作</h3><p>见序列</p><h3 id="元组的拆分"><a href="#元组的拆分" class="headerlink" title="元组的拆分"></a>元组的拆分</h3><p>元组可用于接受函数的返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: t</span><br><span class="line">Out[<span class="number">14</span>]: (<span class="string">'abcde'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: first,second,third = t</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: first</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'abcde'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: second</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: third</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'c'</span></span><br></pre></td></tr></table></figure></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表定义"><a href="#列表定义" class="headerlink" title="列表定义"></a>列表定义</h3><p>列表使用<code>[]</code>定义。<br>列表是处理一组有序项目的数据结构；可以在列表中存储一个序列的项目；列表是可变的数据类型。</p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list1 = []</span><br><span class="line">In [<span class="number">2</span>]: list1</span><br><span class="line">Out[<span class="number">2</span>]: []</span><br><span class="line">In [<span class="number">4</span>]: list2 = list()</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list2</span><br><span class="line">Out[<span class="number">5</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: list3 = [<span class="string">'a'</span>,<span class="number">1</span>,(<span class="number">2</span>,),[<span class="string">'hello'</span>,<span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: list3</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="string">'a'</span>, <span class="number">1</span>, (<span class="number">2</span>,), [<span class="string">'hello'</span>, <span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: len(list3)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: list3[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: list3[<span class="number">0</span>] = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: len(list3)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: list3[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'b'</span></span><br></pre></td></tr></table></figure><h3 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h3><ul><li>取值<br>切片和索引的方式，和字符串的一致。</li><li><p>添加<br>list.append()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: list2</span><br><span class="line">Out[<span class="number">17</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: list2.append(<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: list2</span><br><span class="line">Out[<span class="number">19</span>]: [<span class="string">'linux'</span>]</span><br></pre></td></tr></table></figure></li><li><p>删除<br>del list[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: list3</span><br><span class="line">Out[<span class="number">24</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,), [<span class="string">'hello'</span>, <span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: <span class="keyword">del</span> list3[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: list3</span><br><span class="line">Out[<span class="number">26</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,)]</span><br></pre></td></tr></table></figure></li></ul><p>list.remove(list[])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: list3</span><br><span class="line">Out[<span class="number">27</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: list3.remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: list3</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="string">'b'</span>, (<span class="number">2</span>,)]</span><br></pre></td></tr></table></figure></p><ul><li>修改<br>list[] = x</li><li>查找<br>var in list</li></ul><p>当然，字符串、元组和列表还有一些其他的内置方法，可以通在pycharm中通过定义一个对象，通过<code>对象.</code>方法查看了解。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><ul><li><p>将 “123” 转换成整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = int(<span class="string">"123"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> a</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure></li><li><p>将 “9999999999999999999” 转换成长整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: type(b)</span><br><span class="line">Out[<span class="number">5</span>]: long</span><br></pre></td></tr></table></figure></li><li><p>将 “3.1415926” 转换成一个浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: c = float(<span class="string">"3.1415926"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> c</span><br><span class="line"><span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: type(c)</span><br><span class="line">Out[<span class="number">8</span>]: float</span><br></pre></td></tr></table></figure></li><li><p>将 123 转换成一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: d = str(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> d</span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: type(d)</span><br><span class="line">Out[<span class="number">11</span>]: str</span><br></pre></td></tr></table></figure></li><li><p>现有以下字符串<br>字符串1：” abc deFGh&amp;<em>ijkl opq mnrst((uvwxyz “<br>字符串2：” ABC#DEF GH%IJ MNOPQ KLRS&amp;&amp;TUVWX(</em>&amp;YZ “<br>使用字符串的各种方法转换成如下方式<br>ABCDEFGHIJKLMNOPQRSTUVWXYZzyxwvutsrqponmlkjihgfedcba</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: str1=<span class="string">" abc deFGh&amp;*ijkl opq mnrst((uvwxyz "</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: str2=<span class="string">" ABC#DEF GH%IJ MNOPQ KLRS&amp;&amp;TUVWX(*&amp;YZ "</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: str11=<span class="string">""</span>.join((filter(<span class="keyword">lambda</span> x: x.isalpha(), str1))).upper()</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: str21=<span class="string">""</span>.join((filter(<span class="keyword">lambda</span> x: x.isalpha(), str2))).lower()</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="keyword">print</span> str11</span><br><span class="line">ABCDEFGHIJKLOPQMNRSTUVWXYZ</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> str21</span><br><span class="line">abcdefghijmnopqklrstuvwxyz</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="keyword">print</span> str11+str21[::<span class="number">-1</span>]</span><br><span class="line">ABCDEFGHIJKLOPQMNRSTUVWXYZzyxwvutsrlkqponmjihgfedcba</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><ul><li>现有列表<br>list1 = [‘XXXX’, ‘b’, 3, ‘c’, ‘&amp;’, ‘a’, 3, ‘3’, 3, ‘aa’, ‘3’, ‘XXXX’]<br>list2 = [‘e’, ‘f’, ‘g’]<br>要求对其做以下操作：</li></ul><ol><li>取出 ‘XXXX’ 中间的部分，形成一个新的列表list3。</li><li>对list3 做一下几部操作<br>1）删除特殊符号。<br>2）统计 3 在list3中出现的次数。<br>3）用最简短的代码去除list3中 26个字母以外的元素(要求只能对list3操作)。<br>4）对list3排序。<br>5）在末尾追加’d’,并把list2追加到list3。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list1 = [<span class="string">'XXXX'</span>, <span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'&amp;'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>, <span class="string">'XXXX'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: list2 = [<span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: list3 = list1[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'&amp;'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list3.remove(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> list3.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: list3=[i <span class="keyword">for</span> i <span class="keyword">in</span> list3 <span class="keyword">if</span> str(i).isalpha()]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'aa'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: list3.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: list3.append(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: list3.extend(list2)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><ul><li>现有两个变量<br>a = (‘h’,)<br>b = (‘h’)<br>1）将a和b分别追加到上一题的list3中，观察有什么区别。<br>2）将1生成的list3转换成元组(扩展：自己搜索方法)。<br>3）打印出只有一个元素’h’的元组，在2中生成的元组中的索引。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: a=(<span class="string">'h'</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: b=(<span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: list3.append(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: list3.append(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,), <span class="string">'h'</span>]</span><br><span class="line"><span class="comment">##区别在于a是元组，b是字符串</span></span><br><span class="line">In [<span class="number">25</span>]: t3=tuple(list3)</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">print</span> t3</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,), <span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: t3.index(a)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;python数据类型包括数值、字符串、列表、元组和字典。&lt;/p&gt;
&lt;h3 id=&quot;数值&quot;&gt;&lt;a href=&quot;#数值&quot; class=&quot;headerlink&quot; title=&quot;数值&quot;&gt;&lt;/a&gt;数值&lt;/h3&gt;&lt;p&gt;数值类型包括整型、长整型、浮点型和复数型。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整型   &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;长整型  &lt;span class=&quot;number&quot;&gt;100L&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;浮点型  &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-18.8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3e+7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;复数型(complex)  &lt;span class=&quot;number&quot;&gt;-3.14j&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8.32e-36j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="字符串" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="序列" scheme="https://rosinelan.github.io/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="元组" scheme="https://rosinelan.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>git安装和使用</title>
    <link href="https://rosinelan.github.io/2018/11/14/git%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/11/14/git安装和使用/</id>
    <published>2018-11-14T08:52:28.000Z</published>
    <updated>2018-11-15T01:50:19.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>centos 7安装git很简单，直接使用<code>yum install -y git</code>即可。<br>安装完成之后配置信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "rosinelan"</span><br><span class="line">git config --global user.email "mqwanghui327@hotmail.com"</span><br></pre></td></tr></table></figure></p><a id="more"></a>   <p><code>global</code>表示全局配置，所有该机器每次提交的文件默认为该用户。</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>安装完成之后创建版本库。  </p><ol><li><p>创建一个目录用于存放文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /studypy</span><br><span class="line">cd /studypy</span><br></pre></td></tr></table></figure></li><li><p>使用<code>git init</code>命令将该目录变成git可管理的仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ol><p>出现提示信息<code>Initialized empty Git repository in /studypy/.git/</code>说明成功初始化。<br>此时该目录下会新增一个<code>.git</code>目录，该目录是git用来跟踪管理版本库的，不可手动修改。</p><ol><li>将文件添加到版本库。<br>新建一个名字为<code>1.py</code>的文件，内容如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">num1 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line">num2 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s + %s = %s"</span> %(num1,num2,num1+num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s - %s = %s"</span> %(num1,num2,num1-num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s * %s = %s"</span> %(num1,num2,num1*num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s / %s = %s"</span> %(num1,num2,num1/num2)</span><br></pre></td></tr></table></figure></li></ol><p>该文件一定要位于<code>/studypy</code>目录下面，然后执行下面命令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add 1.py</span><br><span class="line">git commit -m "wtote a python file"</span><br></pre></td></tr></table></figure></p><p>出现提示信息<code>[master (root-commit) 1cb292d] wtote a python file 1 file changed, 10 insertions(+) create mode 100644 1.py</code>。<br><code>git add</code>为添加文件至仓库，可多次添加；<code>git commit</code>为提交文件至仓库，一次可提交多个文件，<code>-m</code>命令为添加提交文件的说明信息。  </p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><h3 id="github配置ssh连接"><a href="#github配置ssh连接" class="headerlink" title="github配置ssh连接"></a>github配置ssh连接</h3><p>注册github账号，然后配置机器和github的ssh，用于文件传输。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "mqwanghui327@hotmail.com"</span><br></pre></td></tr></table></figure></p><p>创建完成之后可以在<code>/root/.ssh/</code>目录查看公钥文件<code>id_rsa.pub</code>。<br>登录github，点击右上角头像，选择<code>Settings</code>，然后选择<code>SSH and GPG keys</code>。<br><img src="http://cdn.rosinelan.com/blog/system/git-ssh-Setting.png" alt="gti-ssh-Setting" title="git-ssh-Setting"><br>点击<code>New SSH key</code>，添加对应的公钥。<br><img src="http://cdn.rosinelan.com/blog/system/git-Newsshkey.png" alt="git-Newsshkey" title="git-Newsshkey"><br>添加之后使用下面命令测试公钥添加是否成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>若出现下面的提示信息说明添加正确。<br><code>Hi rosinelan! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><h3 id="github创建远程仓库"><a href="#github创建远程仓库" class="headerlink" title="github创建远程仓库"></a>github创建远程仓库</h3><p>接下来我们在github创建一个远程仓库，然后将远程仓库和本地仓库关联，最后将本地仓库的内容推送至远程仓库。</p><ol><li>创建远程仓库<br>在github创建新建仓库，通过右上角的<code>+</code>，选择<code>New repository</code>即可新建。<br><img src="http://cdn.rosinelan.com/blog/system/Create%20new%20repository.png" alt="Create new repository" title="Create new repository"><br>创建完成之后可以看到下面提示信息<br><img src="http://cdn.rosinelan.com/blog/system/new%20repository%20info.png" alt="new repository info" title="new repository info"></li><li>关联本地仓库<br>根据提示信息，在本地仓库<code>studypy</code>进行下面操作<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:rosinelan/studypy.git</span><br></pre></td></tr></table></figure></li></ol><p>上面操作需要在本地仓库<code>studypy</code>执行，注意切换到<code>/studypy</code>目录下。<br>此处<code>origin</code>是远程仓库的名字，git默认的叫法。  </p><ol><li>推送本地仓库至github远程仓库<br>执行下面命令将本地仓库内容推送至远程仓库。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><p>此时出现下面提示信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'52.74.223.119'</span> to the list of known hosts.</span><br><span class="line">Counting objects: <span class="number">3</span>, done.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">326</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request <span class="keyword">for</span> <span class="string">'master'</span> on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/rosinelan/studypy/pull/new/master</span><br><span class="line">remote: </span><br><span class="line">To git@github.com:rosinelan/studypy.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master <span class="keyword">from</span> origin.</span><br></pre></td></tr></table></figure></p><p>提示信息可以看出，当前推送的内容数量，还有就是推送是将本地的master分支推送至远程。<br>此处<code>git push</code>使用了参数<code>-u</code>，意思是将本地master分支推送至远程的新master分支，同时将两者关联起来，以后推送默认就是推送至master分支。第一次使用该参数，之后就不用添加参数。<br>例如：新建一个<code>README.md</code>，然后推送至远程仓库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "studypy" &gt;&gt;README.md</span><br></pre></td></tr></table></figure></p><p>本地仓库提交<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit -m "wrote readme"</span><br></pre></td></tr></table></figure></p><p>提示信息如下说明本地提交成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[master ce31753] wrote readme</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure></p><p>推送至远程仓库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>提示如下信息说明提交成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 280 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:rosinelan/studypy.git</span><br><span class="line">   1cb292d..ce31753  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>注意：<br>假如不使用改参数将两者关联，之后的推送就需要使用下面命令进行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:master</span><br></pre></td></tr></table></figure></p><p>命令格式为<code>git push 远程主机名 本地分支名：远程分支名</code>。  </p><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><p>假如没有本地仓库，想要直接从github拉取文件怎么办呢？远程仓库克隆。<br>首先在github创建一个远程仓库。<br><img src="http://cdn.rosinelan.com/blog/system/git-origin-creat.png" alt="git-origin-creat" title="git-origin-creat"><br>勾选初始化<code>README.md</code>文件，此时远程仓库创建完成后可以看到该文件。<br>接下来使用<code>git clone</code>克隆本地库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">git clone git@github.com:rosinelan/studypy2.git</span><br></pre></td></tr></table></figure></p><p>进入本地的目录<code>/study2</code>，可以看到<code>README.md</code>文件。  </p><h2 id="推荐git学习资源"><a href="#推荐git学习资源" class="headerlink" title="推荐git学习资源"></a>推荐git学习资源</h2><ol><li>简明指南，快速入手 <a href="http://rogerdudler.github.io/git-guide/" target="_blank" rel="noopener">git - the simple guide</a></li><li>常用命令及最佳实践 <a href="https://blog.csdn.net/xinyan233/article/details/80593091" target="_blank" rel="noopener">git cheat sheet</a></li><li>进阶学习 <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro git book</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h2&gt;&lt;p&gt;centos 7安装git很简单，直接使用&lt;code&gt;yum install -y git&lt;/code&gt;即可。&lt;br&gt;安装完成之后配置信息&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &quot;rosinelan&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &quot;mqwanghui327@hotmail.com&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="git" scheme="https://rosinelan.github.io/tags/git/"/>
    
      <category term="仓库" scheme="https://rosinelan.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
      <category term="origin" scheme="https://rosinelan.github.io/tags/origin/"/>
    
      <category term="master" scheme="https://rosinelan.github.io/tags/master/"/>
    
  </entry>
  
  <entry>
    <title>variable of python</title>
    <link href="https://rosinelan.github.io/2018/11/14/variable-of-python/"/>
    <id>https://rosinelan.github.io/2018/11/14/variable-of-python/</id>
    <published>2018-11-14T08:51:45.000Z</published>
    <updated>2018-11-14T10:24:48.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python配置"><a href="#python配置" class="headerlink" title="python配置"></a>python配置</h2><p>默认python的编辑器并不提供补全功能，建议安装<code>ipython</code>。ipython可以通过python提供的包管理工具<code>pip</code>安装和管理。<br>具体步骤为  </p><ol><li>安装扩展源epel  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a>   <ol><li><p>安装pip  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-pip</span><br></pre></td></tr></table></figure></li><li><p>安装ipython</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython==<span class="number">5.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></li></ol><p>安装ipython的时候需要注意对应版本适配问题，例如：最新版本的ipython不适用于python2.6。  </p><h3 id="pip代理设置"><a href="#pip代理设置" class="headerlink" title="pip代理设置"></a>pip代理设置</h3><p>假如机器通过代理方式上网，可以通过设置全局代理或者添加参数方式处理。  </p><h4 id="全局代理设置"><a href="#全局代理设置" class="headerlink" title="全局代理设置"></a>全局代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.bash_profile</span><br><span class="line">export http_proxy=<span class="string">"http://xxxx:8888"</span></span><br><span class="line">export https_proxy=<span class="string">"https://xxxx:8888"</span></span><br></pre></td></tr></table></figure><p>然后<code>source /root/.bash_profile</code>使之生效。</p><h4 id="pip添加参数"><a href="#pip添加参数" class="headerlink" title="pip添加参数"></a>pip添加参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --proxy http://xxxx:<span class="number">8888</span> ipython</span><br></pre></td></tr></table></figure><h2 id="python文件类型"><a href="#python文件类型" class="headerlink" title="python文件类型"></a>python文件类型</h2><p>文件类型有3种，分别为源代码、字节代码和优化代码。  </p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>以<code>py</code>作为扩展名，由python程序解释，不需要编译。</p><h3 id="字节代码"><a href="#字节代码" class="headerlink" title="字节代码"></a>字节代码</h3><p>源码文件编译之后生成的扩展名为<code>pyc</code>的文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.compile(‘<span class="number">1.</span>py’)</span><br></pre></td></tr></table></figure></p><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><p>经过优化的源码文件，扩展名为<code>pyo</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -O -m py_compile <span class="number">1.</span>py</span><br></pre></td></tr></table></figure></p><p>字节代码和优化代码都可在无源码情况下直接执行；编译和优化之后的代码非文本文件，无法看到源码。  </p><h2 id="python变量"><a href="#python变量" class="headerlink" title="python变量"></a>python变量</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量是计算机内的一块区域，可以存储规定范围内的值，而且值可以改变。<br>python下变量是对一个数据的引用。<br>变量重新赋值时，会重新指向另一个地址。</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>变量名由字母、数字、下划线组成，不能以数字开头，不可以使用关键字。  </p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>赋值时变量的声明和定义的过程。<br><code>a = 1</code><br><code>id(a)</code> 内置函数，查看变量a的内存地址。<br><code>type(a)</code> 查看变量a的类型。</p><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">+=</span><br><span class="line">-+</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br></pre></td></tr></table></figure><h4 id="算符运算符"><a href="#算符运算符" class="headerlink" title="算符运算符"></a>算符运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/  除数和被除数均为整数时为整除，含有浮点数时结果含小数</span><br><span class="line">//  整除，只取整数部分</span><br><span class="line">%  取余</span><br><span class="line">**  指数运算(<span class="number">2</span>**<span class="number">3</span>==<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>返回结果为布尔值，<code>True</code>或者<code>False</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">==</span><br><span class="line">!=</span><br></pre></td></tr></table></figure></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span>  逻辑与</span><br><span class="line"><span class="keyword">or</span>  逻辑或</span><br><span class="line"><span class="keyword">not</span>  逻辑非</span><br></pre></td></tr></table></figure><h4 id="优先级列表"><a href="#优先级列表" class="headerlink" title="优先级列表"></a>优先级列表</h4><p>从上向下优先级越高，从左向右优先级越高<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Lambda</span><br><span class="line">逻辑运算：<span class="keyword">or</span></span><br><span class="line">逻辑运算：<span class="keyword">and</span></span><br><span class="line">逻辑运算：<span class="keyword">not</span></span><br><span class="line">成员测试：<span class="keyword">in</span>，<span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">同一性测试：<span class="keyword">is</span>，<span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">比较：&lt;，&lt;=，&gt;，&gt;=，!=，==</span><br><span class="line">按位或：|</span><br><span class="line">按位异或：^</span><br><span class="line">按位与：&amp;</span><br><span class="line">移位：&lt;&lt;，&gt;&gt;</span><br><span class="line">加法和减法：+，-</span><br><span class="line">乘法、除法与取余：*，/，%</span><br><span class="line">正负号：+x，-x</span><br><span class="line">按位翻转：~x</span><br><span class="line">指数：**</span><br></pre></td></tr></table></figure></p><p>表达式是将不同的数据用运算符按一定的规则连接起来。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>四则运算，从键盘读取输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">num1 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line">num2 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s + %s = %s"</span> %(num1,num2,num1+num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s - %s = %s"</span> %(num1,num2,num1-num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s * %s = %s"</span> %(num1,num2,num1*num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s / %s = %s"</span> %(num1,num2,num1/num2)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python配置&quot;&gt;&lt;a href=&quot;#python配置&quot; class=&quot;headerlink&quot; title=&quot;python配置&quot;&gt;&lt;/a&gt;python配置&lt;/h2&gt;&lt;p&gt;默认python的编辑器并不提供补全功能，建议安装&lt;code&gt;ipython&lt;/code&gt;。ipython可以通过python提供的包管理工具&lt;code&gt;pip&lt;/code&gt;安装和管理。&lt;br&gt;具体步骤为  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装扩展源epel  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="pip" scheme="https://rosinelan.github.io/tags/pip/"/>
    
      <category term="变量" scheme="https://rosinelan.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="文件类型" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="运算符" scheme="https://rosinelan.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>install of python</title>
    <link href="https://rosinelan.github.io/2018/11/14/install-of-python/"/>
    <id>https://rosinelan.github.io/2018/11/14/install-of-python/</id>
    <published>2018-11-14T08:51:28.000Z</published>
    <updated>2018-11-20T09:17:02.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a>python介绍</h2><p>python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。<br>python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。<br>除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。<br>根据<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a>2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。<br><a id="more"></a>   </p><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><p>当前python主要使用版本有2种，分别是python2和python3，且python2.7在将来的2020年之后将失去后续支持。<br>包括centos7版本系统默认安装的python依然是2.7版本，且大多数公司依然在使用python2。<br>学习以python3为主，使用最新的语法和类库，同时掌握python2和python3的主要区别，保证代码在2个版本的兼容性。   </p><h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><p>以最新的python3.6为基础进行安装。   </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>linux系统下载源码编译安装，windows系统下载可执行文件运行安装。<br><a href="https://www.python.org" target="_blank" rel="noopener">点击</a>进入python官方网站<br>选择Downloads –&gt; All releases<br><img src="http://cdn.rosinelan.com/blog/program/python-dowload.png" alt="python-Download" title="python-Download"><br>点击<code>Download Python 3.64</code><br><img src="http://cdn.rosinelan.com/blog/program/python-v364.png" alt="python-v364" title="python-v364"><br>在新的Python 3.6.4页面下拉至Files部分<br><img src="http://cdn.rosinelan.com/blog/program/python-install.png" alt="python-install" title="python-install"><br>其中linux系统使用 <code>Gzipped source tarball</code>,<a href="https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz" target="_blank" rel="noopener">点击下载</a></p><p>64位windows使用 <code>Windows x86-64 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe" target="_blank" rel="noopener">点击下载</a></p><p>32位windwos使用 <code>Windows x86 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="在linux上安装python"><a href="#在linux上安装python" class="headerlink" title="在linux上安装python"></a>在linux上安装python</h3><p>centos系统默认会安装python2.7,现在安装最新版本python3.6。<br>centos下使用源码编译安装，步骤如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Python-3.6.4.tgz   </span><br><span class="line">cd Python-3.6.4   </span><br><span class="line">./configure --prefix=/usr/local/python364   </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>此时发现/usr/bin/python依然是原来的老版本,需要修改/usr/bin/python对应的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python_27</span><br><span class="line">ln -s /usr/local/python364/bin/python /usr/bin/python</span><br></pre></td></tr></table></figure></p><p>此时通过<code>python -v</code>命令可以看到版本为v3.6.4.<br>注意：采用此方法安装后会发现yum不可用，原因是yum使用依赖老版本python，此时需要修改<code>/usr/bin/yum</code>第一行为<code>#!/usr/bin/python_27</code>就可以了。</p><h3 id="在windows上安装python"><a href="#在windows上安装python" class="headerlink" title="在windows上安装python"></a>在windows上安装python</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击<code>python-3.6.4-amd64.exe</code>开始安装<br><img src="http://cdn.rosinelan.com/blog/program/python-win-install.png" alt="python-win-install" title="python-win-install"><br>注意要勾选<code>Add Python 3.6 tp PATH</code>,然后点<code>Install Now</code>即可完成安装。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过<code>win+R</code>打开运行，输入<code>cmd</code>，在弹出的windows命令提示符输入<code>python</code>。<br>若提示信息如下，说明python安装正确。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-test.png" alt="python-win-test" title="python-win-test"><br>若得到如下错误信息，说明安装的时候未勾选<code>Add Python 3.6 tp PATH</code><br><img src="http://cdn.rosinelan.com/blog/program/python-win-wrong.png" alt="python-win-wrong" title="python-win-wrong"><br>此时需要修改环境变量使计算机能找到python所在位置。<br>通过<code>我的电脑--&gt;右键--&gt;属性--&gt;高级系统设置--&gt;环境变量</code>，在弹出的对话框中找到用户变量/系统变量中的<code>Path</code>变量，根据python安装位置添加路径。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-path.png" alt="python-win-path" title="python-win-path"><br><img src="http://cdn.rosinelan.com/blog/program/python-win-add.png" alt="python-win-add" title="python-win-add"><br>win10系统默认安装路径如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\Scripts\   </span><br><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\</span><br></pre></td></tr></table></figure></p><p>此处建议添加到系统变量中的Path变量中，系统变量是全局变量，无论什么用户登录均可生效；用户变量只针对当前用户生效，若更换其他用户登录则不会生效。<br>若认为添加环境变量操作太复杂，建议直接重装python，记得勾选<code>Add Python 3.6 tp PATH</code>。    </p><h2 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h2><h3 id="python开发工具介绍"><a href="#python开发工具介绍" class="headerlink" title="python开发工具介绍"></a>python开发工具介绍</h3><p>安装好python环境之后，简单的使用直接使用文本编辑器即可，比较常用的有Sublime Text、Notepad++等。<br>大型项目建议使用比较专业的集成开发环境，有利于提高效率，推荐PyCharm。<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击访问官方地址</a><br>PyCharm是Python IDE for Professional Developers。高大上的开发工具，工欲善其事必先利其器嘛。专业版为收费工具，请支持正版。<br>windows版本pycharm v2017.3.4<br><a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="PyCharm使用"><a href="#PyCharm使用" class="headerlink" title="PyCharm使用"></a>PyCharm使用</h3><h4 id="设置python版本"><a href="#设置python版本" class="headerlink" title="设置python版本"></a>设置python版本</h4><p>通过File–&gt;Setting–&gt;Project:XXXX–&gt;Project Interpreter下拉框选择相应版本的python。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-version.png" alt="pycharm-set-version" title="pycharm-set-version"><br>注意：当前选择的python版本用于当前Project，这样对于同时维护或开发不同版本的python非常便捷。   </p><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>通过File–&gt;Setting–&gt;Editor–&gt;Font设置合适的字体、大小、行距。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-font.png" alt="pycharm-set-font" title="pycharm-set-font">   </p><h4 id="设置文件模板"><a href="#设置文件模板" class="headerlink" title="设置文件模板"></a>设置文件模板</h4><p>通过File–&gt;setting–&gt;Editor–&gt;Code Style–&gt;File and Code Templates–&gt;Python Script添加文件模板。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-template.png" alt="pycahrm-set-template" title="pycharm-set-template"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"># @Author  : xiaohuihui</span><br><span class="line"># @File    : $&#123;NAME&#125;.py</span><br></pre></td></tr></table></figure></p><p>其中Time为创建时间，Author为作者，File为文件名。   </p><h4 id="pycharm运行"><a href="#pycharm运行" class="headerlink" title="pycharm运行"></a>pycharm运行</h4><p>通过File–&gt;New Project创建新的项目。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-python.png" alt="pycharm-new-python" title="pycharm-new-python"><br>通过项目–&gt;右键–&gt;New Python File创建第一个python文件。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-File.png" alt="pycharm-new-file" title="pycharm-new-file"><br>python文件的运行有3种方式<br>在python文件中右键–&gt;Run ‘input’，或者使用快捷键Ctrl+Shift+F10。<br>点击左下角的绿色<code>运行</code>按钮。<br>点击右上角的绿色<code>运行</code>按钮。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-run-python.png" alt="pycharm-run-python" title="pycharm-run-python"><br>注意：左下角和右上角的<code>运行</code>按钮默认执行的为上次执行过的python文件，也就是当切换到另一个python文件时，直接点击<code>运行</code>按钮，其执行文件不是当前文件。建议使用快捷键或者右键执行的方式。<br>windows下命令行运行python文件<br>在不打开pycharm时可以运行python文件嘛？<br>只要windows安装好python环境，答案自然是肯定的。<br>在命令行中使用<code>python D:\pythondev\calculate\print.py</code>方式运行即可。<br><img src="http://cdn.rosinelan.com/blog/program/python-run-cmd.png" alt="python-run-cmd" title="python-run-cmd">   </p><h4 id="pycharm参数传递"><a href="#pycharm参数传递" class="headerlink" title="pycharm参数传递"></a>pycharm参数传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys   </span><br><span class="line">print(&quot;File name:&#123;0&#125;&quot;.format(sys.argv[0]))  </span><br><span class="line">print(&quot;First argv:&#123;0&#125;&quot;.format(sys.argv[1]))  </span><br><span class="line">print(&quot;Second argv:&#123;0&#125;&quot;.format(sys.argv[2]))</span><br></pre></td></tr></table></figure><p>上述文件位于D:\pythondev\calculate，文件名称为print.py。<br>在命令行中参数传递方式<code>python print.py xiaohh 1000</code>。<br><img src="http://cdn.rosinelan.com/blog/program/python-argv-cmd.png" alt="python-argv-cmd" title="python-argv-cmd"><br>在pycharm中如何传递参数呢？<br>直接右键执行结果如下<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-wrong.png" alt="pycharm-argv-wrong" title="pycharm-argv-wrong"><br>需要传递参数的情况下，点击右上角<code>运行</code>左边下拉框，选择<code>Edit Configurations</code>，弹出的对话框中选择对应python文件–&gt;Configuration–&gt;Parameters，输入参数，空格区分。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-right.png" alt="pycharm-argv-right" title="pycharm-argv-right">    </p><h4 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h4><p><code>Ctrl + c</code> 复制<br><code>Ctrl + x</code> 剪切<br><code>Ctrl + d</code> 复制当前行<br><code>Ctrl + /</code> 注释当前行<br><code>Ctrl + r</code> 替换<br><code>Shift + Enter</code> 换行<br><code>Alt + Enter</code> 导入包(当写出包名时，按快捷键可自动添加<code>import</code>)<br><code>Ctrl + Shift + f</code> 查找(中文输入法冲突，需关闭才能生效)<br><code>Ctrl + Shift + n</code> 查找文件<br><code>Alt + 鼠标左键</code> 块编辑<br><code>光标批量选中 + Tab</code> 整体向右移动<br><code>光标批量选中 + Shift + Tab</code> 整体向左移动<br><code>Ctrl + a,Ctrl + Alt + L</code> 格式化(和QQ锁定快捷键一致，需修改QQ锁定快捷键)<br><code>Ctrl + Alt + 方向键</code> 查找引用和依赖包时，向右方向键为前进至下一个依赖包处，向左方向键为返回上一个依赖包处(此快捷键和Intel核心显卡快捷键冲突，建议禁用intel核心显卡快捷键)   </p><h4 id="pycharm调试"><a href="#pycharm调试" class="headerlink" title="pycharm调试"></a>pycharm调试</h4><p>设置断点<br>在行号和代码中间位置点击鼠标左键即可添加断点。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-dot.png" alt="pycahrm-debug-dot" title="pycharm-debug-dot"><br>调试模式<br>点击右上角的蜘蛛图标进行调试(Debug)模式<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-start.png" alt="pycharm-debug-start" title="pycharm-debug-start"><br><code>F7</code> Step into 跳入代码<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F7.gif" alt="pycharm-debug-F7" title="pycharm-debug-F7"><br><code>F8</code> Step Over 继续下一步<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F8.gif" alt="pycharm-debug-F8" title="pycharm-debug-F8"><br><code>F9</code> Resume Program 执行到下一个断点或恢复程序<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F9.gif" alt="pycharm-debug-F9" title="pycharm-debug-F9"><br>断点是调试时快速查找代码错误最有用的方法，需要熟悉并了解不同快捷键的作用。</p><h4 id="pycharm激活"><a href="#pycharm激活" class="headerlink" title="pycharm激活"></a>pycharm激活</h4><p>一般学习下载安装免费的社区版本足够，若有较大项目开发需求，专业版的pycharm激活可以参考<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 注册码</a>。</p><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><p>ipython是命令行工具，但包含补全等功能，比python自带的命令行好用很多，推荐安装使用。<br>手动安装需要首先解决依赖问题，推荐直接yum安装。<br>python2使用下面命令直接安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ipython -y</span><br></pre></td></tr></table></figure></p><p>python3使用下面命令安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install ipython</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;python介绍&lt;/h2&gt;&lt;p&gt;python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。&lt;br&gt;python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。&lt;br&gt;除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。&lt;br&gt;根据&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TIOBE&lt;/a&gt;2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="安装" scheme="https://rosinelan.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>django基础</title>
    <link href="https://rosinelan.github.io/2018/07/26/django%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/26/django基础/</id>
    <published>2018-07-26T09:20:00.000Z</published>
    <updated>2018-07-26T09:20:00.623Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jquery基础</title>
    <link href="https://rosinelan.github.io/2018/07/18/jquery%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/18/jquery基础/</id>
    <published>2018-07-18T03:32:58.000Z</published>
    <updated>2018-07-23T08:02:09.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h3><p>jQuery是一个JavaScript函数库，它可以完成以下操作：</p><ul><li>HTML元素选取</li><li>HTML元素操作</li><li>CSS操作<a id="more"></a></li><li>HTML事件函数</li><li>JavaScript特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p>那么如何使用jQuery库呢？<br>jQuery库其实就在一个JavaScript文件中，其中包含了所有的jQuery函数。通过下面的标记就可以将jQuery添加到网页。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>jQuery的下载可以点击<a href="http://jquery.com/download/" target="_blank" rel="noopener">jQuery</a>从官网下载。<br>要是不想在本地计算机存放Jquery库，也可以从Google或者Microsoft加载CDN jQuery文件，具体使用方式如下。<br>使用Google的CDN<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs</span></span></span><br><span class="line"><span class="tag"><span class="string">/jquery/1.4.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用Microsoft的CDN<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.microsoft.com/ajax/jquery</span></span></span><br><span class="line"><span class="tag"><span class="string">/jquery-1.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p>基础语法是<code>$(selector).action()</code>。  </p><ul><li><code>$</code>符号定义jQuery</li><li><code>selector</code>查询或查找HTML元素</li><li><code>action()</code>执行对元素的操作</li></ul><p>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).hide() <span class="comment">//隐藏当前元素</span></span><br><span class="line">$(<span class="string">"p"</span>).hide()  <span class="comment">//隐藏所有段落</span></span><br><span class="line">$(<span class="string">".test"</span>).hide()  <span class="comment">//隐藏所有class="test”的元素</span></span><br><span class="line">$(<span class="string">"#test"</span>).hide()  <span class="comment">//隐藏所有id="test"的元素</span></span><br></pre></td></tr></table></figure></p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>jQuery元素选择器和属性选择器允许通过标签名、属性名或内容对HTML元素进行选择。<br>选择器允许对HTML单个元素进行操作。  </p><ul><li><p>jQuery元素选择器<br>jQuery使用呢CSS选择器来选取HTML元素。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>)  <span class="comment">//选取&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">"p.intro"</span>)  <span class="comment">//选取所有class="intro"的&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">"p#demo"</span>)  <span class="comment">//选取所有id="demo"的&lt;p&gt;元素</span></span><br></pre></td></tr></table></figure></li><li><p>jQuery属性选择器<br>jQuery使用XPath表达式选择带有给定属性的元素。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"[href]"</span>)  <span class="comment">//选取所有带有href属性的元素</span></span><br><span class="line">$(<span class="string">"[href='#']"</span>)  <span class="comment">//选取所有带有href值等于"#"的元素</span></span><br><span class="line">$(<span class="string">"[href!='#']"</span>)  <span class="comment">//选取所有带有href值不等于"#"的元素</span></span><br><span class="line">$(<span class="string">"[href='.jpg']"</span>)  <span class="comment">//选取所有href值以.jpg结尾的元素</span></span><br></pre></td></tr></table></figure></li><li><p>jQuery CSS选择器<br>jQuery CSS选择器可用于改变HTML元素的CSS属性。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);  <span class="comment">//所有p元素的背景颜色修改为红色</span></span><br></pre></td></tr></table></figure></li></ul><p>关于选择器有更多的内容，可以点击<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="noopener">jQuery 参考手册 - 选择器</a>查看。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li>jQuery 事件函数<br>jQuery事件处理方法是jQuery中的核心函数。<br>通常会把jQuery代码放到<code>&lt;head&gt;</code>部分的事件处理方法中。<br>示例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).read(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>))</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"p"</span>).hide();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>当按钮的点击事件被触发时会调用一个函数，该方法隐藏所有的<code>&lt;p&gt;</code>元素。  </p><ul><li>常用的事件方法<br><code>$(document).ready()</code><br>允许在文档完全加载完成后执行函数。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//jQuery代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>上述写法简化为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//jQuery代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>click()</code><br>当按钮点击事件被触发时调用一个函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>当点击事件在某个<code>&lt;p&gt;</code>元素出发时，隐藏当前的<code>&lt;p&gt;</code>元素。<br><code>dbclick()</code><br>双击元素时，会发生dbclick事件。此时将调用对应函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).dbclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>focus()</code><br>当元素获得焦点时，发生focus事件。<br>focus()方法出发focus事件，或规定发生focus事件时运行的函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).foucs(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>,<span class="string">"#cccccc"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>更多关于jQuery事件可以点击<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="noopener">jQuery 参考手册 - 事件</a>查看介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery简介&quot;&gt;&lt;a href=&quot;#jQuery简介&quot; class=&quot;headerlink&quot; title=&quot;jQuery简介&quot;&gt;&lt;/a&gt;jQuery简介&lt;/h3&gt;&lt;p&gt;jQuery是一个JavaScript函数库，它可以完成以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML元素选取&lt;/li&gt;
&lt;li&gt;HTML元素操作&lt;/li&gt;
&lt;li&gt;CSS操作
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="jquery" scheme="https://rosinelan.github.io/tags/jquery/"/>
    
      <category term="查询" scheme="https://rosinelan.github.io/tags/%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="操作" scheme="https://rosinelan.github.io/tags/%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>css基础</title>
    <link href="https://rosinelan.github.io/2018/07/17/css%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/17/css基础/</id>
    <published>2018-07-17T07:52:14.000Z</published>
    <updated>2018-07-23T08:01:57.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h3><p>CSS指层叠样式表，是<code>Cascading Style Sheets</code>的缩写。<br>样式定义了如何显示HTML元素，通常存储在样式表中，使用样式解决了内容和表扬分离的问题。<br>使用外部样式表可以极大提高工作效率，通常存储在CSS文件中，多个样式定义可层叠为一。<br>同一个元素被多个样式定义时的优先级(其中数字4拥有最高的优先权)：<br><a id="more"></a></p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表(位于<code>&lt;head&gt;</code>标签内部)</li><li>内联样式(在HTML元素内部)<h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4>CSS规则主要由2个部分构成：选择器以及一条或多条声明。  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;declaration1; declaration2;... declarationN&#125;</span><br></pre></td></tr></table></figure></li></ol><p>选择器通常是需要改变样式的HTML元素。<br>每条元素由一个属性和一个值组成。属性是希望设置的样式属性，每个属性有一个值，属性和值使用冒号分开。<br>下面代码的作用是将h1元素内的文字颜色定义为红色，字体大小设置为14px。选择器是<code>h1</code>，属性是<code>color</code> <code>font-size</code> 值是<code>red</code> <code>14px</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h4><p>对选择器进行分组，这样被分组的选择器可以分享相同的声明。用逗号将需要分组的选择器分开。<br>下面代码对所有标签元素进行分组，所有标题元素都是绿色的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><ul><li>派生选择器<br>通过依据元素在其位置的上下文关系类定义样式。<br>例如：假如希望列表中的strong元素变为斜体，可以这样定义一个派生选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是粗体字，不是斜体字，因为我不在列表当中，所以这个规则对我不起作用<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是斜体字。这是因为 strong 元素位于 li 元素内。<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是正常的字体。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有<code>li</code>元素中的<code>strong</code>元素样式为斜体，无需为strong元素定义特别的class或id，代码更加整洁。  </p><ul><li>id选择器<br>id选择器可以为标有特定id的HTML元素指定特定的样式。id选择器以<code>#</code>定义。<br>下面示例中的id选择器，第一个定义元素颜色为红色，第二个定义元素颜色为绿色。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-id">#green</span> &#123;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在下面的HTML代码中，id属性为red的p元素显示为红色，id属性为green的p元素显示为绿色。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span>这个段落是红色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span>这个段落是绿色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>类选择器<br>类选择器以<code>.</code>定义。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>: center&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面的示例表示所有用于center类的HTML元素均为居中。<br>下面的示例中，h1和p元素都有center类，豆浆遵守<code>.center</code>选择器的规则。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">This heading will be center-aligned</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">This paragraph will also be center-aligned.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>属性选择器<br>对带有指定属性的HTML元素设置样式，不仅仅限于class和id属性。<br>下面示例为带有title属性的所有元素设置样式。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>也可以指定属性的值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title=hello]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还包括下面一些属性和值的对一个关系。<br>|选择器|描述|<br>|-|:-|<br>[attribute]|用于选取带有指定属性的元素<br>[attribute=value]|用于选取带有指定属性和值的元素<br>[attribute~=value]|用于选取属性值中包含指定词汇的元素<br>[attribute|=value]|用于选取带有以指定值开头的属性值的元素，该值必须是整个单词<br>[attribute^=value]|匹配属性值以指定值开头的每个元素<br>[attribute$=value]|匹配属性值以指定值结尾的每个元素<br>[attribute*=value]|匹配属性值中包含指定值的每个元素</p><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用<code>background-color</code>属性为元素设置背景色。可为所有元素设置背景色，但是不能继承，其默认值为<code>transparent</code>，也就是透明。<br>下面的示例将元素背景色设置为灰色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">background-color</span>: gray;&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-image</code>属性将图像放入背景。默认值为none。不能继承。<br>下面示例为段落应用了一个背景<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.flower</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(/i/eg_bg_03.gif);&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-repeat</code>属性对背景图像进行平铺。<br>属性值 repeat 导致图像在水平垂直方向上都平铺，就像以往背景图像的通常做法一样。repeat-x 和 repeat-y 分别导致图像只在水平或垂直方向上重复，no-repeat 则不允许图像在任何方向上平铺。<br>默认将从一个元素的左上角开始。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/i/eg_bg_03.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-position</code>属性改变图像在背景中的位置。该属性对应的值有多种。  </p><ol><li>关键字，top/bottom/left/right/center。</li><li>长度值，100px/5cm</li><li>百分数，50%/70%<br>示例：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    background-position: center;    居中</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 50%;    居中</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50px</span> 100<span class="selector-tag">px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后一个表示图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上。<br>使用<code>background-attachment</code>属性表示图像是否随着文档滚动而滚动，属性值有<code>fixed</code> <code>scroll</code>。其中<code>scroll</code>为默认值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> </span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(/i/eg_bg_02.gif);</span><br><span class="line">  <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><h3 id="CSS框模型"><a href="#CSS框模型" class="headerlink" title="CSS框模型"></a>CSS框模型</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS概述&quot;&gt;&lt;a href=&quot;#CSS概述&quot; class=&quot;headerlink&quot; title=&quot;CSS概述&quot;&gt;&lt;/a&gt;CSS概述&lt;/h3&gt;&lt;p&gt;CSS指层叠样式表，是&lt;code&gt;Cascading Style Sheets&lt;/code&gt;的缩写。&lt;br&gt;样式定义了如何显示HTML元素，通常存储在样式表中，使用样式解决了内容和表扬分离的问题。&lt;br&gt;使用外部样式表可以极大提高工作效率，通常存储在CSS文件中，多个样式定义可层叠为一。&lt;br&gt;同一个元素被多个样式定义时的优先级(其中数字4拥有最高的优先权)：&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="css" scheme="https://rosinelan.github.io/tags/css/"/>
    
      <category term="语法" scheme="https://rosinelan.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="选择器" scheme="https://rosinelan.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>html基础(二)</title>
    <link href="https://rosinelan.github.io/2018/07/17/html%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/07/17/html基础-二/</id>
    <published>2018-07-17T07:52:01.000Z</published>
    <updated>2018-07-23T08:01:42.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无须列表"><a href="#无须列表" class="headerlink" title="无须列表"></a>无须列表</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记。<br>无序列表始于<code>&lt;ul&gt;</code>标签。每个列表项始于<code>&lt;li&gt;</code>。<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下</p><p><ul></ul></p><p><li>Coffee</li></p><p><li>Milk</li><br><br>列表项内部也可以使用换行符、图片、链接及其他列表等。  </p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表也是一列项目，列表项目使用数字进行标记。<br>有序列表始于<code>ol</code>标签。每个列表项始于<code>li</code>标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下</p><p><ol></ol></p><p><li>Coffee</li></p><p><li>Milk</li><br><br>列表项内部也可以使用换行符、图片、链接及其他列表等。 </p><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>自定义列表以<code>&lt;dl&gt;</code>标签开始。每个自定义列表项以<code>&lt;dt&gt;</code>开始。每个自定义列表项的定义以<code>&lt;dd&gt;</code>开始。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下  </p><p><dl></dl></p><p><dt>Coffee</dt></p><p><dd>Black hot drink</dd></p><p><dt>Milk</dt></p><p><dd>White cold drink</dd><br><br>定义列表的列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格由<code>&lt;table&gt;</code>标签定义。每个表格均有若干行(由<code>&lt;tr&gt;</code>标签定义)，每行被分割为若干单元格(由<code>&lt;td&gt;</code>标签定义)。<br>单元格可以包含文本、图片、表格等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示如下</p><table><br><tr><br><td>row 1, cell 1</td><br><td>row 1, cell 2</td><br></tr><br><tr><br><td>row 2, cell 1</td><br><td>row 2, cell 2</td><br></tr><br></table><p>其他属性</p><ul><li>显示边框使用<code>border</code>属性。</li><li>表头使用<code>&lt;th&gt;</code>标签定义。</li><li>合并行使用<code>rowspan</code>。</li><li>和并列使用<code>colspan</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>55577854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>55577855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>55577854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>55577855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示如下<br>列合并</p><table border="1"><br><tr><br><th>姓名</th><br><th colspan="2">电话</th><br></tr><br><tr><br><td>Bill Gates</td><br><td>55577854</td><br><td>55577855</td><br></tr><br></table><br>行合并<br><table border="1"><br><tr><br>  <th>姓名</th><br>  <td>Bill Gates</td><br></tr><br><tr><br>  <th rowspan="2">电话</th><br>  <td>55577854</td><br></tr><br><tr><br>  <td>55577855</td><br></tr><br></table><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>HTML表单用于搜集不同用户类型的用户输入。使用<code>&lt;form&gt;</code>定义HTML表单。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">form elements</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表单中包括的元素有<code>input元素</code> <code>复选框</code> <code>单选按钮</code> <code>提交按钮</code>等。  </p><ul><li>input元素<br><code>&lt;input&gt;</code>元素根据不同的type属性，有很多形态。<br><code>&lt;input type=&quot;text&quot;&gt;</code>定义用于文本输入的单行输入字段。<br><code>&lt;input type=&quot;radio&quot;&gt;</code>定义单选按钮，允许用户在有限数量的选项中选择其中之一。<br><code>&lt;select&gt;</code>定义下拉列表，<code>option</code>定义具体列表项，<code>size</code>表示下拉列表可见项的数目。<br><code>&lt;input type=&quot;submit&quot;&gt;</code>定义用于向表单处理程序提交表单的按钮。通常包含用来处理输入数据的脚本的服务器页面。处理程序在表单的action属性中指定。  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"action_page.php"</span>&gt;</span></span><br><span class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">value</span>=<span class="string">"Mickey"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">value</span>=<span class="string">"Mouse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Gender:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span>Male</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Education:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>postgraduate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>junior college student<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>technical secondary school<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>显示如下</p><form action="action_page.php"><br>First name:<br><br><input type="text" name="firstname" value="Mickey"><br><br><br>Last name:<br><br><input type="text" name="lastname" value="Mouse"><br><br><br>Gender:<br><br><input type="radio" name="sex" value="male" checked>Male<br><br><br><input type="radio" name="sex" value="female">Female<br><br><br>Education:<br><br><select name="list" size="3"><br><option>postgraduate</option><br><option>undergraduate</option><br><option>junior college student</option><br><option>technical secondary school</option><br></select><br><br><br><input type="submit" value="Submit"><br></form>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;h4 id=&quot;无须列表&quot;&gt;&lt;a href=&quot;#无须列表&quot; class=&quot;headerlink&quot; title=&quot;无须列表&quot;&gt;&lt;/a&gt;无须列表&lt;/h4&gt;&lt;p&gt;无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记。&lt;br&gt;无序列表始于&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;标签。每个列表项始于&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="html" scheme="https://rosinelan.github.io/tags/html/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="表格" scheme="https://rosinelan.github.io/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>saltstack结合ansible实战</title>
    <link href="https://rosinelan.github.io/2018/07/11/saltstack%E7%BB%93%E5%90%88ansible%E5%AE%9E%E6%88%98/"/>
    <id>https://rosinelan.github.io/2018/07/11/saltstack结合ansible实战/</id>
    <published>2018-07-11T10:21:04.000Z</published>
    <updated>2018-07-11T11:18:12.044Z</updated>
    
    <content type="html"><![CDATA[<p>通过<code>saltstack</code>模块调用，结合<code>ansible</code>实现2台服务器之间免密钥登录，同时安装<code>minion</code>端。<br>适用场景：已存在安装<code>saltstack</code>的<code>master</code>端，新上线服务器，需安装<code>minion</code>端加入至<code>master</code>。<br><a id="more"></a><br>在master端事先生成密钥对，写好免密钥登录和安装<code>minion</code>端脚本。脚本统一放在<code>/srv/salt/_shell</code>。  </p><ol><li>免密钥配置脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /srv/salt/_shell/installpub.sh   </span><br><span class="line"><span class="built_in">cd</span> /root/</span><br><span class="line"><span class="built_in">umask</span> 077</span><br><span class="line"><span class="built_in">test</span> -d .ssh || mkdir .ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'xxxx'</span> &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ol><p>注意此处<code>.ssh</code>目录权限为700，<code>authorized_keys</code>文件权限为600或700。</p><ol><li><p>安装配置minion端脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /srv/salt/_shell/minionid.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum install -y salt-minion</span><br><span class="line"><span class="comment">#ip=`ifconfig | grep -w 'inet' |grep -v grep |awk ` #根据不同版本centos获取方式不一样</span></span><br><span class="line">ip=ifconfig eth0|grep inet|awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">sed -i <span class="string">'s/^#master:salt/master: 19.168.145.130/'</span> /etc/salt/minion</span><br><span class="line">sed -i <span class="string">'s/^#id:.*/id: $ip/'</span> /etc/salt/minion</span><br></pre></td></tr></table></figure></li><li><p>客户端代码<br><code>saltapi.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaltServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.token = self.getToken()</span><br><span class="line">        print(self.token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        url =  <span class="string">"http://192.168.48.137:8000/login"</span></span><br><span class="line">        headers = &#123;<span class="string">"Accept"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"eauth"</span>: <span class="string">"pam"</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = self.session.post(url=url, headers=headers, data=data)</span><br><span class="line">        text = res.text</span><br><span class="line">        result = json.loads(text)</span><br><span class="line">        token = result.get(<span class="string">"return"</span>)[<span class="number">0</span>].get(<span class="string">"token"</span>)</span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runModules</span><span class="params">(self, minionid, fun, arg=None)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.48.137:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"local"</span>,</span><br><span class="line">            <span class="string">"tgt"</span>: minionid,</span><br><span class="line">            <span class="string">"fun"</span>: fun,</span><br><span class="line">            <span class="string">"arg"</span>: arg</span><br><span class="line">        &#125;</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url,  data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"success"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"failed"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runRunner</span><span class="params">(self, fun, **kwargs)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.48.137:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"runner"</span>,</span><br><span class="line">            <span class="string">"fun"</span>: fun,</span><br><span class="line">        &#125;</span><br><span class="line">        data.update(kwargs)</span><br><span class="line">        print(data)</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url,  data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"success"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"failed"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br></pre></td></tr></table></figure></li><li><p>位于<code>master</code>端，位置为<code>/srv/salt/__runner/masterApp.py</code>，提供具体执行方法<br><code>masterApp.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publicKey</span><span class="params">(ipaddr)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'/tmp/&#123;0&#125;.txt'</span>.format(ipaddr), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"&#123;0&#125; ansible_ssh_pass=123456"</span>.format(ipaddr))</span><br><span class="line">    resultBean = dict()</span><br><span class="line">    cmd = <span class="string">"ansible -i /tmp/&#123;0&#125;.txt all -m script -a '/srv/salt/_shell/installpub.sh'"</span>.format(ipaddr)</span><br><span class="line">    status, output = commands.getstatusoutput(cmd)</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">        resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">        resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">        resultBean[<span class="string">'data'</span>] = output</span><br><span class="line">        <span class="keyword">return</span> json.dumps(resultBean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">installMinionid</span><span class="params">(ipaddr)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'/tmp/&#123;0&#125;.txt'</span>.format(ipaddr), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"&#123;0&#125; ansible_ssh_pass=123456"</span>.format(ipaddr))</span><br><span class="line">    resultBean = dict()</span><br><span class="line">    cmd = <span class="string">"ansible -i /tmp/&#123;0&#125;.txt all -m script -a '/srv/salt/_shell/minionid.sh'"</span>.format(ipaddr)</span><br><span class="line">    status, output = commands.getstatusoutput(cmd)</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">        resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">        resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">        resultBean[<span class="string">'data'</span>] = output</span><br><span class="line">        <span class="keyword">return</span> json.dumps(resultBean)</span><br></pre></td></tr></table></figure></li></ol><p>最后在客户端调用测试<br><code>test.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> saltstack_api.util.saltapi <span class="keyword">import</span> SaltServer</span><br><span class="line"></span><br><span class="line">saltServer = SaltServer()</span><br><span class="line">result1 = saltServer.runRunner(<span class="string">'masterApp.publicKey'</span>, ipaddr=<span class="string">'192.168.48.133'</span>)</span><br><span class="line">print(result1)</span><br><span class="line">result2 = saltServer.runRunner(<span class="string">'masterApp.installMinionid'</span>, ipaddr=<span class="string">'192.168.48.133'</span>)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过&lt;code&gt;saltstack&lt;/code&gt;模块调用，结合&lt;code&gt;ansible&lt;/code&gt;实现2台服务器之间免密钥登录，同时安装&lt;code&gt;minion&lt;/code&gt;端。&lt;br&gt;适用场景：已存在安装&lt;code&gt;saltstack&lt;/code&gt;的&lt;code&gt;master&lt;/code&gt;端，新上线服务器，需安装&lt;code&gt;minion&lt;/code&gt;端加入至&lt;code&gt;master&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="ansible" scheme="https://rosinelan.github.io/tags/ansible/"/>
    
      <category term="saltstack" scheme="https://rosinelan.github.io/tags/saltstack/"/>
    
      <category term="minion" scheme="https://rosinelan.github.io/tags/minion/"/>
    
  </entry>
  
  <entry>
    <title>html基础</title>
    <link href="https://rosinelan.github.io/2018/07/11/html%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/11/html基础/</id>
    <published>2018-07-11T10:20:28.000Z</published>
    <updated>2018-07-11T11:18:01.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h3><p>HTML 是用来描述网页的一种语言。<br>HTML 指的是超文本标记语言 (Hyper Text Markup Language)。<br>HTML 不是一种编程语言，而是一种标记语言 (markup language)，标记语言是一套标记标签 (markup tag)。<br><a id="more"></a><br>HTML 使用标记标签来描述网页。  </p><ul><li>HTML 标签<br>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。<br>HTML 标签是由尖括号包围的关键词，比如 <html>。<br>HTML 标签通常是成对出现的，比如 <b> 和 </b>。<br>标签对中的第一个标签是开始标签，第二个标签是结束标签。开始和结束标签也被称为开放标签和闭合标签。  </html></li><li>HTML文档<br>HTML 文档描述网页。<br>HTML 文档包含 HTML 标签和纯文本。<br>HTML 文档也被称为网页。<br>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。  </li><li>常用的HTML编辑器<br>notepad<br>editplus<br>sublimit<br>webstrom  </li><li>HTML注释<br><code>&lt;!--此处写注释--&gt;</code><h3 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h3></li><li><p>标题  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>段落  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加粗  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>回车  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字体<br><code>&lt;font&gt;</code>规定文本的字体，尺寸，颜色。<br>size: 12,13<br>color：red, blue, green, yellow,orange<br>face:   黑体,宋体，微软黑体  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">"字体大小"</span> <span class="attr">color</span> = <span class="string">"字体颜色"</span> <span class="attr">face</span> = <span class="string">"字体类型"</span>&gt;</span>要设置的文字 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>行内在一行显示,段落里面可以用过多个标签。<br>span在样式中的时候才能现实其作用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>行内<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>行内<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>超链接  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"链接地址"</span> <span class="attr">target</span> = <span class="string">"_blank"</span>&gt;</span>连接标志<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>a标签支持http协议。<br>标签target属性规定在何处打开链接文档。<br>target =”_self”  默认是连接到本页；_blank 浏览器总在一个新打开，未命名的窗口中载入目标文档。  </p><p>链接到本页面  </p><ol><li>首先创建一个锚链接的锚记点：<code>&lt;a  href=“#锚记点名称”&gt;主题名称&lt;/a&gt;</code></li><li>然后在具体要链接到的地方设置name:<code>&lt;a  name=“锚记点名称”&gt;&lt;/a&gt;</code>（锚记点前面要加上#号）  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id = "xiang"</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"#xiang"</span>&gt;</span>连接到本页的锚记点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>图像<br>图像标签（<code>&lt;img&gt;</code>）和源属性（Src）。<br>在 HTML 中，图像由<code>&lt;img&gt;</code> 标签定义。<code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。<br>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。<br>alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。<br>src  = “url”  图片地址或者本地路径<br>alt =  “美女”  当图片不显示时，显示的字<br>height = “400” 高<br>width = “400”  宽  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">"image/mv1.jpg"</span> <span class="attr">alt</span> = <span class="string">"美女"</span> <span class="attr">height</span> = <span class="string">"1000"</span> <span class="attr">width</span> = <span class="string">"400"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>特殊字符  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">空格：  &amp;nbsp;</span><br><span class="line">大于号： &amp;gt;</span><br><span class="line">小于号： &amp;lt;</span><br><span class="line">引号： &amp;quot;</span><br><span class="line">&amp;符号：&amp;amp;</span><br><span class="line">版本号： &amp;copy;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML简介&quot;&gt;&lt;a href=&quot;#HTML简介&quot; class=&quot;headerlink&quot; title=&quot;HTML简介&quot;&gt;&lt;/a&gt;HTML简介&lt;/h3&gt;&lt;p&gt;HTML 是用来描述网页的一种语言。&lt;br&gt;HTML 指的是超文本标记语言 (Hyper Text Markup Language)。&lt;br&gt;HTML 不是一种编程语言，而是一种标记语言 (markup language)，标记语言是一套标记标签 (markup tag)。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="html" scheme="https://rosinelan.github.io/tags/html/"/>
    
      <category term="css" scheme="https://rosinelan.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ansible</title>
    <link href="https://rosinelan.github.io/2018/07/06/ansible/"/>
    <id>https://rosinelan.github.io/2018/07/06/ansible/</id>
    <published>2018-07-06T02:57:00.000Z</published>
    <updated>2018-07-06T15:48:17.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ansible是自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。github地址为<a href="https://github.com/ansible/ansible" target="_blank" rel="noopener">https://github.com/ansible/ansible</a>。<br><a id="more"></a><br>ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。  </p><h4 id="框架组成部分"><a href="#框架组成部分" class="headerlink" title="框架组成部分"></a>框架组成部分</h4><p>ansible框架主要包括：  </p><ol><li>连接插件connection plugins：负责和被监控端实现通信；</li><li>host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；</li><li>各种模块核心模块、command模块、自定义模块；</li><li>借助于插件完成记录日志邮件等功能；</li><li>playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4></li><li>no agents：不需要在被管控主机上安装任何客户端；</li><li>no server：无服务器端，使用时直接运行命令即可；</li><li>modules in any languages：基于模块工作，可使用任意语言开发模块；</li><li>yaml，not code：使用yaml语言定制剧本playbook；</li><li>ssh by default：基于SSH工作；</li><li>strong multi-tier solution：可实现多级指挥。<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4></li><li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li><li>批量任务执行可以写成脚本，而且不用分发到远程就可以执行；</li><li>使用python编写，维护更简单，ruby语法过于复杂；</li><li>支持sudo。<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3>ansible安装比较简单，配置<code>epel</code>源，然后直接通过<code>yum</code>即可安装。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure></li></ol><p>当然，也可以通过<code>pip</code>方式安装，<code>pip install ansible</code>。<br>需要注意的是此时的安装的<code>ansible</code>文件位于<code>/usr/local/python/bin</code>目录下。  </p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="ansible-cfg文件"><a href="#ansible-cfg文件" class="headerlink" title="ansible.cfg文件"></a>ansible.cfg文件</h4><p>ansible读取配置文件的顺序如下  </p><ol><li>ansible.cfg(位于当前位置)</li><li>ANSIBLE_CONFIG          一个环境变量</li><li>.ansible.cfg                    位于家目录下</li><li>/etc/ansible/ansible.cfg  </li></ol><p>一般情况下使用配置文件为<code>/etc/ansible/ansible.cfg</code>。<br>配置文件中主要参数如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inventory = /etc/ansible/hosts <span class="comment">#指定inventory配置文件</span></span><br><span class="line">forks = 5 <span class="comment">#子进程数量，推荐设置为cpu核心数</span></span><br><span class="line">sudo_user = root <span class="comment">#sudo用户</span></span><br><span class="line">remote_port = 22 <span class="comment">#远程端口</span></span><br></pre></td></tr></table></figure></p><h4 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h4><p>ansible默认配置文件路径为<code>/etc/ansible/hosts</code>，也可以自定义配置文件路径。  </p><ol><li>常用配置如下<br>中括号nginx代表nginx主机组，nginx_127、nginx_219代表主机，属于nginx主机组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">nginx_127 ansible_ssh_port=22   ansible_ssh_host=127.0.0.1 ansible_ssh_pass=&apos;password&apos;</span><br><span class="line">nginx_219 ansible_ssh_port=22   ansible_ssh_host=192.168.145.219 ansible_ssh_pass=&apos;password&apos;</span><br></pre></td></tr></table></figure></li></ol><p>注意：需要安装sshpass这个软件才能使用密码去操作服务器,安装方式<code>yum install -y sshpass</code>。  </p><ol><li>简化配置<br>如果使用密钥实现了无密码登录，可以使用下面简化配置  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">nginx_127 ansible_ssh_port=22   ansible_ssh_host=127.0.0.1</span><br><span class="line">nginx_219 ansible_ssh_port=22   ansible_ssh_host=192.168.145.219</span><br></pre></td></tr></table></figure></li></ol><p>或者使用更简单的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">127.0.0.1</span><br><span class="line">192.168.145.219</span><br></pre></td></tr></table></figure></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>ansible使用比较简单，其中-i可以指定配置文件的路径，不指定默认为/etc/ansible/hosts。<br>ansible -i /etc/ansible/hosts 指定主机组或者主机 -m 指定模块 -a 指定模块的参数</p><h4 id="ping模块"><a href="#ping模块" class="headerlink" title="ping模块"></a>ping模块</h4><p>ping模块用来查看服务器是否连接正常，ping模块不需要-a指定参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure></p><p>主机和主机组注意事项：<br>all     代表所有主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible -i /etc/ansible/hosts 192.168.145.219:127.0.0.1 -m ping <span class="comment">#自己指定多台主机去操作</span></span><br><span class="line">ansible -i /etc/ansible/hosts all:\!127.0.0.1 -m ping  <span class="comment">#不操作127.0.0.1的主机,!需要转义</span></span><br></pre></td></tr></table></figure></p><h4 id="command模块"><a href="#command模块" class="headerlink" title="command模块"></a>command模块</h4><p>command模块不支持使用管道，不建议使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m command -a <span class="string">"pwd"</span></span><br><span class="line">ansible all -m command -a <span class="string">"df -h|grep sda1"</span></span><br><span class="line">ansible all -m command -a <span class="string">"df -h &gt;&gt;/tmp/xiaohuihu"</span></span><br></pre></td></tr></table></figure></p><h4 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h4><p>shell模块支持管道<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m shell -a <span class="string">"df -h|grep sda1"</span>    <span class="comment">#支持管道</span></span><br><span class="line">ansible all -m shell -a <span class="string">"df -h &gt;&gt;/tmp/xiaohuihui"</span>   <span class="comment">#支持重定向</span></span><br><span class="line">ansible all -m shell -a <span class="string">"cat /etc/passwd|awk -F':' '&#123;print \$1&#125;'"</span> <span class="comment">#得进行转义</span></span><br></pre></td></tr></table></figure></p><h4 id="raw模块"><a href="#raw模块" class="headerlink" title="raw模块"></a>raw模块</h4><p>raw模块使用原始的ssh方式运行命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m raw -a <span class="string">"yum install python-simplejson -y"</span></span><br><span class="line">ansible all -m raw -a <span class="string">"yum install libselinux-python -y"</span></span><br></pre></td></tr></table></figure></p><h4 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h4><p>copy模块使用格式为<code>ansible 主机组 -m copy -a &#39;&#39;</code><br>可用参数如下  </p><ul><li>src: 指定源文件或目录</li><li>dest: 指定目标服务器的文件或目录</li><li>backup: 是否要备份</li><li>owner: 拷贝到目标服务器后，文件或目录的所属用户</li><li>group: 拷贝到目标服务器后，文件或目录的所属群组</li><li>mode: 文件或目录的权限</li></ul><p>下发文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a <span class="string">"src=/tmp/xiaohuihui/xiaohuihui.txt dest=/usr/local/src/"</span></span><br></pre></td></tr></table></figure></p><p>下发文件夹<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a <span class="string">"src=/tmp/xiaohuihui/ dest=/usr/local/src/"</span> <span class="comment">#xiaohuihui目录不会拷贝</span></span><br><span class="line">ansible all -m copy -a <span class="string">"src=/tmp/xiaohuihui dest=/usr/local/src/"</span>  <span class="comment">#xiaohuihui目录会拷贝</span></span><br></pre></td></tr></table></figure></p><p>自动备份，备份文件位于<code>dest</code>目录下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a <span class="string">"src=/tmp/xiaohuihui/xiaohuihui.txt dest=/usr/local/src/ backup=yes"</span></span><br></pre></td></tr></table></figure></p><p>控制所属的用户和指定权限<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a <span class="string">"src=/tmp/xiaohuihui/xiaohuihui.txt dest=/usr/local/src/ backup=yes owner=oracle group=oinstall mode=0640"</span></span><br></pre></td></tr></table></figure></p><h4 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h4><p>script模块能够实现远程服务器批量运行本地的shell脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m script -a <span class="string">"/usr/local/src/script"</span></span><br></pre></td></tr></table></figure></p><p>相当于<code>scp+shell</code>命令的组合。<br>当然，ansible还包括其他一些模块，更多的可以通过帮助问题查看。<br>使用方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/python/bin/ansible-doc -l    <span class="comment">#查看总帮助</span></span><br><span class="line">/usr/local/python/bin/ansible-doc -s shell  <span class="comment">#查看shell模块的帮助</span></span><br><span class="line">/usr/local/python/bin/ansible-doc -s raw</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;ansible是自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。github地址为&lt;a href=&quot;https://github.com/ansible/ansible&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ansible/ansible&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="ansible" scheme="https://rosinelan.github.io/tags/ansible/"/>
    
      <category term="ping" scheme="https://rosinelan.github.io/tags/ping/"/>
    
      <category term="shell" scheme="https://rosinelan.github.io/tags/shell/"/>
    
      <category term="copy" scheme="https://rosinelan.github.io/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>saltstack实例</title>
    <link href="https://rosinelan.github.io/2018/07/04/saltstack%E5%AE%9E%E4%BE%8B/"/>
    <id>https://rosinelan.github.io/2018/07/04/saltstack实例/</id>
    <published>2018-07-04T09:16:43.000Z</published>
    <updated>2018-07-06T02:57:50.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="saltstack实例"><a href="#saltstack实例" class="headerlink" title="saltstack实例"></a>saltstack实例</h3><p>实现功能：通过http调用模块和runner。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaltServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.token = self.gettoken()</span><br><span class="line">        print(self.token)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gettoken</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.145.129:8000/login"</span></span><br><span class="line">        header = &#123;<span class="string">"Accept"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"eauth"</span>: <span class="string">"pam"</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = self.session.post(url=url, headers=header, data=data)</span><br><span class="line">        text = res.text</span><br><span class="line">        result = json.loads(text)</span><br><span class="line">        token = result.get(<span class="string">"return"</span>)[<span class="number">0</span>].get(<span class="string">"token"</span>)</span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runmodules</span><span class="params">(self, minionid, func, args=None)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.145.129:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"tgt"</span>: minionid,</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"local"</span>,</span><br><span class="line">            <span class="string">"fun"</span>: func,</span><br><span class="line">            <span class="string">"arg"</span>: args</span><br><span class="line">        &#125;</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url, data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">'failed'</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runrunner</span><span class="params">(self, func, args=None)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.145.129:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"runner"</span>,</span><br><span class="line">            <span class="string">"fun"</span>: func,</span><br><span class="line">            <span class="string">"arg"</span>: args</span><br><span class="line">        &#125;</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url, data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">'failed'</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br></pre></td></tr></table></figure></p><p>通过<code>test.py</code>调用查看结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> saltstack_api.util.saltapi <span class="keyword">import</span> SaltServer</span><br><span class="line"></span><br><span class="line">saltServer = SaltServer()</span><br><span class="line">data = saltServer.runmodules(<span class="string">"slave"</span>, <span class="string">"test.ping"</span>)</span><br><span class="line">print(data)</span><br><span class="line">data1 = saltServer.runrunner(<span class="string">"manage.status"</span>)</span><br><span class="line">print(data1)</span><br></pre></td></tr></table></figure></p><p>注意：需要有安装saltstack的服务器存在且服务已启用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;saltstack实例&quot;&gt;&lt;a href=&quot;#saltstack实例&quot; class=&quot;headerlink&quot; title=&quot;saltstack实例&quot;&gt;&lt;/a&gt;saltstack实例&lt;/h3&gt;&lt;p&gt;实现功能：通过http调用模块和runner。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="saltstack" scheme="https://rosinelan.github.io/tags/saltstack/"/>
    
      <category term="API" scheme="https://rosinelan.github.io/tags/API/"/>
    
      <category term="http调用" scheme="https://rosinelan.github.io/tags/http%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>saltstack(二)</title>
    <link href="https://rosinelan.github.io/2018/07/02/saltstack-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/07/02/saltstack-二/</id>
    <published>2018-07-02T07:24:35.000Z</published>
    <updated>2018-07-03T12:04:18.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="saltstack-api"><a href="#saltstack-api" class="headerlink" title="saltstack-api"></a>saltstack-api</h3><p><code>salt-api</code>使用有2种方式，一种是函数形式，也就是通过python代码直接调用已经定义好的函数，第二种是封装好的http协议，启动一个服务端直接通过http访问。<br><a id="more"></a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>yum install -y salt-api</code></p><h4 id="函数形式调用"><a href="#函数形式调用" class="headerlink" title="函数形式调用"></a>函数形式调用</h4><p>使用<code>salt &#39;*&#39; sys.list_modules</code>可以查看所有可用的模块。  </p><h5 id="加载master配置文件"><a href="#加载master配置文件" class="headerlink" title="加载master配置文件"></a>加载master配置文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  salt.config</span><br><span class="line">master_opts = salt.config.client_config(‘/etc/salt/master’)</span><br><span class="line">print(master_opts)</span><br></pre></td></tr></table></figure><h5 id="加载minion配置文件"><a href="#加载minion配置文件" class="headerlink" title="加载minion配置文件"></a>加载minion配置文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.config</span><br><span class="line">minion_opts = salt.config.minion_config(‘/etc/salt/minion’)</span><br><span class="line">print(minion_opts)</span><br></pre></td></tr></table></figure><h5 id="master执行模块"><a href="#master执行模块" class="headerlink" title="master执行模块"></a>master执行模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">client = salt.client.LocalClient()</span><br><span class="line">ret = client.cmd(<span class="string">'*'</span>, <span class="string">'test.ping'</span>)</span><br><span class="line"><span class="keyword">print</span> ret    <span class="comment">#输出结果：&#123;'slave': True&#125;</span></span><br></pre></td></tr></table></figure><p>cmd中命令格式<code>&#39;&lt;操作目标&gt;&#39;,&#39;&lt;模块&gt;&#39;,&#39;[参数]&#39;。  例：&#39;*&#39;,&#39;cmd.run&#39;,[&#39;df -h&#39;]</code><br>对于其他模块的API调用，只需要改变cmd命令即可。</p><ul><li>cmd模块<br><code>client.cmd(&#39;*&#39;, &#39;cmd.run&#39;, [&#39;free -m&#39;])</code><br>也可以一次执行多个模块或者传递多个参数<br><code>client.cmd(&#39;*&#39;, [&#39;cmd.run&#39;],[[&#39;df -h&#39;], [&#39;whoami&#39;]])</code><br><code>client.cmd(&#39;*&#39;, [&#39;test.ping&#39;, &#39;cmd.run&#39;],[[], [&#39;whoami&#39;]])</code>  </li><li>cp模块<br><code>client.cmd(&#39;*&#39;,&#39;cp.get_file&#39;,[&#39;salt://script/test.py&#39;,&#39;/minion/test.py&#39;])</code></li><li>cron模块<br><code>client.cmd(&#39;slave&#39;,&#39;cron.set_job&#39;,[&#39;root&#39;,&#39;*&#39;,&#39;*&#39;,&#39;*&#39;,&#39;*&#39;,1,&#39;/usr/local/weekly&#39;])</code></li><li>dnsutil模块<br><code>clietn.cmd(&#39;slave&#39;,&#39;dnsutil.hosts_append&#39;,[&#39;/etc/hosts&#39;,&#39;127.0.0.1&#39;,&#39;slave&#39;,&#39;slave2&#39;])</code></li><li>file模块<br><code>client.cmd(&#39;*&#39;,&#39;file.remove&#39;,[&#39;/tmp/foo&#39;])</code>  </li><li>iptables模块<br><code>client.cmd(&#39;*&#39;,&#39;iptables.append&#39;,[&#39;filter&#39;,&#39;INPUT&#39;,&#39;rule=\&#39;-p tcp --sport 80 -j ACCEPT\&#39;&#39;])</code></li><li>network模块<br><code>client.cmd(&#39;slave&#39;,&#39;network.ip_addrs&#39;)</code></li><li>pkg模块<br><code>client.cmd(&#39;*&#39;,&#39;pkg.remove&#39;,[&#39;php&#39;])</code></li><li>service模块<br><code>client.cmd(&#39;*&#39;,&#39;service.stop&#39;,[&#39;nginx&#39;])</code><h5 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h5>对于执行时间过长，没法直接返回的，可以通过异步执行的形式进行返回。<br>使用<code>cmd_async</code>和<code>get_cache_returns(jid)</code>实现。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.client</span><br><span class="line">local = salt.client.LocalClient(<span class="string">'/etc/salt/master'</span>)</span><br><span class="line">jid = local.cmd_async(<span class="string">'*'</span>, <span class="string">'network.ip_addrs'</span>)</span><br><span class="line">local.get_cache_returns(jid)    <span class="comment">#输出结果：&#123;'slave': &#123;'ret': ['192.168.145.130']&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="minion端执行salt命令"><a href="#minion端执行salt命令" class="headerlink" title="minion端执行salt命令"></a>minion端执行salt命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import salt.client</span><br><span class="line">caller = salt.client.Caller()</span><br><span class="line">caller.cmd(&apos;test.ping&apos;)</span><br></pre></td></tr></table></figure><p>其执行类似于sal-call，可以在minion端执行命令。  </p><h5 id="salt-runner使用"><a href="#salt-runner使用" class="headerlink" title="salt.runner使用"></a>salt.runner使用</h5><p>在master端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.runner</span><br><span class="line"><span class="keyword">import</span> salt.config</span><br><span class="line">__opts__ = salt.config.client_config(<span class="string">'/etc/salt/master'</span>)</span><br><span class="line">runnermaster = salt.runner.RunnerClient(__opts__)</span><br><span class="line">runnermaster.cmd(<span class="string">'manage.status'</span>)</span><br></pre></td></tr></table></figure></p><h5 id="grains"><a href="#grains" class="headerlink" title="grains"></a>grains</h5><p>在master端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> salt.config</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> salt.loader</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__opts__ = salt.config.minion_config(<span class="string">"/etc/salt/minion"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__grains__ = salt.loader.grains(__opts__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__grains__[<span class="string">'id'</span>]</span><br><span class="line"><span class="string">'master'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__grains__[<span class="string">'server_id'</span>]</span><br><span class="line"><span class="number">685245236</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> salt.config</span><br><span class="line"><span class="keyword">import</span> salt.loader</span><br><span class="line"></span><br><span class="line">__opts__ = salt.config.minion_config(<span class="string">'/etc/salt/minion'</span>)</span><br><span class="line">__grains__ = salt.loader.grains(__opts__)</span><br><span class="line">__opts__[<span class="string">'grains'</span>] = __grains__</span><br><span class="line">__utils__ = salt.loader.utils(__opts__)</span><br><span class="line">__salt__ = salt.loader.minion_mods(__opts__, utils=__utils__)  <span class="comment">#交互模式无法使用，原因见下面</span></span><br><span class="line">__salt__[<span class="string">'test.ping'</span>]()</span><br></pre></td></tr></table></figure><h5 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h5><p>在python交互环境中，下面这些内置变量是不生效，只要在自定义的模块中使用才生效。<br><code>__opts__</code>  配置文件<br><code>__salt__</code>  执行modules<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__salt__[<span class="string">'cmd.run'</span>](<span class="string">'fdisk -l'</span>)        <span class="comment">##__salt__[模块](参数)</span></span><br><span class="line">__salt__[<span class="string">'network.ip_addrs'</span>]()</span><br></pre></td></tr></table></figure></p><p>说明：<strong>salt</strong>是个字典，它里面装了minion上所有的modules，<strong>salt</strong>的key是一个个的模块名称，value则是模块里面的一个个函数<br><code>__pillar__</code> pillar<br><code>__grains__</code> grains<br><code>__context__</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'cp.fileclient'</span> <span class="keyword">in</span> __context__:</span><br><span class="line">    __context__[<span class="string">'cp.fileclient'</span>] = salt.fileclient.get_file_client(__opts__)</span><br></pre></td></tr></table></figure></p><h4 id="http-api"><a href="#http-api" class="headerlink" title="http api"></a>http api</h4><p>salt-api使用cherrypy框架和salt接口实现的。  </p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p><code>yum -y install salt-api</code></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>创建用于salt-api的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin/ saltapi</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"saltapi"</span> | passwd saltapi --stdin</span><br></pre></td></tr></table></figure></p><p>master配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/salt/master +12</span><br><span class="line">default_include: master.d/*.conf  <span class="comment">#注释取消</span></span><br></pre></td></tr></table></figure></p><p>创建配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/salt/master.d/</span><br><span class="line">touch api.conf eauth.conf</span><br></pre></td></tr></table></figure></p><p>更新配置文件内容<br>cat /etc/salt/master.d/api.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rest_cherrypy:</span><br><span class="line">  port: 8000</span><br><span class="line">  disable_ssl: True</span><br><span class="line">  <span class="comment">#ssl_crt: /etc/salt/keycrt/cert.pem</span></span><br><span class="line">  <span class="comment">#ssl_key: /etc/salt/keycrt/key.pem</span></span><br></pre></td></tr></table></figure></p><p>cat /etc/salt/master.d/eauth.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">external_auth:</span><br><span class="line">  pam:</span><br><span class="line">    saltapi:    <span class="comment">#此处为前面创建的用户</span></span><br><span class="line">      - .*</span><br><span class="line">      - <span class="string">'@wheel'</span></span><br><span class="line">      - <span class="string">'@runner'</span></span><br></pre></td></tr></table></figure></p><p>启动salt-api<br><code>systemctl start salt-api</code><br>启动之后可以看到8000端口已经在监听状态，且salt-api服务已启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master master.d]<span class="comment"># netstat -lntp|grep 8000</span></span><br><span class="line">tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      24008/python        </span><br><span class="line">[root@master master.d]<span class="comment"># ps aux|grep salt-api</span></span><br><span class="line">root      23998  0.0  2.8 295044 28012 ?        Ss   19:22   0:00 /usr/bin/python /usr/bin/salt-api</span><br><span class="line">root      24008  0.3  3.1 1673212 31092 ?       Sl   19:22   0:01 /usr/bin/python /usr/bin/salt-api</span><br><span class="line">root      24231  0.0  0.0 112664   972 pts/0    R+   19:28   0:00 grep --color=auto salt-api</span><br></pre></td></tr></table></figure></p><p>上面配置文件使用的是http协议，若要使用https协议，则需要生成证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/salt</span><br><span class="line">mkdir keycrt</span><br><span class="line"><span class="built_in">cd</span> keycrt</span><br><span class="line">openssl genrsa –out key.pem 4096</span><br><span class="line">openssl req –new –x 509 –key key.pem –out cert.pem –days 1826</span><br></pre></td></tr></table></figure></p><p>同时更新<code>/etc/salt/master.d/api.conf</code>内容即可。<br>cat /etc/salt/master.d/api.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rest_cherrypy:</span><br><span class="line">  port: 8000</span><br><span class="line">  <span class="comment">#disable_ssl: True</span></span><br><span class="line">  ssl_crt: /etc/salt/keycrt/cert.pem</span><br><span class="line">  ssl_key: /etc/salt/keycrt/key.pem</span><br></pre></td></tr></table></figure></p><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><p>登录，获取token<br>说明：saltapi重启token会发生变化，不重启则不会变化。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -k http://192.168.145.129:8000/login -H <span class="string">"Accept: application/x-yaml"</span>  -d username=<span class="string">'saltapi'</span>  -d password=<span class="string">'saltapi'</span> -d eauth=<span class="string">'pam'</span></span><br></pre></td></tr></table></figure></p><p>执行结果如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>:</span><br><span class="line">- eauth: pam</span><br><span class="line">  expire: <span class="number">1530662531.464414</span></span><br><span class="line">  perms:</span><br><span class="line">  - .*</span><br><span class="line">  - <span class="string">'@wheel'</span></span><br><span class="line">  - <span class="string">'@runner'</span></span><br><span class="line">  start: <span class="number">1530619331.464413</span></span><br><span class="line">  token: <span class="number">25</span>a29f8fd30c611f399370ab1be8a0b4f83d1e06</span><br><span class="line">  user: saltapi</span><br></pre></td></tr></table></figure></p><p>使用获取的token查询硬盘使用情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -k http://192.168.145.129:8000 \</span><br><span class="line">        -H <span class="string">"Accept: application/x-yaml"</span> \</span><br><span class="line">        -H <span class="string">"X-Auth-Token: 25a29f8fd30c611f399370ab1be8a0b4f83d1e06"</span> \</span><br><span class="line">        -d client=<span class="built_in">local</span> \</span><br><span class="line">        -d tgt=<span class="string">'*'</span> \</span><br><span class="line">        -d fun=<span class="string">'status.diskusage'</span></span><br></pre></td></tr></table></figure></p><p>模块调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -k http://192.168.145.129:8000 \</span><br><span class="line">        -H <span class="string">"Accept: application/x-yaml"</span> \</span><br><span class="line">        -H <span class="string">"X-Auth-Token: 25a29f8fd30c611f399370ab1be8a0b4f83d1e06"</span> \</span><br><span class="line">        -d client=<span class="built_in">local</span> \</span><br><span class="line">        -d tgt=<span class="string">'*'</span> \</span><br><span class="line">        -d fun=<span class="string">'cmd.run'</span> \</span><br><span class="line">        -d arg=<span class="string">"free -m"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;saltstack-api&quot;&gt;&lt;a href=&quot;#saltstack-api&quot; class=&quot;headerlink&quot; title=&quot;saltstack-api&quot;&gt;&lt;/a&gt;saltstack-api&lt;/h3&gt;&lt;p&gt;&lt;code&gt;salt-api&lt;/code&gt;使用有2种方式，一种是函数形式，也就是通过python代码直接调用已经定义好的函数，第二种是封装好的http协议，启动一个服务端直接通过http访问。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="saltstack" scheme="https://rosinelan.github.io/tags/saltstack/"/>
    
      <category term="API" scheme="https://rosinelan.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>saltstack</title>
    <link href="https://rosinelan.github.io/2018/06/27/saltstack/"/>
    <id>https://rosinelan.github.io/2018/06/27/saltstack/</id>
    <published>2018-06-27T02:00:09.000Z</published>
    <updated>2018-07-03T08:41:54.568Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>saltstack是一个新的基础平台管理工具，只需要花费几分钟即可运行起来，可以支撑管理上万台服务器的规模，数秒钟即可完成数据的传递。<br><a id="more"></a><br>saltstack能够维护预定义状态的远程节点，也可以在远程节点执行命令和查询数据；开发的目的是为远程执行提供孔的解决方案，并使远程执行变得更好、更快、更简单。<br>saltstack使用python开发，同时也支持restAPI，方便二次开发以及和其它普通集成，同时官方也发布了一个web管理界面halite。  </p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol><li>速度快，saltstack使用消息队列zeroMQ传输数据，比ansible快大约40倍。  </li><li>C/S架构，执行信息比较稳定，不同意丢失信息或出现主机失联的情况。  </li><li>python开发，方便理解和自定义模块。  <h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4>saltstack中服务端叫做<code>master</code>，客户端叫做<code>minion</code>，都是以demon模式运行，一直监听配置文件中定义的<code>ret_port</code>(saltstack客户端与服务端通信的端口，负责接收客户端发送过来的结果，默认4506端口)和<code>publish_port</code>(saltstack的消息发布系统，默认4505端口)的端口。当minion运行时会自动连接到配置文件中定义的master地址ret_port端口进行连接认证。<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3>以<code>centos7.3.1611</code>为例，使用yum安装。也可以通过源码编译、pip、salt-bootstrap等方式安装。    <h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li></ol><h4 id="epel源配置"><a href="#epel源配置" class="headerlink" title="epel源配置"></a>epel源配置</h4><p>yum安装salstack使用epel源。<br><code>yum install epel-release</code>  </p><h4 id="安装master"><a href="#安装master" class="headerlink" title="安装master"></a>安装master</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install salt-master</span><br></pre></td></tr></table></figure><h4 id="安装minion"><a href="#安装minion" class="headerlink" title="安装minion"></a>安装minion</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install salt-minion</span><br></pre></td></tr></table></figure><p>客户端中配置master地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/salt/minion +16</span><br><span class="line">master: 192.168.145.129</span><br></pre></td></tr></table></figure></p><p>也可以使用sed命令实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s@#manster:.*@manster: 192.168.145.219@&apos; /etc/salt/minion</span><br></pre></td></tr></table></figure></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable salt-master</span><br><span class="line">systemctl start salt-master</span><br></pre></td></tr></table></figure></p><p>minion<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable salt-minion</span><br><span class="line">systemctl start salt-minion</span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>启动服务之后，客户端的/etc/salt下面产生一个<code>minion_id</code>文件(minion配置文件中id，不配置默认为主机名)同时还会产生一个pki文件，里面存放minion的公钥和私钥。<br>master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# tree -L 3 /etc/salt</span><br><span class="line">/etc/salt</span><br><span class="line">├── master</span><br><span class="line">└── pki</span><br><span class="line">    └── master</span><br><span class="line">        ├── master.pem</span><br><span class="line">        ├── master.pub</span><br><span class="line">        ├── minions</span><br><span class="line">        ├── minions_autosign</span><br><span class="line">        ├── minions_denied</span><br><span class="line">        ├── minions_pre</span><br><span class="line">        └── minions_rejected</span><br></pre></td></tr></table></figure></p><p>minion<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@slave ~]# tree -L 3 /etc/salt</span><br><span class="line">/etc/salt</span><br><span class="line">├── minion</span><br><span class="line">├── minion.d</span><br><span class="line">├── minion_id</span><br><span class="line">└── pki</span><br><span class="line">    └── minion</span><br><span class="line">        ├── minion.pem</span><br><span class="line">        └── minion.pub</span><br></pre></td></tr></table></figure></p><h4 id="master与minion认证"><a href="#master与minion认证" class="headerlink" title="master与minion认证"></a>master与minion认证</h4><p>minion在第一次启动时，会在/etc/salt/pki/minion/（该路径在/etc/salt/minion里面设置）下自动生成minion.pem（private key）和 minion.pub（public key），然后将 minion.pub发送给master。master在接收到minion的public key后，通过salt-key命令accept minion public key，这样在master的/etc/salt/pki/master/minions下的将会存放以minion id命名的 public key，然后master就能对minion发送指令了。<br>认证命令使用<code>salt-key --help</code>可以看到详细使用方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># salt-key -L  #查看当前证书签证情况</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave</span><br><span class="line">Rejected Keys:</span><br><span class="line">[root@master ~]<span class="comment"># salt-key -A -y #接受所有证书</span></span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">slave</span><br><span class="line">Key <span class="keyword">for</span> minion slave accepted.</span><br><span class="line">[root@master ~]<span class="comment"># salt-key -L</span></span><br><span class="line">Accepted Keys:</span><br><span class="line">slave</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure></p><p>其他用法<br><code>salt-key -D</code> 删除所有认证主机证书<br><code>salt-key -d id -y</code> 删除指定id的证书<br><code>salt-key -a id</code> 接受指定id的证书</p><h4 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h4><ol><li>-E， –pcre，通过正则表达式进行匹配<br><code>salt -E &#39;web(9|10)*&#39; test.ping -t 1</code></li><li>-L, –list, 主机id进行过滤<br><code>salt -L &quot;*app*&quot; cmd.run &quot;df -h&quot;</code></li><li>-G, –grain, 根据被控主机的grains信息进行过滤<br><code>salt -G &#39;role:nginx&#39; cmd.run &quot;ls /export&quot;</code></li><li>-I, –pillar， 根据被控主机的pillar信息进行过滤<br><code>salt -I &#39;myname:xiang&#39; test.ping -t 5</code></li><li>-S, –ipcidr, 根据minion的ip地址进行匹配<br><code>salt -S 192.168.1.1 test.ping</code><br><code>salt -S 192.168.1.0/24 test.ping</code><br><code>salt -S 192.168.0.0/16 test.ping</code><br><code>salt -S 192.0.0.0/8 test.ping</code></li><li>检查客户端是否挂掉<br><code>salt-run manage.status |head</code><br><code>salt-run manage.down</code><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3>master和minion配置文件分别为<code>/etc/salt/master</code>和<code>/etc/salt/minion</code>，内容基本一致，主要配置项说明。  </li></ol><ul><li>interface<br>默认是0.0.0.0(所有网络接口都可以访问)。<br>绑定本地接口<br><code>interface: 192.168.0.1</code></li><li>publish_port<br>默认4505，提供服务的端口。<br><code>publish_port: 4505</code></li><li>user<br>默认是root<br><code>user: root</code></li><li>ret_port<br>默认是4506，返回服务器使用的端口。<br>返回服务器指salt接收执行返回结果和命令执行状况的服务器。<br><code>ret_port: 4506</code>  </li><li>auto_accept<br>默认是False。设置为<code>True</code>之后master将会自动接收所有来自minion端的公钥请求。<br><code>auto_accept: False</code><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3></li><li>Runner模块<br>在master端执行<code>salt-run</code>。<br>使用案例<br>检测各minion端是否在线 <code>salt-run manage.status</code></li><li>Module模块<br>通过master同步到minion端，在minion端执行<code>salt-call saltutil.sync_modules</code>。<br><code>salt-call saltutil.sync_all</code>：包括beacons\clouds\engines\grains\log_handler\modiles\output\proxymodules\renderers\returners\sdb\states\utils。</li><li>cmd模块<br>功能：实现远程的命令行调用执行（默认具备root操作权限）<br>示例：<br><code>salt &#39;*&#39; cmd.run &quot;df -h&quot;</code></li><li>ping模块<br><code>salt &#39;*&#39; test.ping -t 5</code></li><li>cp模块<br>功能：实现远程文件、目录的复制，以及下载URL文件等操作<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_roots:  </span><br><span class="line">    base:  </span><br><span class="line">    - /export/salt/root</span><br></pre></td></tr></table></figure></li></ul><p>salt根目录：在master中file_roots定义的路径，salt://test.txt相当于/export/salt/root/test.txt<br><code>salt &#39;wms5test1.app.172.17.23.176&#39; cp.get_file salt://nscd.conf /tmp/aaa.txt</code>  </p><ul><li><p>cron模块<br>功能：实现minion端主机的crontab操作<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; cron.raw_cron root     （查看定时任务）</span><br><span class="line">salt &apos;*&apos; cron.set_job root &apos;*&apos; &apos;*&apos; &apos;*&apos; &apos;*&apos; 1 /export/scripts/rm_log.sh </span><br><span class="line">salt &apos;*&apos; cron.rm_job root /export/scripts/rm_log.sh</span><br></pre></td></tr></table></figure></li><li><p>dnsutil模块<br>功能：实现minion端主机通用的DNS操作<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; dnsutil.hosts_append /etc/hosts 127.0.0.1 aaa.com</span><br><span class="line">salt &apos;*&apos; dnsutil.hosts_remove /etc/hosts aaa.com</span><br></pre></td></tr></table></figure></li><li><p>file模块<br>功能：实现minion端主机常见的文件操作，包括文件读写、权限、查找、校验<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; file.chown /etc/passwd root root</span><br><span class="line">salt &apos;*&apos; file.copy /path/to/src /path/to/dst</span><br><span class="line">salt &apos;*&apos; file.file_exists /etc/hosts</span><br><span class="line">salt &apos;*&apos; file.directory_exists /etc/</span><br><span class="line">salt &apos;*&apos; file.get_mod /etc/passwd</span><br><span class="line">salt &apos;*&apos; file.set_mod /etc/passwd 0644</span><br><span class="line">salt &apos;*&apos; file.mkdir /tmp/test</span><br><span class="line">salt &apos;*&apos; file.sed /export/servers/nginx/conf/nginx.conf &apos;debug&apos; &apos;warn&apos;</span><br><span class="line">salt &apos;*&apos; file.append /tmp/test.txt &quot;welcome xiang&quot;</span><br><span class="line">salt &apos;*&apos; file.remove /tmp/1.txt</span><br></pre></td></tr></table></figure></li><li><p>network模块<br>功能：实现minion端主机网络信息查看<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; network.dig www.qq.com</span><br><span class="line">salt &apos;*&apos; network.ping www.qq.com</span><br><span class="line">salt &apos;*&apos; network.ip_addrs</span><br></pre></td></tr></table></figure></li><li><p>pkg包管理模块<br>功能：实现minion端主机程序包管理，如：yum等<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; pkg.install php</span><br><span class="line">salt &apos;*&apos; pkg.remove php</span><br><span class="line">salt &apos;*&apos; pkg.upgrade    （升级所有的软件包）</span><br></pre></td></tr></table></figure></li><li><p>service模块<br>功能：实现minion端主机服务管理<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salt &apos;*&apos; service.enable nginx</span><br><span class="line">salt &apos;*&apos; service.disable nginx</span><br><span class="line">salt &apos;*&apos; service.restart nginx</span><br></pre></td></tr></table></figure></li><li><p>Grains模块<br><code>Grains</code>在minion上定义的。<br>它是在minion启动时搜集一些信息，如操作系统类型，网卡，内核版本，cpu架构等。<br><code>salt &quot;*&quot; grains.ls</code>    列出所有grains项目名字<br><code>salt &quot;*app.*&quot; grains.items</code>  列出所有grains项目以及值<br>grains的信息并不是动态的，并不会实时变化，它只是在minion启动时收集到的。<br>我们可以根据grains收集到的一些信息，做一些配置管理工作<br>在minion上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/salt/grains</span><br><span class="line">role: nginx</span><br><span class="line">env: test</span><br></pre></td></tr></table></figure></li></ul><p>重启service<br><code>systemctl restart salt-minion</code><br>获取grians：<br><code>salt &quot;*&quot; grains.item role env</code><br>或者：<br><code>salt -G &quot;*&quot; role:nginx cmd.run &quot;hostname“</code><br><code>salt ‘*’grains.items</code><br>上面使用的是在minion端进行配置，但是机器多了配置起来比较麻烦。<br>下面在master端进行配置，然后分发给minion端。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mkdir /srv/salt/_grains</span><br><span class="line">cd /srv/salt/_grains/</span><br><span class="line">vi mytest.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span><span class="params">()</span>:</span></span><br><span class="line">    grains = &#123;&#125;</span><br><span class="line">    grains[<span class="string">'say'</span>] = <span class="string">'hello world'</span></span><br><span class="line">    <span class="keyword">return</span> grains</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test1</span><span class="params">()</span>:</span></span><br><span class="line">    grains = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> os.popen(<span class="string">'free -m'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        grains[<span class="string">'mem_usage'</span>] = f.read()</span><br><span class="line">    <span class="keyword">return</span> grains</span><br></pre></td></tr></table></figure></p><p>同步至客户端<br><code>salt &#39;*&#39; saltutil.sync_all</code><br>master端刷新模块<br><code>salt &#39;*&#39; sys.reload_modules</code><br>master查看客户端自定义的监控项<br><code>salt &quot;*&quot; grains.item say</code><br><code>salt &quot;*&quot; grains.item mem_usage</code></p><ul><li>Pillar模块<br>pillar 和 grains 不一样，是在 master 上定义的，并且是针对 minion 定义的一些信息。像一些比较重要的数据（密码）可以存在 pillar 里，还可以定义变量等。<br>首先我们查看master端pillars组件是否在开启状态<br>查看/etc/salt/master pillar_ops: True 就代表pillars在开启状态，否则我们手动修改。<br>新的版本默认已经开启。<br>查看minion端的pillar信息  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master minions]# salt &apos;*&apos; pillar.items</span><br><span class="line">slave:</span><br><span class="line">    ----------</span><br></pre></td></tr></table></figure></li></ul><p>master端自定义配置pillar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vi /etc/salt/master +529    // 找到如下内容，去掉#号</span><br><span class="line">pillar_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/pillar</span><br><span class="line">[root@master ~]#  mkdir /srv/pillar</span><br><span class="line">[root@master ~]# vi /srv/pillar/test.sls    // 自定义配置文件，内容如下</span><br><span class="line">conf: /etc/mum.conf</span><br><span class="line">myname: primum est</span><br><span class="line">[root@master ~]# vi /srv/pillar/top.sls    // 总入口文件，内容如下</span><br><span class="line">base:</span><br><span class="line">  &apos;client1&apos;:</span><br><span class="line">    - test</span><br></pre></td></tr></table></figure></p><p>重启master<br><code>systemctl restart salt-master</code><br>注意：当更改完 pillar 配置文件后，我们可以通过刷新 pillar 配置来获取新的 pillar 状态。<br><code>salt &#39;*&#39; saltutil.refresh_pillar</code><br>验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master pillar]# salt &apos;slave&apos; pillar.items</span><br><span class="line">slave:</span><br><span class="line">    ----------</span><br><span class="line">    conf:</span><br><span class="line">        /etc/mum.conf</span><br><span class="line">    myname:</span><br><span class="line">        primum est</span><br></pre></td></tr></table></figure></p><p>上述简单介绍了一部分模块的内容，更多更详细可以点击<a href="https://docs.saltstack.com/en/latest/contents.html" target="_blank" rel="noopener">SALTSTACK</a>查看官方文档介绍。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;saltstack是一个新的基础平台管理工具，只需要花费几分钟即可运行起来，可以支撑管理上万台服务器的规模，数秒钟即可完成数据的传递。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="master" scheme="https://rosinelan.github.io/tags/master/"/>
    
      <category term="saltstack" scheme="https://rosinelan.github.io/tags/saltstack/"/>
    
      <category term="grains" scheme="https://rosinelan.github.io/tags/grains/"/>
    
      <category term="pillar" scheme="https://rosinelan.github.io/tags/pillar/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫(三)</title>
    <link href="https://rosinelan.github.io/2018/06/25/python%E7%88%AC%E8%99%AB-%E4%B8%89/"/>
    <id>https://rosinelan.github.io/2018/06/25/python爬虫-三/</id>
    <published>2018-06-25T01:13:08.000Z</published>
    <updated>2018-06-25T14:18:53.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Beautiful Soup</code>是python的一个库，主要功能是从网页抓取数据。<br>它是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间。<br>通过使用该库，可以不编写正则就可以方便的实现网页信息的抓取。<br><a id="more"></a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="Beautiful-Soup安装"><a href="#Beautiful-Soup安装" class="headerlink" title="Beautiful Soup安装"></a>Beautiful Soup安装</h5><p><code>Beautiful Soup</code>安装很简单，直接<code>pip install beautifulsoup4</code>即可安装。  </p><h5 id="解析器安装"><a href="#解析器安装" class="headerlink" title="解析器安装"></a>解析器安装</h5><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解析器，lxml 解析器更加强大，速度更快，推荐安装。  </p><table><thead><tr><th>解析器</th><th style="text-align:left">使用方法</th><th style="text-align:left">优势</th><th style="text-align:left">劣势</th></tr></thead><tbody><tr><td>Python标准库</td><td style="text-align:left"><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td><td style="text-align:left">ython的内置标准库<br>执行速度适中<br>文档容错能力强</td><td style="text-align:left">ython 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td>lxml HTML 解析器</td><td style="text-align:left"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td style="text-align:left">速度快<br>文档容错能力强</td><td style="text-align:left">需要安装C语言库</td></tr><tr><td>lxml XML 解析器</td><td style="text-align:left"><code>BeautifulSoup(markup, [&quot;lxml&quot;, &quot;xml&quot;])</code> <code>BeautifulSoup(markup, &quot;xml&quot;)</code></td><td style="text-align:left">速度快<br>唯一支持XML的解析器</td><td style="text-align:left">需要安装C语言库</td></tr><tr><td>html5lib</td><td style="text-align:left"><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td><td style="text-align:left">最好的容错性<br>以浏览器的方式解析文档<br>生成HTML5格式的文档</td><td style="text-align:left">速度慢<br>不依赖外部扩展</td></tr></tbody></table><p>lxml安装<code>pip install lxml</code><br>html5lib安装<code>pip install html5lib</code>  </p><h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.title.name)</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.title.parent.name)</span><br><span class="line">print(soup.p)</span><br><span class="line">print(soup.p[<span class="string">"class"</span>])</span><br><span class="line">print(soup.a)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>))</span><br><span class="line">print(soup.find(id=<span class="string">'link3'</span>))</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   The Dormouse<span class="string">'s story</span></span><br><span class="line"><span class="string">  &lt;/title&gt;</span></span><br><span class="line"><span class="string"> &lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;p class="title"&gt;</span></span><br><span class="line"><span class="string">   &lt;b&gt;</span></span><br><span class="line"><span class="string">    The Dormouse'</span>s story</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="story"&gt;</span><br><span class="line">   Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">   &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">    Elsie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ,</span><br><span class="line">   &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;</span><br><span class="line">    Lacie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;</span><br><span class="line">    Tillie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ;</span><br><span class="line"><span class="keyword">and</span> they lived at the bottom of a well.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="story"&gt;</span><br><span class="line">   ...</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;</span></span><br><span class="line"><span class="string">title</span></span><br><span class="line"><span class="string">The Dormouse'</span>s story</span><br><span class="line">head</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">[<span class="string">'title'</span>]</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;</span><br><span class="line">[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><br><span class="line">&lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>注意，此处使用解析器为<code>lxml</code>，需要提前安装。<br>使用BeautifulSoup解析这段代码,能够得到一个 BeautifulSoup 的对象,并能按照标准的缩进格式的结构输出。<br>同时我们通过下面代码可以分别获取所有的链接，以及文字内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">    print(link.get(<span class="string">'href'</span>))</span><br><span class="line"></span><br><span class="line">print(soup.get_text())</span><br></pre></td></tr></table></figure></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>标签选择器<br>在上面的代码中有<code>soup.title</code> <code>soup.head</code> <code>soup.p</code>。<br>通过<code>soup.标签名</code>可以得到标签的内容。当文旦中有多个这样的标签，返回第一个标签的内容。  </li><li>获取名称<br>通过<code>soup.title.name</code>可以得到title标签的名称。  </li><li>获取属性<br>获取p标签的name属性方式<br><code>soup.p.attrs[&#39;name&#39;]</code><br><code>soup.p[&#39;name&#39;]</code>  </li><li>获取内容<br><code>soup.p.string</code>可以得到第一个p标签的内容。  </li><li>嵌套选择<br><code>soup.head.title.string</code>  </li><li><p>子节点和子孙节点<br><strong>contents</strong><br><code>soup.p.contents</code> 将p标签下的所有子标签存到一个列表中<br><strong>children</strong><br><code>soup.p.children</code> 将p标签下的所有子标签放到一个可迭代对象<br>此处content和children得到的结果相同，只是一个为列表，一个是可迭代对象，需要通过循环读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i,child)</span><br></pre></td></tr></table></figure></li><li><p>父节点<br><code>soup.a.parent</code> 获取父节点信息<br>通过list(enumerate(soup.a.parents))可以获取祖先节点，这个方法返回的结果是一个列表，会分别将a标签的父节点的信息存放到列表中，以及父节点的父节点也放到列表中，并且最后还会讲整个文档放到列表中，所有列表的最后一个元素以及倒数第二个元素都是存的整个文档的信息  </p><h4 id="标准选择器"><a href="#标准选择器" class="headerlink" title="标准选择器"></a>标准选择器</h4></li><li>fina_all<br>find_all(name,attrs,recursive,text,<strong>kwargs)<br>可以根据标签名，属性，内容查找文档</strong>name<strong><br><code>soup.find_all(&#39;ul&#39;)</code> 返回列表</strong>attrs**<br>attrs可以传入字典的方式来查找标签，但是这里有个特殊的就是class,因为class在python中是特殊的字段，所以如果想要查找class相关的可以更改attrs={‘class_’:’element’}或者soup.find_all(‘’,{“class”:”element})，特殊的标签属性可以不写attrs，例如id  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'list-1'</span>&#125;)</span><br><span class="line">soup.find_all(attrs=&#123;<span class="string">'name'</span>: <span class="string">'elements'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>text</strong><br><code>soup.find_all(text=&#39;Foo&#39;)</code><br>结果返回的是列表形式的查到的所有的text=’Foo’的文本  </p><ul><li>find<br>find(name,attrs,recursive,text,**kwargs)<br>find返回的匹配结果的第一个元素<br>还有其他一些方法<br>find_parents()返回所有祖先节点，find_parent()返回直接父节点<br>find_next_siblings()返回后面所有兄弟节点，find_next_sibling()返回后面第一个兄弟节点<br>find_previous_siblings()返回前面所有兄弟节点，find_previous_sibling()返回前面第一个兄弟节点<br>find_all_next()返回节点后所有符合条件的节点, find_next()返回第一个符合条件的节点<br>find_all_previous()返回节点后所有符合条件的节点, find_previous()返回第一个符合条件的节点  <h4 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h4>通过select()直接传入CSS选择器就可以完成选择<br><code>.</code>表示class<br><code>#</code>表示id<br><code>标签1，标签2</code>找到所有的标签1和标签2<br><code>标签1 标签2</code> 找到标签1内部的所有的标签2<br><code>[atrr=value]</code> 找到具有某个属性的所有标签  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">'.panel .panel-heading'</span>)</span><br><span class="line">soup.select(<span class="string">'ul li'</span>)</span><br><span class="line">soup.select(<span class="string">'#list-2 .element'</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>获取内容</strong><br>通过<code>get_text()</code>获取文本内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">'li'</span>):</span><br><span class="line">    print(li.get_text())</span><br></pre></td></tr></table></figure></p><p><strong>获取属性</strong><br>通过[属性名]或者attrs[属性名]获取属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul[<span class="string">'id'</span>])</span><br><span class="line">    print(ul.attrs[<span class="string">'id'</span>])</span><br></pre></td></tr></table></figure></p><p>更多关于<code>Beautiful Soup</code>内容可以点击<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a>查看官方文档介绍。<br>点击<a href="https://cuiqingcai.com/1319.html" target="_blank" rel="noopener">Python爬虫利器二之Beautiful Soup的用法</a>查看更多总结。<br>点击<a href="http://www.cnblogs.com/zhaof/" target="_blank" rel="noopener"> python修行路</a>查看更多内容。  </p><h3 id="webdriver"><a href="#webdriver" class="headerlink" title="webdriver"></a>webdriver</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Selenium 是自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，那么便可以方便地实现Web界面的测试。换句话说叫 Selenium 支持这些浏览器驱动。<br>Selenium 2，又名 WebDriver，它的主要新功能是集成了 Selenium 1.0 以及 WebDriver（WebDriver 曾经是 Selenium 的竞争对手）。也就是说 Selenium 2 是 Selenium 和 WebDriver 两个项目的合并，即 Selenium 2 兼容 Selenium，它既支持 Selenium API 也支持 WebDriver API。  </p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>pip install selenium</code>  </p><p>还需要安装驱动，根据不同浏览器需要选择不同的驱动，下面地址是chrome驱动。<br>链接：<a href="https://pan.baidu.com/s/1qZ2LfmW" target="_blank" rel="noopener">https://pan.baidu.com/s/1qZ2LfmW</a> 密码：qixa<br>下载以后，并把chromdriver放在chrome.exe同级目录下面，我的windows下面地址为<code>C:\Program Files (x86)\Google\Chrome\Application</code>。<br>也可以将对应地址添加在环境变量中。<br>下面代码实现了在chrome中打开百度首页，然后自动关闭的功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chromedriver = <span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line">browser = webdriver.Chrome(chromedriver)</span><br><span class="line">url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">browser.get(url=url)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h4 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h4><h5 id="单个元素查找"><a href="#单个元素查找" class="headerlink" title="单个元素查找"></a>单个元素查找</h5><p>查找元素有下面几种<br><code>find_element_by_name</code><br><code>find_element_by_id</code><br><code>find_element_by_xpath</code><br><code>find_element_by_link_text</code><br><code>find_element_by_partial_link_text</code><br><code>find_element_by_tag_name</code><br><code>find_element_by_class_name</code><br><code>find_element_by_css_selector</code><br>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chromedriver = <span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line">browser = webdriver.Chrome(chromedriver)</span><br><span class="line">url = <span class="string">"http://www.taobao.com"</span></span><br><span class="line">browser.get(url=url)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">"q"</span>)  <span class="comment">#通过id</span></span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">"#q"</span>) <span class="comment">#通过css选择器</span></span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>) <span class="comment">#通过xpath选择器</span></span><br><span class="line">print(input_first)</span><br><span class="line">print(input_second)</span><br><span class="line">print(input_third)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"7341f32aea4238856409f236325848fc"</span>, element=<span class="string">"0.4317776711082031-1"</span>)&gt;</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"7341f32aea4238856409f236325848fc"</span>, element=<span class="string">"0.4317776711082031-1"</span>)&gt;</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"7341f32aea4238856409f236325848fc"</span>, element=<span class="string">"0.4317776711082031-1"</span>)&gt;</span><br></pre></td></tr></table></figure></p><p>还可以通过导入By模块方式使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">"q"</span>)</span><br></pre></td></tr></table></figure></p><p>该方法和其他类似，<code>By.ID</code>中ID也可以替换成name等。  </p><h5 id="多个元素查找"><a href="#多个元素查找" class="headerlink" title="多个元素查找"></a>多个元素查找</h5><p>多个元素查找就是使用<code>find_elements</code>，单个使用<code>find_element</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">chromedriver = <span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line">browser = webdriver.Chrome(chromedriver)</span><br><span class="line">browser.get(<span class="string">"http://www.taobao.com"</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>此时得到的结果是列表。<br><strong>xpath说明</strong><br>XPath是XML Path的简称，由于HTML文档本身就是一个标准的XML页面，所以我们可以使用XPath的语法来定位页面元素。<br>绝对路径<br><code>根元素开始用/</code><br>相对路劲<br><code>任意符合条件的元素 //</code><br>查找页面上所有的input元素<br><code>//input</code><br>查找页面上第一个form元素内的直接子input元素(即只包括form元素的下一级input元素，使用绝对路径表示，单/号)<br><code>//form[1]/input</code><br>查找页面上第一个form元素内的所有子input元素(只要在form元素内的input都算，不管还嵌套了多少个其他标签，使用相对路径表示，双//号)<br><code>//form[1]//input</code><br>查找页面上第一个form元素<br><code>//form[1]</code><br>查找页面上id为loginForm的form元素<br><code>//form[@id=&#39;loginForm&#39;]</code><br>查找页面上具有name属性为username的input元素<br><code>//input[@name=&#39;username&#39;]</code><br>查找页面上id为loginForm的form元素下的第一个input元素<br><code>//form[@id=&#39;loginForm&#39;]/input[1]</code><br>查找页面具有name属性为contiune并且type属性为button的input元素<br><code>//input[@name=&#39;continue&#39;][@type=&#39;button&#39;]</code><br>查找页面上id为loginForm的form元素下第4个input元素<br><code>//form[@id=&#39;loginForm&#39;]/input[4]</code>  </p><h4 id="控件交互"><a href="#控件交互" class="headerlink" title="控件交互"></a>控件交互</h4><p>清空输入框数据<br><code>element.clear()</code><br>发送数据<br><code>element.sendkeys(“username”)</code><br>获取文本的值<br><code>element.text</code><br>点击按钮<br><code>element.click()</code><br>表单提交<br><code>element.submit()</code><br>单选和多选框<br><code>element.clear()</code><br><code>element = browser.find_elements_by_id(&#39;checkbox&#39;)</code>  </p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>获取cookies<br><code>browser.get_cookies()</code><br>获取浏览器头名字<br><code>browser.title</code><br>关闭浏览器<br><code>browser.close()</code><br>前进<br><code>browser.forward()</code><br>后退<br><code>browser.back()</code><br>刷新<br><code>browser.refresh()</code><br>返回当前页面url<br><code>browser.current_url</code>  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>下面是利用driver实现自动登录京东网站并获取到cookie的操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F'</span></span><br><span class="line">chromedriver = <span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(chromedriver)</span><br><span class="line">driver.get(url)</span><br><span class="line">time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">driver.find_elements_by_xpath(<span class="string">'//a[@clstag="pageclick|keycount|login_pc_201804112|10"]'</span>)[<span class="number">0</span>].click() <span class="comment">#默认为二维码扫描登录，此处为切换到用户账户登录</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">driver.find_element_by_id(<span class="string">'loginname'</span>).clear() <span class="comment">#清空默认用户名</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">driver.find_element_by_id(<span class="string">'loginname'</span>).send_keys(<span class="string">"xxxxx"</span>) <span class="comment">#输入用户名</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">driver.find_element_by_id(<span class="string">'nloginpwd'</span>).send_keys(<span class="string">"xxxxx"</span>) <span class="comment">#输入密码</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">driver.find_element_by_id(<span class="string">'loginsubmit'</span>).click() <span class="comment">#点击登录按钮</span></span><br><span class="line">time.sleep(random.uniform(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">print(driver.get_cookies())</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><p><code>time.sleep(random.uniform(1, 3))</code>是当前操作之后随机暂停，模拟人的操作，防止被封。  </p><p>更多关于<code>webdriver</code>内容可以点击<a href="http://selenium-python.readthedocs.io/index.html" target="_blank" rel="noopener">Selenium with Python</a>查看官方文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Beautiful-Soup&quot;&gt;&lt;a href=&quot;#Beautiful-Soup&quot; class=&quot;headerlink&quot; title=&quot;Beautiful Soup&quot;&gt;&lt;/a&gt;Beautiful Soup&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Beautiful Soup&lt;/code&gt;是python的一个库，主要功能是从网页抓取数据。&lt;br&gt;它是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间。&lt;br&gt;通过使用该库，可以不编写正则就可以方便的实现网页信息的抓取。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="webdriver" scheme="https://rosinelan.github.io/tags/webdriver/"/>
    
  </entry>
  
</feed>
