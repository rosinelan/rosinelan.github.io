<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-12-04T07:51:45.845Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python面向对象及类的属性和方法</title>
    <link href="https://rosinelan.github.io/2018/12/04/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8F%8A%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/12/04/python面向对象及类的属性和方法/</id>
    <published>2018-12-04T06:47:44.000Z</published>
    <updated>2018-12-04T07:51:45.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h2><p>面向过程：函数式编程，C程序。<br>面向对象：C++,Java,Python等。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.+TAB键    查看字符串的方法</span><br><span class="line">list. +TAB键    查看列表的方法</span><br><span class="line">tuple. +TAB键    查看元组的方法</span><br><span class="line">dict. +TAB键    查看字典的方法</span><br></pre></td></tr></table></figure></p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类：对事物的抽象，比如：人类，球类。<br>对象：类的一个实例，比如：篮球，足球。<br>实例的说明：<br>球类可以对球的特征和行为进行抽象，然后可以实例化一个真实的球实体出来。<br>面向对象的思想：封装、继承、多态。  </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>类把需要的变量和函数组合在一起，这种包含称为封装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br></pre></td></tr></table></figure></p><p>命名：1个单词首字母大写，多个单词首字母都大写。<br>创建对象的过程称之为实例化；当一个对象被创建之后，包含3方面的特性：对象句柄、属性和方法。<br>句柄用于区分不同的对象。<br>对象的属性和方法与类中的成员变量和成员函数对应。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = MyClass()  //创建类的一个实例(对象)，通过对象调用方法和属性</span><br></pre></td></tr></table></figure></p><h4 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">成员变量 – 属性</span><br><span class="line">成员函数 – 方法</span><br></pre></td></tr></table></figure><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> “I am function”</span><br></pre></td></tr></table></figure><p>类的方法至少有一个参数self。  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yellow</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br></pre></td></tr></table></figure></p><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>按使用范围：私有属性和公有属性。<br>公有属性：在类中和类外都能调用的属性。<br>私有属性：不能再类外及被类以外的函数调用。<br>定义方式：以”<strong>”双下划线开始的成员变量就是私有属性，可以通过instance._classname_attribute方式访问(不建议使用，仅用于测试)。<br>内置属性：由系统在定义类的时候默认添加的，由前后双下划线构成，`</strong>dict<strong><code>、</code></strong>module__`。<br>支持中文的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment">#encoding:utf8</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br></pre></td></tr></table></figure></p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line">ren.color = <span class="string">'白色人'</span></span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br><span class="line"><span class="comment">#print ren.__age</span></span><br><span class="line"><span class="keyword">print</span> ren._People__age</span><br><span class="line"><span class="keyword">print</span> ren.__dict__</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> * <span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.color</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> *<span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.__dict__</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">白色人</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'black'</span>&#125;</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">yellow</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'_People__age'</span>: <span class="number">30</span>, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'think'</span>: &lt;function think at <span class="number">0x7f95deb1bc08</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>方法的定义和函数一样，但是需要self作为第一个参数。  </p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>公有方法：在类中和类外都可以调用的。<br>私有方法：不能被类的外部调用，在方法前面加上”__”双下划线。<br>self参数：用于分区函数和类方法(必须有一个self)，self参数表示执行对象本身。<br>类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用(是继承的关系)。<br>静态方法：相当于全局函数，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义，静态方法没有self参数。  </p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>公有方法调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.think()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am a yellow</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><ul><li>私有方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am talking with Tom"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__talk()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br><span class="line">jack.__talk()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am talking <span class="keyword">with</span> Tom</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    jack.__talk()</span><br><span class="line">AttributeError: <span class="string">'People'</span> object has no attribute <span class="string">'__talk'</span></span><br></pre></td></tr></table></figure></p><ul><li>类方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Testing..."</span></span><br><span class="line"></span><br><span class="line">    cm = classmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.cm()</span><br><span class="line">People.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果(类方法必须经过classmethod方法处理，否则会报错如下)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Testing...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4_1.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    People.test()</span><br><span class="line">TypeError: unbound method test() must be called <span class="keyword">with</span> People instance <span class="keyword">as</span> first argument (got nothing instead)</span><br></pre></td></tr></table></figure></p><ul><li>静态方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a func"</span></span><br><span class="line"></span><br><span class="line">    sm = staticmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.sm()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a func</span><br></pre></td></tr></table></figure></p><ul><li>装饰器(仅对相邻的第一个函数起作用,类方法和静态方法的简化)<br>@classmethod<br>@statucmethod<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a class method"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a static method"</span></span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.test()</span><br><span class="line">People.test1()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a <span class="class"><span class="keyword">class</span> <span class="title">method</span></span></span><br><span class="line"><span class="class"><span class="title">this</span> <span class="title">is</span> <span class="title">a</span> <span class="title">static</span> <span class="title">method</span></span></span><br></pre></td></tr></table></figure></p><p>说明<br>静态方法：将类的所有属性和方法提前加载到内存。<br>动态方法：只加载调用的属性和方法至内存，未调用的不加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python面向对象&quot;&gt;&lt;a href=&quot;#python面向对象&quot; class=&quot;headerlink&quot; title=&quot;python面向对象&quot;&gt;&lt;/a&gt;python面向对象&lt;/h2&gt;&lt;p&gt;面向过程：函数式编程，C程序。&lt;br&gt;面向对象：C++,Java,Python等。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="面向对象" scheme="https://rosinelan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="属性" scheme="https://rosinelan.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="方法" scheme="https://rosinelan.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python模块</title>
    <link href="https://rosinelan.github.io/2018/12/03/python%E6%A8%A1%E5%9D%97/"/>
    <id>https://rosinelan.github.io/2018/12/03/python模块/</id>
    <published>2018-12-03T09:46:23.000Z</published>
    <updated>2018-12-03T10:28:24.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>模块是python组织代码的基本方式。<br>一个python脚本可以单独运行，也可以导入到另外一个脚本中运行，当脚本被导入运行时，我们称之为模块。<br><a id="more"></a><br>所有的.py文件都可以作为一个模块导入。<br>模块名与脚本的文件名相同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.py    <span class="keyword">import</span> hello</span><br></pre></td></tr></table></figure></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>python模块可以按照目录组织为包。</p><h3 id="创建包的步骤"><a href="#创建包的步骤" class="headerlink" title="创建包的步骤"></a>创建包的步骤</h3><ol><li>创建一个名字为包的目录。</li><li>在该目录下创建一个<strong>init</strong>.py文件。</li><li>根据需要在该目录下存放脚本文件或已编译的扩展及子包。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pack.m1,pack.m2,pack.m3</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>当前目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># ls</span></span><br><span class="line"><span class="number">1</span>_1_1.py  <span class="number">1</span>_2_1.py  <span class="number">1</span>_3_1.py  <span class="number">1</span>_4_2.py  <span class="number">1</span>_5_1_1.py  <span class="number">1</span>_5_2_1.py  <span class="number">1</span>_8_3_1.py  wordCount.py</span><br><span class="line"><span class="number">1</span>_1_3.py  <span class="number">1</span>_2_2.py  <span class="number">1</span>_4_1.py  <span class="number">1</span>_4_4.py  <span class="number">1</span>_5_1.py    <span class="number">1</span>_5_2.py    <span class="number">1</span>_8_3.py    wordCount.pyc</span><br><span class="line">[root@linux02 advance]<span class="comment"># pwd</span></span><br><span class="line">/root/aming/advance</span><br></pre></td></tr></table></figure></p><p>首先创建<strong>init</strong>.py文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># touch __init__.py</span></span><br></pre></td></tr></table></figure></p><p>包的名称就是上级目录的名称，此处为advance。<br>下面的第一个wordCount表示wordCount.py文件，第二个wordCount表示wordCount.py中的函数名。<br>使用方法如下</p><ul><li><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="keyword">from</span> advance <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> advance.wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: advance.wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="keyword">from</span> advance.wordCount <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="keyword">from</span> advance <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">from</span> advance.wordCount <span class="keyword">import</span> wordCount <span class="keyword">as</span> wc</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: wc(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li></ul><p>备注：使用前需要将当前路径引入python中的sys.path，具体操作方法将下面的路径修改。</p><h2 id="模块位置"><a href="#模块位置" class="headerlink" title="模块位置"></a>模块位置</h2><p>sys.path<br>修改python的路径</p><ul><li><p>方法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(‘/root/aming’)</span><br></pre></td></tr></table></figure></li><li><p>方法2：编辑/root/.bashrc，新增</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=/root/aming</span><br></pre></td></tr></table></figure></li></ul><p>执行使之生效<br><code>./root/.bashrc</code>或者<code>source /root/.bashrc</code>。<br>确认sys.path是否正确被引入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: sys.path</span><br><span class="line">Out[<span class="number">2</span>]: </span><br><span class="line">[<span class="string">''</span>,</span><br><span class="line"> <span class="string">'/usr/bin'</span>,</span><br><span class="line"> <span class="string">'/root/aming'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python26.zip'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-tk'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-old'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/site-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/site-packages/gtk-2.0'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python2.6/site-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python2.6/site-packages/IPython/extensions'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>统计文件字符数、单词数、行数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordCount</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = len(s)</span><br><span class="line">    words = len(s.split())</span><br><span class="line">    lines = s.count(<span class="string">'\n'</span>) </span><br><span class="line">    <span class="keyword">print</span> lines,words,chars</span><br><span class="line"></span><br><span class="line">s = open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>当引用模块时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat 1_8_3_1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wordCount</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py </span></span><br><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>备注</p><ol><li>使用import引用模块时，模块名称不能为纯数字，建议使用有意义的名称；</li><li>使用import引用模块时，被引用模块会出现.pyc，编译之后的文件；目的是为了加快执行速度和效率；</li><li>统计行数时，假如字符串结尾有换行符\n，可能出现统计不准确的情况；<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">165</span>]: s = open(<span class="string">'/etc/hosts'</span>).read()</span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: s</span><br><span class="line">Out[<span class="number">170</span>]: <span class="string">'127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n127.0.0.1   linux02\n'</span></span><br></pre></td></tr></table></figure></li></ol><p>结尾有换行符\n，最后一个字符为空，统计行数不准确。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">169</span>]: s.split(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">169</span>]: </span><br><span class="line">[<span class="string">'127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4'</span>,</span><br><span class="line"> <span class="string">'::1         localhost localhost.localdomain localhost6 localhost6.localdomain6'</span>,</span><br><span class="line"> <span class="string">'127.0.0.1   linux02'</span>,</span><br><span class="line"> <span class="string">''</span>]</span><br></pre></td></tr></table></figure></p><p>建议使用方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">172</span>]: s.count(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">172</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p><code>wordCount.py</code>被引用之后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat 1_8_3_1.py</span></span><br><span class="line"><span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""hello World</span></span><br><span class="line"><span class="string">superman"""</span></span><br><span class="line">wordCount.wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>如何在不改变wordCount.py的执行结果情况下，在1_8_3_1.py中只输出第二行结果呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat wordCount.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordCount</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = len(s)</span><br><span class="line">    words = len(s.split())</span><br><span class="line">    lines = s.count(<span class="string">'\n'</span>) </span><br><span class="line">    <span class="keyword">print</span> lines,words,chars</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">    wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>备注：<code>__name__</code>为python内置变量，特点为当自身脚本执行时，输出结果为<code>__main__</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python wordCount.py</span></span><br><span class="line">__main__</span><br><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>当被引用执行时，输出结果为脚本名称<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py</span></span><br><span class="line">wordCount</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块说明&quot;&gt;&lt;a href=&quot;#模块说明&quot; class=&quot;headerlink&quot; title=&quot;模块说明&quot;&gt;&lt;/a&gt;模块说明&lt;/h2&gt;&lt;p&gt;模块是python组织代码的基本方式。&lt;br&gt;一个python脚本可以单独运行，也可以导入到另外一个脚本中运行，当脚本被导入运行时，我们称之为模块。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="模块" scheme="https://rosinelan.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>python内置函数</title>
    <link href="https://rosinelan.github.io/2018/11/30/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/30/python内置函数/</id>
    <published>2018-11-30T08:40:34.000Z</published>
    <updated>2018-11-30T09:14:17.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><code>_builtin_</code>表示内置函数，可直接使用。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li>abs()    返回数字的绝对值。<a id="more"></a></li><li>max()    返回数字或序列最大值。</li><li>min()    返回数字或序列最小值。</li><li>len()    返回序列长度。</li><li><p>divmod(x,y)    返回一个元组，元组第一个元素为x/y的商，第二个元素为x%y。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: divmod(<span class="number">8</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">34</span>]: (<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: divmod(<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">35</span>]: (<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>pow(x,y)    返回一个数字，x**y。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: pow(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">37</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>power(x,y,z)    返回一个数字，(x**y)%z。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">38</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>round(x[,y])    返回一个浮点数，其中x为需转换的数字，y为精度，默认为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: <span class="keyword">print</span> round(<span class="number">12</span>)</span><br><span class="line"><span class="number">12.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: <span class="keyword">print</span> round(<span class="number">12.445</span>)</span><br><span class="line"><span class="number">12.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>)</span><br><span class="line"><span class="number">13.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">12.545</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">12.55</span></span><br></pre></td></tr></table></figure></li><li><p>callable()    判断一个对象是否可调用，返回布尔值。函数和类都是可被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: a = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: callable(a)</span><br><span class="line">Out[<span class="number">49</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: callable(a)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: <span class="class"><span class="keyword">class</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: callable(a)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>type()    返回对象的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: s = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: type(s)</span><br><span class="line">Out[<span class="number">56</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: <span class="keyword">print</span> type([])</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: <span class="keyword">print</span> type(&#123;&#125;)</span><br><span class="line">&lt;type <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>isinstance()    返回布尔值，判断对象是否为指定的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">59</span>]: s = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: isinstance(s,list)</span><br><span class="line">Out[<span class="number">60</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: isinstance(s,str)</span><br><span class="line">Out[<span class="number">61</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: isinstance(s,(list,str,dict,tuple))</span><br><span class="line">Out[<span class="number">65</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li></ul><p>对于class的判断较为方便<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: a = A()</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: isinstance(a,A)</span><br><span class="line">Out[<span class="number">68</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><ul><li>cmp(x,y)    返回数字，x &gt; y返回正数，x=y返回0，x &lt; y返回负数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: cmp(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">70</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: cmp(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">71</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: cmp(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">72</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: cmp(<span class="string">'zll'</span>,<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>字符串比较，比较字符，而不是字符串长度</p><ul><li><p>range()    返回一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">74</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>xrange()    返回一个对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: xrange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">75</span>]: xrange(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><p>xrange()结果保存在对象中，必须遍历才能读取至内存；range直接返回保存至内存，故xrange更节省资源。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: a = xrange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:<span class="keyword">print</span> i</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><ul><li>int()    转换为int类型。</li><li><p>long()    转换为long类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">80</span>]: long(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">80</span>]: <span class="number">123L</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: long(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">81</span>]: <span class="number">123L</span></span><br></pre></td></tr></table></figure></li><li><p>float()    转换为float类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">82</span>]: float(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">82</span>]: <span class="number">123.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: float(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">83</span>]: <span class="number">123.0</span></span><br></pre></td></tr></table></figure></li><li><p>complex()    转换为复数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: complex(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">84</span>]: (<span class="number">123</span>+<span class="number">0j</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: complex(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">85</span>]: (<span class="number">123</span>+<span class="number">0j</span>)</span><br></pre></td></tr></table></figure></li><li><p>str()    转换为字符串。</p></li><li><p>list()    转换为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: list(<span class="string">'23444'</span>)</span><br><span class="line">Out[<span class="number">89</span>]: [<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure></li><li><p>tuple()    转换为元组。</p></li><li><p>hex()    转换为16进制，返回字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: hex(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">91</span>]: <span class="string">'0xa'</span></span><br></pre></td></tr></table></figure></li><li><p>oct()    转换为8进制，返回字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: oct(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">92</span>]: <span class="string">'012'</span></span><br></pre></td></tr></table></figure></li><li><p>chr()    返回当前字符对应的ANSCII码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">99</span>]: chr(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">99</span>]: <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: chr(<span class="number">65</span>)</span><br><span class="line">Out[<span class="number">100</span>]: <span class="string">'A'</span></span><br></pre></td></tr></table></figure></li><li><p>ord()    返回ANSCII码对应的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: ord(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">101</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: ord(<span class="string">'A'</span>)</span><br><span class="line">Out[<span class="number">102</span>]: <span class="number">65</span></span><br></pre></td></tr></table></figure></li><li><p>eval()    字符串当做有效表达式求值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">94</span>]: eval(<span class="string">'0xa'</span>)</span><br><span class="line">Out[<span class="number">94</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: eval(<span class="string">'012'</span>)</span><br><span class="line">Out[<span class="number">95</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: eval(<span class="string">"['a','b',1]"</span>)</span><br><span class="line">Out[<span class="number">96</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><ul><li><p>str.capitalize()    字符串首字母大写并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">106</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: s.capitalize()</span><br><span class="line">Out[<span class="number">107</span>]: <span class="string">'Abc'</span></span><br></pre></td></tr></table></figure></li><li><p>str.replace(old,new[,count])    字符串中old字符串替换为new字符串，count为替换次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">113</span>]: s = <span class="string">'HexH'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>)</span><br><span class="line">Out[<span class="number">114</span>]: <span class="string">'hexh'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">115</span>]: <span class="string">'hexH'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">116</span>]: <span class="string">'hexh'</span></span><br></pre></td></tr></table></figure></li><li><p>str.split()    字符串拆分，默认为空格拆分，也可以自定义分隔符，返回列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">118</span>]: s = <span class="string">'hello a\tb\nc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: s.split()</span><br><span class="line">Out[<span class="number">119</span>]: [<span class="string">'hello'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">In [<span class="number">120</span>]: s = <span class="string">'192.168.1.1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: s.split()</span><br><span class="line">Out[<span class="number">121</span>]: [<span class="string">'192.168.1.1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: s.split(<span class="string">'.'</span>,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">122</span>]: [<span class="string">'192'</span>, <span class="string">'168.1.1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">123</span>]: s.split(<span class="string">'.'</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">123</span>]: [<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>]</span><br></pre></td></tr></table></figure></li><li><p>str.join()    返回字符串，该字符串使用str连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">125</span>]: <span class="string">''</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">Out[<span class="number">125</span>]: <span class="string">'0123456789'</span></span><br><span class="line">In [<span class="number">128</span>]: <span class="string">'-'</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">Out[<span class="number">128</span>]: <span class="string">'0-1-2-3-4-5-6-7-8-9'</span></span><br></pre></td></tr></table></figure></li></ul><p>string模块<br>方法同上，但是使用方式不同，使用时需要import string。</p><h3 id="序列处理函数"><a href="#序列处理函数" class="headerlink" title="序列处理函数"></a>序列处理函数</h3><ul><li>len()</li><li>max()</li><li>min()</li><li>filter()    根据条件判断是否处理，True则返回处理后序列，False返回原序列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">131</span>]: filter(<span class="keyword">None</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,])</span><br><span class="line">Out[<span class="number">131</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">In [<span class="number">134</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   .....:     <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">   .....:         <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">   .....:     </span><br><span class="line">In [<span class="number">136</span>]: filter(f,range(<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">136</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></li></ul><p>使用匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">152</span>]: filter(<span class="keyword">lambda</span>  x: x%<span class="number">2</span> ==<span class="number">0</span> ,range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">152</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><ul><li>zip()    多个序列返回一个列表，列表包含多个序列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: l2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: zip(l1, l2)</span><br><span class="line">Out[<span class="number">139</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</span><br></pre></td></tr></table></figure></li></ul><p>用此方法可以创建字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">142</span>]: dict(zip(l1, l2))</span><br><span class="line">Out[<span class="number">142</span>]: &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>当序列长度不一致时，取最小的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: l2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: l3 = [<span class="string">'I'</span>,<span class="string">'II'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: zip(l1, l2, l3)</span><br><span class="line">Out[<span class="number">141</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'I'</span>), (<span class="number">2</span>, <span class="string">'b'</span>, <span class="string">'II'</span>)]</span><br></pre></td></tr></table></figure></p><ul><li>map()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">143</span>]: map(<span class="keyword">None</span>, l1, l2, l3)</span><br><span class="line">Out[<span class="number">143</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'I'</span>), (<span class="number">2</span>, <span class="string">'b'</span>, <span class="string">'II'</span>), (<span class="number">3</span>, <span class="string">'c'</span>, <span class="keyword">None</span>)]</span><br></pre></td></tr></table></figure></li></ul><p>使用多个序列的情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">146</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">   .....:     <span class="keyword">return</span> x * y</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: l3 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: map(f, l1, l3)</span><br><span class="line">Out[<span class="number">149</span>]: [<span class="number">4</span>, <span class="number">10</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure></p><p>使用匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">153</span>]: map(<span class="keyword">lambda</span> x, y: x * y, range(<span class="number">1</span>,<span class="number">10</span>), range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">153</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure></p><ul><li>reduce():    根据传入reduce的函数，对序列中的元素进行处理。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">155</span>]: reduce(<span class="keyword">lambda</span> x, y: x + y,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">Out[<span class="number">155</span>]: <span class="number">21</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h3><p>相比较于for循环，列表表达式更加高效。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">156</span>]: [i*<span class="number">2</span>+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">Out[<span class="number">156</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: [i*<span class="number">2</span>+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">Out[<span class="number">157</span>]: [<span class="number">1</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内置函数&quot;&gt;&lt;a href=&quot;#内置函数&quot; class=&quot;headerlink&quot; title=&quot;内置函数&quot;&gt;&lt;/a&gt;内置函数&lt;/h2&gt;&lt;p&gt;&lt;code&gt;_builtin_&lt;/code&gt;表示内置函数，可直接使用。&lt;/p&gt;
&lt;h3 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;abs()    返回数字的绝对值。
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类型转换" scheme="https://rosinelan.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="字符串处理" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
      <category term="序列" scheme="https://rosinelan.github.io/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="列表表达式" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python匿名函数</title>
    <link href="https://rosinelan.github.io/2018/11/29/python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/29/python匿名函数/</id>
    <published>2018-11-29T09:03:34.000Z</published>
    <updated>2018-11-29T09:16:45.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="递归列出目录中的文件"><a href="#递归列出目录中的文件" class="headerlink" title="递归列出目录中的文件"></a>递归列出目录中的文件</h3><h4 id="函数讲解"><a href="#函数讲解" class="headerlink" title="函数讲解"></a>函数讲解</h4><ul><li><p>os .listdir()    列出当前目录下的内容。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: os.listdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'advance'</span>, <span class="string">'basic'</span>, <span class="string">'tmp.txt'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir()    判断是否为目录，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: os.path.isdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: os.path.isdir(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile()    判断是否为文件，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: os.path.isfile(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: os.path.isfile(<span class="string">'/root/aming/222'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: os.path.isfile(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join()    将字符连接为目录，不判断该路径是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: os.path.join(<span class="string">'root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'/root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'/root/aming/123'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="递归输出"><a href="#递归输出" class="headerlink" title="递归输出"></a>递归输出</h4><p>列出目录下所有文件，包括子目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printFiles</span><span class="params">(path)</span>:</span></span><br><span class="line">    lsdir = os.listdir(path)</span><br><span class="line">    dirs = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isdir(os.path.join(path,i))]</span><br><span class="line">    files = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isfile(os.path.join(path,i))]</span><br><span class="line">    <span class="keyword">if</span> files:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">print</span> os.path.join(path,f)</span><br><span class="line">    <span class="keyword">if</span> dirs:</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            printFiles(os.path.join(path,d))</span><br><span class="line"></span><br><span class="line">printFiles(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/root/aming/tmp.txt</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_5_1.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_4_4.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_1_3.py</span><br><span class="line">......................</span><br><span class="line">/root/aming/basic/<span class="number">2</span>_3_2.py</span><br></pre></td></tr></table></figure></p><p>注意：当上述文件中if files:和if dirs:判断调换位置，输出结果将会发生变化，可自行尝试。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>关键字<code>lambda</code>表示匿名函数。<br>lambda函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。<br>匿名函数只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><h3 id="实例对比"><a href="#实例对比" class="headerlink" title="实例对比"></a>实例对比</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line">fun(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>更改为lambda函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="keyword">lambda</span> x, y:x * y</span><br><span class="line">r(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>lambda语句中，冒号前是参数，可以有多个，逗号隔开；冒号后是返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: r = <span class="keyword">lambda</span> x, y:x*y</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: r(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>lambda语句构建的其实是一个函数对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: r</span><br><span class="line">Out[<span class="number">28</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>带有&lt; &gt;这种都是对象。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用lambda可以省去定义函数的过程，让代码更精简。<br>对于一些抽象的，不会被别的地方重复使用的函数，使用lambda不需要考虑命名的问题。<br>使用lambda有些时候让代码更容易理解。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li>reduce()函数<br>对序列进行操作，具体操作由lambda函数定义，定义的函数必须为2元计算。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: reduce(<span class="keyword">lambda</span> x, y:x + y, range(<span class="number">1</span>,<span class="number">101</span>))</span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">5050</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;递归列出目录中的文件&quot;&gt;&lt;a href=&quot;#递归列出目录中的文件&quot; class=&quot;headerlink&quot; title=&quot;递归列出目录中的文件&quot;&gt;&lt;/a&gt;递归列出目录中的文件&lt;/h3&gt;&lt;h4 id=&quot;函数讲解&quot;&gt;&lt;a href=&quot;#函数讲解&quot; class=&quot;headerlink&quot; title=&quot;函数讲解&quot;&gt;&lt;/a&gt;函数讲解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;os .listdir()    列出当前目录下的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="匿名函数" scheme="https://rosinelan.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python函数递归调用</title>
    <link href="https://rosinelan.github.io/2018/11/28/python%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/11/28/python函数递归调用/</id>
    <published>2018-11-28T10:10:12.000Z</published>
    <updated>2018-11-28T10:18:01.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数递归调用"><a href="#函数递归调用" class="headerlink" title="函数递归调用"></a>函数递归调用</h2><p>函数自己调用自己。<br>递归必须有最后的默认结果，如下例中的if n == 0。<br>递归参数必须向默认结果收敛，如下例中的factorial(n-1)。<br><a id="more"></a></p><h2 id="递归调用实例"><a href="#递归调用实例" class="headerlink" title="递归调用实例"></a>递归调用实例</h2><h3 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h3><p>输入数字，得到该数字的阶乘</p><h4 id="循环方式"><a href="#循环方式" class="headerlink" title="循环方式"></a>循环方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        sum *= i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">x = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(x)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input a number:<span class="number">5</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure></p><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">x = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(x)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input a number:<span class="number">5</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure></p><h3 id="递归列出目录中的文件"><a href="#递归列出目录中的文件" class="headerlink" title="递归列出目录中的文件"></a>递归列出目录中的文件</h3><h4 id="函数讲解"><a href="#函数讲解" class="headerlink" title="函数讲解"></a>函数讲解</h4><ul><li><p>os .listdir()    列出当前目录下的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: os.listdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'advance'</span>, <span class="string">'basic'</span>, <span class="string">'tmp.txt'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir()    判断是否为目录，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: os.path.isdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: os.path.isdir(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile()    判断是否为文件，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: os.path.isfile(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: os.path.isfile(<span class="string">'/root/aming/222'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: os.path.isfile(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join()    将字符连接为目录，不判断该路径是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: os.path.join(<span class="string">'root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'/root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'/root/aming/123'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="递归输出"><a href="#递归输出" class="headerlink" title="递归输出"></a>递归输出</h4><p>列出目录下所有文件，包括子目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printFiles</span><span class="params">(path)</span>:</span></span><br><span class="line">    lsdir = os.listdir(path)</span><br><span class="line">    dirs = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isdir(os.path.join(path,i))]</span><br><span class="line">    files = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isfile(os.path.join(path,i))]</span><br><span class="line">    <span class="keyword">if</span> files:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">print</span> os.path.join(path,f)</span><br><span class="line">    <span class="keyword">if</span> dirs:</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            printFiles(os.path.join(path,d))</span><br><span class="line"></span><br><span class="line">printFiles(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/root/aming/tmp.txt</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_5_1.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_4_4.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_1_3.py</span><br><span class="line">......................</span><br><span class="line">/root/aming/basic/<span class="number">2</span>_3_2.py</span><br></pre></td></tr></table></figure></p><p>注意：当上述文件中if files:和if dirs:判断调换位置，输出结果将会发生变化，可自行尝试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数递归调用&quot;&gt;&lt;a href=&quot;#函数递归调用&quot; class=&quot;headerlink&quot; title=&quot;函数递归调用&quot;&gt;&lt;/a&gt;函数递归调用&lt;/h2&gt;&lt;p&gt;函数自己调用自己。&lt;br&gt;递归必须有最后的默认结果，如下例中的if n == 0。&lt;br&gt;递归参数必须向默认结果收敛，如下例中的factorial(n-1)。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="递归" scheme="https://rosinelan.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>python函数变量和返回值</title>
    <link href="https://rosinelan.github.io/2018/11/27/python%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>https://rosinelan.github.io/2018/11/27/python函数变量和返回值/</id>
    <published>2018-11-27T09:16:00.000Z</published>
    <updated>2018-11-27T09:37:58.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h2><p>函数变量分为局部变量和全局变量。任何变量都有特定作用域。<br>在函数中定义的变量一般只能在该函数内部使用，属于局部变量。<br><a id="more"></a><br>在一个文件顶部定义的变量可以供文件中的任何函数调用，属于全局变量。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>全局变量在函数内部只能print，不可进行操作；局部变量在函数外部不可见；使用global关键字声明为全局变量，则可以进行操作或者外部使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> y</span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fun()</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">print</span> y</span><br></pre></td></tr></table></figure></p><p>此处x为全局变量，若不进行global声明，x += 1报错；y为局部变量，若不进行global声明，print y报错。</p><h3 id="locals-函数"><a href="#locals-函数" class="headerlink" title="locals()函数"></a>locals()函数</h3><p>返回一个字典，字典内容为当前可见的变量。</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>函数被调用后会返回一个特定的值；函数调用后默认返回<code>None</code>。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>返回值可以是任何类型。<br>return执行后，函数终止。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello world!"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> fun()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><h3 id="return和print的区别"><a href="#return和print的区别" class="headerlink" title="return和print的区别"></a>return和print的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s.isdigit():</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'/proc'</span>):</span><br><span class="line">    <span class="keyword">if</span> isNum(i):</span><br><span class="line">        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><h3 id="多类型传值"><a href="#多类型传值" class="headerlink" title="多类型传值"></a>多类型传值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br></pre></td></tr></table></figure><p>传入元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fun(*t)</span><br><span class="line">fun(<span class="number">2</span>,*t)</span><br></pre></td></tr></table></figure></p><p>传入字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;‘x’:<span class="number">1</span>,.’y’:<span class="number">3</span>,’z’:<span class="number">5</span>&#125;</span><br><span class="line">fun(**dic)</span><br></pre></td></tr></table></figure></p><h3 id="冗余参数"><a href="#冗余参数" class="headerlink" title="冗余参数"></a>冗余参数</h3><p>命名参数<br>多余参数存到元组<br>默认参数存到字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">'c'</span>,<span class="string">'d'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="keyword">print</span> args</span><br><span class="line">    <span class="keyword">print</span> kwargs</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,[<span class="number">1</span>,<span class="number">2</span>,],*t,a=<span class="number">3</span>,**&#123;<span class="string">'b'</span>:<span class="number">11</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">11</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数变量&quot;&gt;&lt;a href=&quot;#函数变量&quot; class=&quot;headerlink&quot; title=&quot;函数变量&quot;&gt;&lt;/a&gt;函数变量&lt;/h2&gt;&lt;p&gt;函数变量分为局部变量和全局变量。任何变量都有特定作用域。&lt;br&gt;在函数中定义的变量一般只能在该函数内部使用，属于局部变量。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="变量" scheme="https://rosinelan.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="返回值" scheme="https://rosinelan.github.io/tags/%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>python函数定义及默认参数</title>
    <link href="https://rosinelan.github.io/2018/11/26/python%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%8F%8A%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/26/python函数定义及默认参数/</id>
    <published>2018-11-26T10:11:44.000Z</published>
    <updated>2018-11-26T10:24:12.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><p>函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。<br>函数调用就是通过函数名在程序的不同地方多次执行。<br>函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。<br><a id="more"></a><br>使用函数可以降低编程难度(将大问题划分为多个小问题)；可以实现代码重用，提高效率。</p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><p>def 函数名([参数列表]):</p><p>函数名首字母小写，其余单词首字母大写</p><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>函数名([参数])</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>判断键盘输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_Is_Num</span><span class="params">()</span>:</span></span><br><span class="line">    sth = raw_input(<span class="string">"Please input something:"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> type(int(sth)) == type(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is a number"</span> %sth</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is not a number"</span> %sth</span><br><span class="line"></span><br><span class="line">fun_Is_Num()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:www</span><br><span class="line">www <span class="keyword">is</span> <span class="keyword">not</span> a number</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:<span class="number">12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number</span><br></pre></td></tr></table></figure></p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>参数分为形式参数和实际参数。<br>在定义函数时，函数名后面括号中的变量名称叫做形式参数。<br>在调用函数时，函数名后面括号中的变量名称叫做实际参数。</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>判断输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">print</span> <span class="string">"%s is not a number."</span> %s</span><br><span class="line">           sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is a number."</span> %s</span><br><span class="line"></span><br><span class="line">isNum(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number.</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12ffff</span></span><br><span class="line"><span class="number">12</span>ffff <span class="keyword">is</span> <span class="keyword">not</span> a number.</span><br></pre></td></tr></table></figure></p><h4 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h4><p>返回一个列表，其中<code>argv[0]</code>表示文件路径，后面的依次为参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> sys.argv</span><br><span class="line"></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>]</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py 1 b e</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>, <span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>]</span><br><span class="line">[root@linux02 ~]<span class="comment"># python /root/aming/advance/1_1_1.py 2</span></span><br><span class="line">[<span class="string">'/root/aming/advance/1_1_1.py'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>打印系统所有的PID，要求从/proc读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#           print "%s is not a number." %s</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> s, </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'/proc'</span>):</span><br><span class="line">    isNum(i)</span><br></pre></td></tr></table></figure></p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数必须连续设置，直至最后一个参数，中间不可间断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">10</span>,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z=<span class="number">10</span>)</span>    错误</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br></pre></td></tr></table></figure></p><p>调用函数时，对于已经给的参数从左向右进行匹配。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python函数&quot;&gt;&lt;a href=&quot;#python函数&quot; class=&quot;headerlink&quot; title=&quot;python函数&quot;&gt;&lt;/a&gt;python函数&lt;/h2&gt;&lt;p&gt;函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。&lt;br&gt;函数调用就是通过函数名在程序的不同地方多次执行。&lt;br&gt;函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="函数" scheme="https://rosinelan.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="参数" scheme="https://rosinelan.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="默认参数" scheme="https://rosinelan.github.io/tags/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python文件及数据类型转换</title>
    <link href="https://rosinelan.github.io/2018/11/23/python%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://rosinelan.github.io/2018/11/23/python文件及数据类型转换/</id>
    <published>2018-11-23T08:18:45.000Z</published>
    <updated>2018-11-23T08:40:09.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>python内置函数<code>open()</code>进行文件操作，默认使用<code>r</code>方式打开文件。<br><a id="more"></a><br>操作示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = open(‘/tmp/tmp.txt’,’w’)</span><br><span class="line">fd.write(“<span class="number">123</span>”)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure></p><p>其他打开方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r    读方式打开(文件不存在报错)</span><br><span class="line">w    写方式打开(文件不存在会新建，存在会被覆盖)</span><br><span class="line">a    追加模式(文件不存在会创建)</span><br><span class="line">r+    读写模式打开</span><br><span class="line">w+    读写模式打开</span><br><span class="line">a+    读写模式打开</span><br><span class="line">rb    二进制读模式</span><br><span class="line">wb    二进制写模式</span><br><span class="line">ab    二进制追加模式</span><br><span class="line">rb+    二进制读写模式打开</span><br><span class="line">wb+    二进制读写模式打开</span><br><span class="line">ab+    二进制读写模式打开</span><br></pre></td></tr></table></figure></p><p><code>w</code>方式打开文件，原文件将被覆盖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: fd.write(<span class="string">'1234\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>a</code>方式打开文件，追加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: fd.write(<span class="string">'5678\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p>文件读取方法</p><ul><li>fd.read()    返回字符串</li><li>fd.readline()    返回字符串</li><li>fd.readlines()    返回列表</li></ul><p><code>fd.read()</code>    返回字符串，读取文件所有内容，再次读取时返回空<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: fd.read()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'1234\n5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: fd.read()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readline()</code>    返回字符串，按行顺序读取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'1234\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readlines()</code>    返回列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: fd.readlines()</span><br><span class="line">Out[<span class="number">30</span>]: [<span class="string">'1234\n'</span>, <span class="string">'5678\n'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><h3 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h3><h4 id="for循环遍历文件"><a href="#for循环遍历文件" class="headerlink" title="for循环遍历文件"></a>for循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="comment">#for line in fd.readlines():</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line"><span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>读取方式有2种，分别为<br><code>for line in fd.realines()</code><br><code>for line in fd</code><br>对于大文件进行遍历，建议使用第二种方法，第一种会创建列表，需要占用大量内存；第二种则不会。</p><h4 id="while循环遍历文件"><a href="#while循环遍历文件" class="headerlink" title="while循环遍历文件"></a>while循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = fd.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h4 id="with-open-用法示例"><a href="#with-open-用法示例" class="headerlink" title="with open 用法示例"></a>with open 用法示例</h4><p>使用此方式打开文件，不用再次调用fd.close()关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/aming/tmp.txt'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line = fd.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> line,</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>统计系统free内存和所占百分比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/proc/meminfo'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">for</span> free <span class="keyword">in</span> fd:</span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemTotal'</span>):</span><br><span class="line">            total = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemFree'</span>):</span><br><span class="line">            free = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(total)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/float(total))+<span class="string">'%'</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">557.22</span>M</span><br><span class="line"><span class="number">1862.21</span>M</span><br><span class="line"><span class="number">0.30</span>%</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>16进制转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: int(<span class="string">'a'</span>,<span class="number">16</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为16进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: hex(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'0xa'</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: str(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'10'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: int(<span class="string">'10'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>计算MAC地址,已知当前MAC地址，计算下一个MAC地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">macaddr = <span class="string">'00:0C:29:A5:62:0A'</span></span><br><span class="line">prefix_mac = macaddr[:<span class="number">-3</span>]</span><br><span class="line">last_two = macaddr[<span class="number">-2</span>:]</span><br><span class="line">plus_one = int(last_two, <span class="number">16</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> plus_one <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> len(new_last_two) == <span class="number">1</span>:</span><br><span class="line">        new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line">new_mac = prefix_mac + <span class="string">':'</span> + new_last_two</span><br><span class="line"><span class="keyword">print</span> new_mac.upper()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:A5:<span class="number">62</span>:<span class="number">0</span>B</span><br></pre></td></tr></table></figure></p><h3 id="元组字典列表转换"><a href="#元组字典列表转换" class="headerlink" title="元组字典列表转换"></a>元组字典列表转换</h3><p>字符串转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: l = list(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>列表转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="string">''</span>.join(l)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: t = tuple(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="string">''</span>.join(t)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>列表转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: l</span><br><span class="line">Out[<span class="number">24</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: tuple(l)</span><br><span class="line">Out[<span class="number">25</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: t</span><br><span class="line">Out[<span class="number">26</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: list(t)</span><br><span class="line">Out[<span class="number">27</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>字典转换为列表    字典的items()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: dic = &#123;<span class="string">'a'</span> : <span class="number">1</span>, <span class="string">'b'</span> : <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: dic.items()</span><br><span class="line">Out[<span class="number">29</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure></p><p>列表转换为字典    dict()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: l1</span><br><span class="line">Out[<span class="number">32</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: dict(l1)</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;p&gt;python内置函数&lt;code&gt;open()&lt;/code&gt;进行文件操作，默认使用&lt;code&gt;r&lt;/code&gt;方式打开文件。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类型转换" scheme="https://rosinelan.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="文件" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制之if</title>
    <link href="https://rosinelan.github.io/2018/11/21/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8Bif/"/>
    <id>https://rosinelan.github.io/2018/11/21/python流程控制之if/</id>
    <published>2018-11-21T08:26:47.000Z</published>
    <updated>2018-11-21T11:13:18.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><a id="more"></a> <p>缩进使用4个空格，不建议使用TAB键。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>键盘输入数字，&gt;90输出A,&gt;80输出B，&gt;=70输出C，&lt;70输出D。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat if.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">score = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Very Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'pass'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'D'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not pass'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br></pre></td></tr></table></figure></p><p>逻辑值包含2个量。  </p><ul><li>True：表示非空的量，所有非零数。  </li><li>False：表示0，none，空的量等。  <h2 id="if实例"><a href="#if实例" class="headerlink" title="if实例"></a>if实例</h2></li><li><p>输入三个整数x,y,z，请把这三个数由小到大输出。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    list1.append(int(input(<span class="string">'&#123;&#125;:'</span>.format(i))))</span><br><span class="line">print(list1)</span><br><span class="line">x = min(list1)</span><br><span class="line">list1.remove(x)</span><br><span class="line">z = max(list1)</span><br><span class="line">y = list1[<span class="number">0</span>]</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure></li><li><p>企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line"><span class="keyword">if</span> I &gt;= <span class="number">100</span>:</span><br><span class="line">    A = (I<span class="number">-100</span>) * <span class="number">0.01</span> + <span class="number">3.95</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">60</span>:</span><br><span class="line">    A = (I - <span class="number">60</span>)* <span class="number">0.015</span> + <span class="number">3.35</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">40</span>:</span><br><span class="line">    A = (I - <span class="number">40</span>)*<span class="number">0.03</span> + <span class="number">2.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">20</span>:</span><br><span class="line">    A = (I - <span class="number">20</span>)*<span class="number">0.05</span> + <span class="number">1.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">10</span>:</span><br><span class="line">    A = (I - <span class="number">10</span>)*<span class="number">0.075</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    A = I*<span class="number">0.1</span></span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></li></ul><p>更简洁的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line">arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line">rat = [<span class="number">0.01</span>, <span class="number">0.015</span>, <span class="number">0.03</span>, <span class="number">0.05</span>, <span class="number">0.075</span>, <span class="number">0.1</span>]</span><br><span class="line">A = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> I &gt; arr[idx]:</span><br><span class="line">        A += (I-arr[idx])*rat[idx]</span><br><span class="line">        I = arr[idx]</span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h2&gt;&lt;h3 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; expression:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="流程控制" scheme="https://rosinelan.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制for while</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6for-while/"/>
    <id>https://rosinelan.github.io/2018/11/16/python流程控制for-while/</id>
    <published>2018-11-16T09:32:01.000Z</published>
    <updated>2018-11-22T10:36:13.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="for-序列"><a href="#for-序列" class="headerlink" title="for 序列"></a>for 序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i,</span><br></pre></td></tr></table></figure><a id="more"></a><p>print默认输出每行都带换行符，加逗号可以抑制换行符。</p><ul><li><p>tange()函数，返回列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></li><li><p>列表重写(列表表达式)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>实例<br>计算1+2+….+100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum = sum + i</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></li></ul><p><code>xrange()</code>函数返回对象，不占用内存资源，比<code>range()</code>更快更高效。</p><h3 id="for-字典"><a href="#for-字典" class="headerlink" title="for 字典"></a>for 字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: dic1 = dict.fromkeys(<span class="string">'abcde'</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: dic1</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">'a'</span>: <span class="number">100</span>, <span class="string">'b'</span>: <span class="number">100</span>, <span class="string">'c'</span>: <span class="number">100</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'e'</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i,dic1[i]</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> i</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'e'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'d'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> v,k <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> v,k</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>乘法口诀实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> “%sx%s” %(j, i, j*i),</span><br><span class="line">    <span class="keyword">print</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环的退出"><a href="#循环的退出" class="headerlink" title="循环的退出"></a>循环的退出</h2><ul><li>for<br>循环正常结束才会执行else。</li><li>if<br>出现多个时，每个都会判断。</li><li>elif<br>当前面有if满足条件时，该条件不再判断。</li><li>break<br>直接退出循环，不再执行。</li><li>continue<br>退出该次循环，执行下一次循环。</li><li>pass<br>占位符，无意义</li><li>sys.exit()<br>退出整个脚本<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_5.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">7</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"main end"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hahaha"</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_1_5.py </span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><ul><li>系统生成一个20以内的随机整数<br>玩家有6次机会进行猜猜看，每次猜测都有反馈(猜大了，猜小了，猜对了，结束)<br>6次中，猜对了，玩家赢了<br>否则系统赢<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_6.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">digt = random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span> digt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    in_num = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line">    <span class="keyword">if</span> in_num &gt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too big;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num &lt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too small;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num == digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"you are right."</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"have no change,system win!"</span></span><br><span class="line"><span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"congratulation!You win!"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>for循环用在有次数的循环上。<br>while循环用在有条件的控制上。<br>while循环，直到表达式为假才退出；表达式是一个逻辑表达式，必须返回一个True或False。<br>while循环后的else用法同for循环，当while条件正常结束时执行，否则不执行。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="number">2</span>_2_2.py</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">in_put = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> in_put != <span class="string">"q"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line">    in_put = raw_input(<span class="string">"Please input something,q for quit:"</span>)</span><br><span class="line"><span class="comment">#    if in_put == ''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> in_put:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> in_put == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"continue"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_2_2.py </span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:a</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:q</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure></p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><ul><li>有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？<br>程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去  掉不满足条件的排列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span>((a != b) <span class="keyword">and</span> (a != c) <span class="keyword">and</span> (b != c)):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                d = a + b*<span class="number">10</span> + c*<span class="number">100</span></span><br><span class="line">                list1.append(d)</span><br><span class="line">print(<span class="string">"满足条件的三位数共有&#123;&#125;个，如下列表所示"</span>.format(i))</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">满足条件的三位数共有<span class="number">24</span>个，如下列表所示</span><br><span class="line">[<span class="number">321</span>, <span class="number">421</span>, <span class="number">231</span>, <span class="number">431</span>, <span class="number">241</span>, <span class="number">341</span>, <span class="number">312</span>, <span class="number">412</span>, <span class="number">132</span>, <span class="number">432</span>, <span class="number">142</span>, <span class="number">342</span>, <span class="number">213</span>, <span class="number">413</span>, <span class="number">123</span>, <span class="number">423</span>, <span class="number">143</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">314</span>, <span class="number">124</span>, <span class="number">324</span>, <span class="number">134</span>, <span class="number">234</span>]</span><br></pre></td></tr></table></figure></p><ul><li>打印出所有的“水仙花数”,所谓“水仙花数”是指一个三位数,其各位数字立方和等于该数本身。例如：153是一个“水仙花数”,因为153=1的三次方＋5的三次方＋3的三次方。<br>程序分析：利用for循环控制100-999个数,每个数分解出个位,十位,百位。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    str1 = str(i)</span><br><span class="line">    a, b , c = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span>(int(a)**<span class="number">3</span> + int(b)**<span class="number">3</span> + int(c)**<span class="number">3</span> == i):</span><br><span class="line">        list2.append(i)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">153</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">407</span>]</span><br></pre></td></tr></table></figure></p><ul><li>两个乒乓球队进行比赛,各出三人。甲队为a,b,c三人,乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比,c说他不和x,z比,请编程序找出三队赛手的名单。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">list1 = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(list1):</span><br><span class="line">    <span class="keyword">if</span>(i[<span class="number">0</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'z'</span>):</span><br><span class="line">        print(<span class="string">'a vs &#123;0&#125;, b vs &#123;1&#125;, c vs &#123;2&#125;'</span>.format(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a vs z, b vs x, c vs y</span><br></pre></td></tr></table></figure></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><ul><li>将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。<br>程序分析：对n进行分解质因数,应先找到一个最小的质数i,然后按下述步骤完成：<br>(1)如果分解后商为1,则说明分解质因数的过程已经结束,打印出即可。<br>(2)如果商不为1,则应打印出i的值,并用n除以i的商,作为新的正整数进行分解,重复执行第一步。<br>(3)如果n不能被i整除,则i的值加1,重复执行第一步。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"input a integer:"</span>))</span><br><span class="line">list1 = [num]</span><br><span class="line">str1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(num+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            list1.append(i)</span><br><span class="line">            num = num / i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(list1)):</span><br><span class="line">    str1 += str(list1[j])</span><br><span class="line">print(<span class="string">"&#123;0&#125;="</span>.format(list1[<span class="number">0</span>]), end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'*'</span>.join(str1))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input a integer:<span class="number">175</span></span><br><span class="line"><span class="number">175</span>=<span class="number">5</span>*<span class="number">5</span>*<span class="number">7</span></span><br></pre></td></tr></table></figure></p><ul><li>猴子吃桃问题：猴子第一天摘下若干个桃子,当即吃了一半,还不瘾,又多吃了一个，第二天早上又将剩下的桃子吃掉一半,又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时,见只剩下一个桃子了。求第一天共摘了多少。<br>程序分析：采取逆向思维的方法,从后往前推断。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    p = (p+<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1534</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;h3 id=&quot;for-序列&quot;&gt;&lt;a href=&quot;#for-序列&quot; class=&quot;headerlink&quot; title=&quot;for 序列&quot;&gt;&lt;/a&gt;for 序列&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
  </entry>
  
  <entry>
    <title>python字典</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E5%AD%97%E5%85%B8/"/>
    <id>https://rosinelan.github.io/2018/11/16/python字典/</id>
    <published>2018-11-16T09:31:49.000Z</published>
    <updated>2018-11-21T10:55:30.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><p>字典是python中唯一的映射类型(哈希表)。<br>字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: type(dic)</span><br><span class="line">Out[<span class="number">2</span>]: dict</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: dic</span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="number">1</span>: <span class="number">123</span>, <span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><ul><li><p>keys()<br>返回列表，内容为字典的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dic.keys()</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'a'</span>, <span class="number">1</span>, (<span class="string">'a'</span>, <span class="string">'b'</span>)]</span><br></pre></td></tr></table></figure></li><li><p>values()<br>返回列表，内容为字典中的value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: dic.values()</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">123</span>, <span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure></li><li><p>items()<br>返回列表，内容为字典的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dic.items()</span><br><span class="line">Out[<span class="number">9</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">123</span>), ((<span class="string">'a'</span>, <span class="string">'b'</span>), <span class="string">'hello'</span>)]</span><br></pre></td></tr></table></figure></li></ul><h2 id="字典练习"><a href="#字典练习" class="headerlink" title="字典练习"></a>字典练习</h2><p>从键盘读取输入，存入字典，输出。</p><h3 id="输出方式1"><a href="#输出方式1" class="headerlink" title="输出方式1"></a>输出方式1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">print</span> info</span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:mike</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">&#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'name'</span>: <span class="string">'mike'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="输出方式2"><a href="#输出方式2" class="headerlink" title="输出方式2"></a>输出方式2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:tom</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">(<span class="string">'gender'</span>, <span class="string">'M'</span>)</span><br><span class="line">(<span class="string">'age'</span>, <span class="string">'20'</span>)</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'tom'</span>)</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式3"><a href="#输出方式3" class="headerlink" title="输出方式3"></a>输出方式3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> k,v</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender M</span><br><span class="line">age <span class="number">33</span></span><br><span class="line">name Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式4"><a href="#输出方式4" class="headerlink" title="输出方式4"></a>输出方式4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s: %s'</span> %(k,v)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender: M</span><br><span class="line">age: <span class="number">33</span></span><br><span class="line">name: Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h2 id="字典实例"><a href="#字典实例" class="headerlink" title="字典实例"></a>字典实例</h2><ul><li>现有一个字典dict1 保存的是小写字母a-z对应的ASCII码<br>dict1 = {‘a’: 97, ‘c’: 99, ‘b’: 98, ‘e’: 101, ‘d’: 100, ‘g’: 103, ‘f’: 102, ‘i’: 105, ‘h’: 104, ‘k’: 107, ‘j’: 106, ‘m’: 109, ‘l’: 108, ‘o’: 96, ‘n’: 110, ‘q’: 113, ‘p’: 112, ‘s’: 115, ‘r’: 114, ‘u’: 117, ‘t’: 116, ‘w’: 119, ‘v’: 118, ‘y’: 121, ‘x’: 120, ‘z’: 122}<br>1） 将该字典按照ASCII码的值排序<br>2） 有一个字母的ASCII错了，修改为正确的值，并重新排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dict1 = &#123;<span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">96</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'o'</span>, <span class="number">96</span>), (<span class="string">'a'</span>, <span class="number">97</span>), (<span class="string">'b'</span>, <span class="number">98</span>), (<span class="string">'c'</span>, <span class="number">99</span>), (<span class="string">'d'</span>, <span class="number">100</span>), (<span class="string">'e'</span>, <span class="number">101</span>), (<span class="string">'f'</span>, <span class="number">102</span>), (<span class="string">'g'</span>, <span class="number">103</span>), (<span class="string">'h'</span>, <span class="number">104</span>), (<span class="string">'i'</span>, <span class="number">105</span>), (<span class="string">'j'</span>, <span class="number">106</span>), (<span class="string">'k'</span>, <span class="number">107</span>), (<span class="string">'l'</span>, <span class="number">108</span>), (<span class="string">'m'</span>, <span class="number">109</span>), (<span class="string">'n'</span>, <span class="number">110</span>), (<span class="string">'p'</span>, <span class="number">112</span>), (<span class="string">'q'</span>, <span class="number">113</span>), (<span class="string">'r'</span>, <span class="number">114</span>), (<span class="string">'s'</span>, <span class="number">115</span>), (<span class="string">'t'</span>, <span class="number">116</span>), (<span class="string">'u'</span>, <span class="number">117</span>), (<span class="string">'v'</span>, <span class="number">118</span>), (<span class="string">'w'</span>, <span class="number">119</span>), (<span class="string">'x'</span>, <span class="number">120</span>), (<span class="string">'y'</span>, <span class="number">121</span>), (<span class="string">'z'</span>, <span class="number">122</span>)]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="keyword">if</span> j != ord(i):</span><br><span class="line">        print(<span class="string">"&#123;0&#125;'s value is not correct,shoud be &#123;1&#125;"</span>.format(i, ord(i)))</span><br><span class="line">        dict1[i] = ord(i)</span><br><span class="line"><span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o<span class="string">'s value is not correct,shoud be 111</span></span><br><span class="line"><span class="string">[('</span>a<span class="string">', 97), ('</span><span class="string">b', 98), ('</span>c<span class="string">', 99), ('</span>d<span class="string">', 100), ('</span>e<span class="string">', 101), ('</span><span class="string">f', 102), ('</span>g<span class="string">', 103), ('</span>h<span class="string">', 104), ('</span>i<span class="string">', 105), ('</span>j<span class="string">', 106), ('</span>k<span class="string">', 107), ('</span>l<span class="string">', 108), ('</span>m<span class="string">', 109), ('</span>n<span class="string">', 110), ('</span>o<span class="string">', 111), ('</span>p<span class="string">', 112), ('</span>q<span class="string">', 113), ('</span><span class="string">r', 114), ('</span>s<span class="string">', 115), ('</span>t<span class="string">', 116), ('</span><span class="string">u', 117), ('</span>v<span class="string">', 118), ('</span>w<span class="string">', 119), ('</span>x<span class="string">', 120), ('</span>y<span class="string">', 121), ('</span>z<span class="string">', 122)]</span></span><br></pre></td></tr></table></figure></p><ul><li><p>用最简洁的代码，自己生成一个大写字母 A-Z 及其对应的ASCII码值的字典dict2(使用dict，zip，range方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: dict2=dict(zip(string.uppercase, range(ord(<span class="string">'A'</span>), ord(<span class="string">'Z'</span>)+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">print</span> dict2</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>将dict2与第一题排序后的dict1合并成一个dict3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: dict2.update(dict1)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dict3=dict2.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> dict3</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>, <span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">111</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典的定义&quot;&gt;&lt;a href=&quot;#字典的定义&quot; class=&quot;headerlink&quot; title=&quot;字典的定义&quot;&gt;&lt;/a&gt;字典的定义&lt;/h2&gt;&lt;p&gt;字典是python中唯一的映射类型(哈希表)。&lt;br&gt;字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="字典" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="dict" scheme="https://rosinelan.github.io/tags/dict/"/>
    
      <category term="items" scheme="https://rosinelan.github.io/tags/items/"/>
    
  </entry>
  
  <entry>
    <title>python字符串元组列表</title>
    <link href="https://rosinelan.github.io/2018/11/15/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%83%E7%BB%84%E5%88%97%E8%A1%A8/"/>
    <id>https://rosinelan.github.io/2018/11/15/python字符串元组列表/</id>
    <published>2018-11-15T02:48:21.000Z</published>
    <updated>2018-11-20T10:02:38.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>python数据类型包括数值、字符串、列表、元组和字典。</p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>数值类型包括整型、长整型、浮点型和复数型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型   <span class="number">2</span></span><br><span class="line">长整型  <span class="number">100L</span></span><br><span class="line">浮点型  <span class="number">0.0</span>, <span class="number">12.0</span>, <span class="number">-18.8</span>, <span class="number">3e+7</span></span><br><span class="line">复数型(complex)  <span class="number">-3.14j</span>, <span class="number">8.32e-36j</span></span><br></pre></td></tr></table></figure></p><a id="more"></a>  <h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串有3种定义方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'this is a string'</span></span><br><span class="line">str = <span class="string">"this is a string"</span></span><br><span class="line">str = <span class="string">'''this is a string'''</span></span><br></pre></td></tr></table></figure></p><p>此处的3引号可以是3个单引号，也可以是3个双引号，但不可混用。<br>字符串是序列的一种，可以通过切片的方式操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcde'</span></span><br><span class="line">a[<span class="number">0</span>] = a  </span><br><span class="line">a[<span class="number">-1</span>] = e  </span><br><span class="line">a[:] = abcde  </span><br><span class="line">a[:<span class="number">-1</span>] = abcd  </span><br><span class="line">a[::<span class="number">1</span>] = abcde  </span><br><span class="line">a[::<span class="number">2</span>] = ace</span><br><span class="line">a[<span class="number">-4</span>:<span class="number">-2</span>] = bc           </span><br><span class="line">a[<span class="number">-2</span>:<span class="number">-4</span>:<span class="number">-1</span>] = dc         从右向左取</span><br></pre></td></tr></table></figure></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>字符串、元组和列表都是序列。  </p><h3 id="序列的特点"><a href="#序列的特点" class="headerlink" title="序列的特点"></a>序列的特点</h3><ul><li>索引操作符<br>可以从序列中抓取一个特定的项目。  </li><li>切片操作符<br>能够获取序列的一个切片，即一部分序列。<h3 id="序列的基本操作"><a href="#序列的基本操作" class="headerlink" title="序列的基本操作"></a>序列的基本操作</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4>序列的长度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">2</span>]: len(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ul><h4 id=""><a href="#" class="headerlink" title="+"></a>+</h4><p>连接2个字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">4</span>]: a + <span class="string">'f'</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'abcdef'</span></span><br></pre></td></tr></table></figure></p><h4 id="-1"><a href="#-1" class="headerlink" title="*"></a>*</h4><p>重复序列元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="string">'#'</span> * <span class="number">10</span></span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'##########'</span></span><br></pre></td></tr></table></figure></p><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>判断元素是否在序列中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: a = <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">11</span>]: <span class="string">'a'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></span><br><span class="line">In [<span class="number">12</span>]: <span class="string">'f'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">12</span>]: <span class="keyword">False</span></span><br><span class="line">In [<span class="number">13</span>]: <span class="string">'f'</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">13</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><p>返回最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">15</span>]: max(a)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'e'</span></span><br></pre></td></tr></table></figure></p><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><p>返回最小值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: a</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'abcde'</span></span><br><span class="line">In [<span class="number">17</span>]: min(a)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><h4 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x,y)"></a>cmp(x,y)</h4><p>比较2个序列是否相等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: a</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'abcde'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: cmp(a,<span class="string">'ac'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: cmp(a,<span class="string">'abcde'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: cmp(a,<span class="string">'abcdef'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cmp(a,<span class="string">'ab'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组和字符串一样是不可变的；元组可以存储一系列的值；元组通常用在用户定义的函数能够安全的采用一组值的时候，即被使用的元组的值不会改变。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>使用括号<code>()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: t = (<span class="string">'a'</span>,<span class="number">1</span>,(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: t</span><br><span class="line">Out[<span class="number">10</span>]: (<span class="string">'a'</span>, <span class="number">1</span>, (<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: t[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><h3 id="元祖操作"><a href="#元祖操作" class="headerlink" title="元祖操作"></a>元祖操作</h3><p>见序列</p><h3 id="元组的拆分"><a href="#元组的拆分" class="headerlink" title="元组的拆分"></a>元组的拆分</h3><p>元组可用于接受函数的返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: t</span><br><span class="line">Out[<span class="number">14</span>]: (<span class="string">'abcde'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: first,second,third = t</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: first</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'abcde'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: second</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: third</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'c'</span></span><br></pre></td></tr></table></figure></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表定义"><a href="#列表定义" class="headerlink" title="列表定义"></a>列表定义</h3><p>列表使用<code>[]</code>定义。<br>列表是处理一组有序项目的数据结构；可以在列表中存储一个序列的项目；列表是可变的数据类型。</p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list1 = []</span><br><span class="line">In [<span class="number">2</span>]: list1</span><br><span class="line">Out[<span class="number">2</span>]: []</span><br><span class="line">In [<span class="number">4</span>]: list2 = list()</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list2</span><br><span class="line">Out[<span class="number">5</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: list3 = [<span class="string">'a'</span>,<span class="number">1</span>,(<span class="number">2</span>,),[<span class="string">'hello'</span>,<span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: list3</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="string">'a'</span>, <span class="number">1</span>, (<span class="number">2</span>,), [<span class="string">'hello'</span>, <span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: len(list3)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: list3[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: list3[<span class="number">0</span>] = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: len(list3)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: list3[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'b'</span></span><br></pre></td></tr></table></figure><h3 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h3><ul><li>取值<br>切片和索引的方式，和字符串的一致。</li><li><p>添加<br>list.append()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: list2</span><br><span class="line">Out[<span class="number">17</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: list2.append(<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: list2</span><br><span class="line">Out[<span class="number">19</span>]: [<span class="string">'linux'</span>]</span><br></pre></td></tr></table></figure></li><li><p>删除<br>del list[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: list3</span><br><span class="line">Out[<span class="number">24</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,), [<span class="string">'hello'</span>, <span class="string">'python'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: <span class="keyword">del</span> list3[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: list3</span><br><span class="line">Out[<span class="number">26</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,)]</span><br></pre></td></tr></table></figure></li></ul><p>list.remove(list[])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: list3</span><br><span class="line">Out[<span class="number">27</span>]: [<span class="string">'b'</span>, <span class="number">1</span>, (<span class="number">2</span>,)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: list3.remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: list3</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="string">'b'</span>, (<span class="number">2</span>,)]</span><br></pre></td></tr></table></figure></p><ul><li>修改<br>list[] = x</li><li>查找<br>var in list</li></ul><p>当然，字符串、元组和列表还有一些其他的内置方法，可以通在pycharm中通过定义一个对象，通过<code>对象.</code>方法查看了解。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><ul><li><p>将 “123” 转换成整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = int(<span class="string">"123"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> a</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure></li><li><p>将 “9999999999999999999” 转换成长整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: type(b)</span><br><span class="line">Out[<span class="number">5</span>]: long</span><br></pre></td></tr></table></figure></li><li><p>将 “3.1415926” 转换成一个浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: c = float(<span class="string">"3.1415926"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> c</span><br><span class="line"><span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: type(c)</span><br><span class="line">Out[<span class="number">8</span>]: float</span><br></pre></td></tr></table></figure></li><li><p>将 123 转换成一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: d = str(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> d</span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: type(d)</span><br><span class="line">Out[<span class="number">11</span>]: str</span><br></pre></td></tr></table></figure></li><li><p>现有以下字符串<br>字符串1：” abc deFGh&amp;<em>ijkl opq mnrst((uvwxyz “<br>字符串2：” ABC#DEF GH%IJ MNOPQ KLRS&amp;&amp;TUVWX(</em>&amp;YZ “<br>使用字符串的各种方法转换成如下方式<br>ABCDEFGHIJKLMNOPQRSTUVWXYZzyxwvutsrqponmlkjihgfedcba</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: str1=<span class="string">" abc deFGh&amp;*ijkl opq mnrst((uvwxyz "</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: str2=<span class="string">" ABC#DEF GH%IJ MNOPQ KLRS&amp;&amp;TUVWX(*&amp;YZ "</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: str11=<span class="string">""</span>.join((filter(<span class="keyword">lambda</span> x: x.isalpha(), str1))).upper()</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: str21=<span class="string">""</span>.join((filter(<span class="keyword">lambda</span> x: x.isalpha(), str2))).lower()</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="keyword">print</span> str11</span><br><span class="line">ABCDEFGHIJKLOPQMNRSTUVWXYZ</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> str21</span><br><span class="line">abcdefghijmnopqklrstuvwxyz</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="keyword">print</span> str11+str21[::<span class="number">-1</span>]</span><br><span class="line">ABCDEFGHIJKLOPQMNRSTUVWXYZzyxwvutsrlkqponmjihgfedcba</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><ul><li>现有列表<br>list1 = [‘XXXX’, ‘b’, 3, ‘c’, ‘&amp;’, ‘a’, 3, ‘3’, 3, ‘aa’, ‘3’, ‘XXXX’]<br>list2 = [‘e’, ‘f’, ‘g’]<br>要求对其做以下操作：</li></ul><ol><li>取出 ‘XXXX’ 中间的部分，形成一个新的列表list3。</li><li>对list3 做一下几部操作<br>1）删除特殊符号。<br>2）统计 3 在list3中出现的次数。<br>3）用最简短的代码去除list3中 26个字母以外的元素(要求只能对list3操作)。<br>4）对list3排序。<br>5）在末尾追加’d’,并把list2追加到list3。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list1 = [<span class="string">'XXXX'</span>, <span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'&amp;'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>, <span class="string">'XXXX'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: list2 = [<span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: list3 = list1[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'&amp;'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list3.remove(<span class="string">'&amp;'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'3'</span>, <span class="number">3</span>, <span class="string">'aa'</span>, <span class="string">'3'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> list3.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: list3=[i <span class="keyword">for</span> i <span class="keyword">in</span> list3 <span class="keyword">if</span> str(i).isalpha()]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'aa'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: list3.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: list3.append(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: list3.extend(list2)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><ul><li>现有两个变量<br>a = (‘h’,)<br>b = (‘h’)<br>1）将a和b分别追加到上一题的list3中，观察有什么区别。<br>2）将1生成的list3转换成元组(扩展：自己搜索方法)。<br>3）打印出只有一个元素’h’的元组，在2中生成的元组中的索引。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: a=(<span class="string">'h'</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: b=(<span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: list3.append(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: list3.append(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">print</span> list3</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,), <span class="string">'h'</span>]</span><br><span class="line"><span class="comment">##区别在于a是元组，b是字符串</span></span><br><span class="line">In [<span class="number">25</span>]: t3=tuple(list3)</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">print</span> t3</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'aa'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, (<span class="string">'h'</span>,), <span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: t3.index(a)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;python数据类型包括数值、字符串、列表、元组和字典。&lt;/p&gt;
&lt;h3 id=&quot;数值&quot;&gt;&lt;a href=&quot;#数值&quot; class=&quot;headerlink&quot; title=&quot;数值&quot;&gt;&lt;/a&gt;数值&lt;/h3&gt;&lt;p&gt;数值类型包括整型、长整型、浮点型和复数型。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整型   &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;长整型  &lt;span class=&quot;number&quot;&gt;100L&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;浮点型  &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-18.8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3e+7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;复数型(complex)  &lt;span class=&quot;number&quot;&gt;-3.14j&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8.32e-36j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="序列" scheme="https://rosinelan.github.io/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="字符串" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="元组" scheme="https://rosinelan.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>git安装和使用</title>
    <link href="https://rosinelan.github.io/2018/11/14/git%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/11/14/git安装和使用/</id>
    <published>2018-11-14T08:52:28.000Z</published>
    <updated>2018-11-15T01:50:19.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>centos 7安装git很简单，直接使用<code>yum install -y git</code>即可。<br>安装完成之后配置信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "rosinelan"</span><br><span class="line">git config --global user.email "mqwanghui327@hotmail.com"</span><br></pre></td></tr></table></figure></p><a id="more"></a>   <p><code>global</code>表示全局配置，所有该机器每次提交的文件默认为该用户。</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>安装完成之后创建版本库。  </p><ol><li><p>创建一个目录用于存放文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /studypy</span><br><span class="line">cd /studypy</span><br></pre></td></tr></table></figure></li><li><p>使用<code>git init</code>命令将该目录变成git可管理的仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li></ol><p>出现提示信息<code>Initialized empty Git repository in /studypy/.git/</code>说明成功初始化。<br>此时该目录下会新增一个<code>.git</code>目录，该目录是git用来跟踪管理版本库的，不可手动修改。</p><ol><li>将文件添加到版本库。<br>新建一个名字为<code>1.py</code>的文件，内容如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">num1 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line">num2 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s + %s = %s"</span> %(num1,num2,num1+num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s - %s = %s"</span> %(num1,num2,num1-num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s * %s = %s"</span> %(num1,num2,num1*num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s / %s = %s"</span> %(num1,num2,num1/num2)</span><br></pre></td></tr></table></figure></li></ol><p>该文件一定要位于<code>/studypy</code>目录下面，然后执行下面命令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add 1.py</span><br><span class="line">git commit -m "wtote a python file"</span><br></pre></td></tr></table></figure></p><p>出现提示信息<code>[master (root-commit) 1cb292d] wtote a python file 1 file changed, 10 insertions(+) create mode 100644 1.py</code>。<br><code>git add</code>为添加文件至仓库，可多次添加；<code>git commit</code>为提交文件至仓库，一次可提交多个文件，<code>-m</code>命令为添加提交文件的说明信息。  </p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><h3 id="github配置ssh连接"><a href="#github配置ssh连接" class="headerlink" title="github配置ssh连接"></a>github配置ssh连接</h3><p>注册github账号，然后配置机器和github的ssh，用于文件传输。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "mqwanghui327@hotmail.com"</span><br></pre></td></tr></table></figure></p><p>创建完成之后可以在<code>/root/.ssh/</code>目录查看公钥文件<code>id_rsa.pub</code>。<br>登录github，点击右上角头像，选择<code>Settings</code>，然后选择<code>SSH and GPG keys</code>。<br><img src="http://cdn.rosinelan.com/blog/system/git-ssh-Setting.png" alt="gti-ssh-Setting" title="git-ssh-Setting"><br>点击<code>New SSH key</code>，添加对应的公钥。<br><img src="http://cdn.rosinelan.com/blog/system/git-Newsshkey.png" alt="git-Newsshkey" title="git-Newsshkey"><br>添加之后使用下面命令测试公钥添加是否成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>若出现下面的提示信息说明添加正确。<br><code>Hi rosinelan! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><h3 id="github创建远程仓库"><a href="#github创建远程仓库" class="headerlink" title="github创建远程仓库"></a>github创建远程仓库</h3><p>接下来我们在github创建一个远程仓库，然后将远程仓库和本地仓库关联，最后将本地仓库的内容推送至远程仓库。</p><ol><li>创建远程仓库<br>在github创建新建仓库，通过右上角的<code>+</code>，选择<code>New repository</code>即可新建。<br><img src="http://cdn.rosinelan.com/blog/system/Create%20new%20repository.png" alt="Create new repository" title="Create new repository"><br>创建完成之后可以看到下面提示信息<br><img src="http://cdn.rosinelan.com/blog/system/new%20repository%20info.png" alt="new repository info" title="new repository info"></li><li>关联本地仓库<br>根据提示信息，在本地仓库<code>studypy</code>进行下面操作<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:rosinelan/studypy.git</span><br></pre></td></tr></table></figure></li></ol><p>上面操作需要在本地仓库<code>studypy</code>执行，注意切换到<code>/studypy</code>目录下。<br>此处<code>origin</code>是远程仓库的名字，git默认的叫法。  </p><ol><li>推送本地仓库至github远程仓库<br>执行下面命令将本地仓库内容推送至远程仓库。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><p>此时出现下面提示信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'52.74.223.119'</span> to the list of known hosts.</span><br><span class="line">Counting objects: <span class="number">3</span>, done.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">326</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request <span class="keyword">for</span> <span class="string">'master'</span> on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/rosinelan/studypy/pull/new/master</span><br><span class="line">remote: </span><br><span class="line">To git@github.com:rosinelan/studypy.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master <span class="keyword">from</span> origin.</span><br></pre></td></tr></table></figure></p><p>提示信息可以看出，当前推送的内容数量，还有就是推送是将本地的master分支推送至远程。<br>此处<code>git push</code>使用了参数<code>-u</code>，意思是将本地master分支推送至远程的新master分支，同时将两者关联起来，以后推送默认就是推送至master分支。第一次使用该参数，之后就不用添加参数。<br>例如：新建一个<code>README.md</code>，然后推送至远程仓库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "studypy" &gt;&gt;README.md</span><br></pre></td></tr></table></figure></p><p>本地仓库提交<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit -m "wrote readme"</span><br></pre></td></tr></table></figure></p><p>提示信息如下说明本地提交成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[master ce31753] wrote readme</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure></p><p>推送至远程仓库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>提示如下信息说明提交成功。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 280 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:rosinelan/studypy.git</span><br><span class="line">   1cb292d..ce31753  master -&gt; master</span><br></pre></td></tr></table></figure></p><p>注意：<br>假如不使用改参数将两者关联，之后的推送就需要使用下面命令进行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:master</span><br></pre></td></tr></table></figure></p><p>命令格式为<code>git push 远程主机名 本地分支名：远程分支名</code>。  </p><h2 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h2><p>假如没有本地仓库，想要直接从github拉取文件怎么办呢？远程仓库克隆。<br>首先在github创建一个远程仓库。<br><img src="http://cdn.rosinelan.com/blog/system/git-origin-creat.png" alt="git-origin-creat" title="git-origin-creat"><br>勾选初始化<code>README.md</code>文件，此时远程仓库创建完成后可以看到该文件。<br>接下来使用<code>git clone</code>克隆本地库。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">git clone git@github.com:rosinelan/studypy2.git</span><br></pre></td></tr></table></figure></p><p>进入本地的目录<code>/study2</code>，可以看到<code>README.md</code>文件。  </p><h2 id="推荐git学习资源"><a href="#推荐git学习资源" class="headerlink" title="推荐git学习资源"></a>推荐git学习资源</h2><ol><li>简明指南，快速入手 <a href="http://rogerdudler.github.io/git-guide/" target="_blank" rel="noopener">git - the simple guide</a></li><li>常用命令及最佳实践 <a href="https://blog.csdn.net/xinyan233/article/details/80593091" target="_blank" rel="noopener">git cheat sheet</a></li><li>进阶学习 <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro git book</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h2&gt;&lt;p&gt;centos 7安装git很简单，直接使用&lt;code&gt;yum install -y git&lt;/code&gt;即可。&lt;br&gt;安装完成之后配置信息&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &quot;rosinelan&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &quot;mqwanghui327@hotmail.com&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="git" scheme="https://rosinelan.github.io/tags/git/"/>
    
      <category term="仓库" scheme="https://rosinelan.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
      <category term="origin" scheme="https://rosinelan.github.io/tags/origin/"/>
    
      <category term="master" scheme="https://rosinelan.github.io/tags/master/"/>
    
  </entry>
  
  <entry>
    <title>variable of python</title>
    <link href="https://rosinelan.github.io/2018/11/14/variable-of-python/"/>
    <id>https://rosinelan.github.io/2018/11/14/variable-of-python/</id>
    <published>2018-11-14T08:51:45.000Z</published>
    <updated>2018-11-14T10:24:48.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python配置"><a href="#python配置" class="headerlink" title="python配置"></a>python配置</h2><p>默认python的编辑器并不提供补全功能，建议安装<code>ipython</code>。ipython可以通过python提供的包管理工具<code>pip</code>安装和管理。<br>具体步骤为  </p><ol><li>安装扩展源epel  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a>   <ol><li><p>安装pip  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-pip</span><br></pre></td></tr></table></figure></li><li><p>安装ipython</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython==<span class="number">5.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></li></ol><p>安装ipython的时候需要注意对应版本适配问题，例如：最新版本的ipython不适用于python2.6。  </p><h3 id="pip代理设置"><a href="#pip代理设置" class="headerlink" title="pip代理设置"></a>pip代理设置</h3><p>假如机器通过代理方式上网，可以通过设置全局代理或者添加参数方式处理。  </p><h4 id="全局代理设置"><a href="#全局代理设置" class="headerlink" title="全局代理设置"></a>全局代理设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.bash_profile</span><br><span class="line">export http_proxy=<span class="string">"http://xxxx:8888"</span></span><br><span class="line">export https_proxy=<span class="string">"https://xxxx:8888"</span></span><br></pre></td></tr></table></figure><p>然后<code>source /root/.bash_profile</code>使之生效。</p><h4 id="pip添加参数"><a href="#pip添加参数" class="headerlink" title="pip添加参数"></a>pip添加参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --proxy http://xxxx:<span class="number">8888</span> ipython</span><br></pre></td></tr></table></figure><h2 id="python文件类型"><a href="#python文件类型" class="headerlink" title="python文件类型"></a>python文件类型</h2><p>文件类型有3种，分别为源代码、字节代码和优化代码。  </p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>以<code>py</code>作为扩展名，由python程序解释，不需要编译。</p><h3 id="字节代码"><a href="#字节代码" class="headerlink" title="字节代码"></a>字节代码</h3><p>源码文件编译之后生成的扩展名为<code>pyc</code>的文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.compile(‘<span class="number">1.</span>py’)</span><br></pre></td></tr></table></figure></p><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><p>经过优化的源码文件，扩展名为<code>pyo</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -O -m py_compile <span class="number">1.</span>py</span><br></pre></td></tr></table></figure></p><p>字节代码和优化代码都可在无源码情况下直接执行；编译和优化之后的代码非文本文件，无法看到源码。  </p><h2 id="python变量"><a href="#python变量" class="headerlink" title="python变量"></a>python变量</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量是计算机内的一块区域，可以存储规定范围内的值，而且值可以改变。<br>python下变量是对一个数据的引用。<br>变量重新赋值时，会重新指向另一个地址。</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>变量名由字母、数字、下划线组成，不能以数字开头，不可以使用关键字。  </p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>赋值时变量的声明和定义的过程。<br><code>a = 1</code><br><code>id(a)</code> 内置函数，查看变量a的内存地址。<br><code>type(a)</code> 查看变量a的类型。</p><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">+=</span><br><span class="line">-+</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br></pre></td></tr></table></figure><h4 id="算符运算符"><a href="#算符运算符" class="headerlink" title="算符运算符"></a>算符运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/  除数和被除数均为整数时为整除，含有浮点数时结果含小数</span><br><span class="line">//  整除，只取整数部分</span><br><span class="line">%  取余</span><br><span class="line">**  指数运算(<span class="number">2</span>**<span class="number">3</span>==<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>返回结果为布尔值，<code>True</code>或者<code>False</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">==</span><br><span class="line">!=</span><br></pre></td></tr></table></figure></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span>  逻辑与</span><br><span class="line"><span class="keyword">or</span>  逻辑或</span><br><span class="line"><span class="keyword">not</span>  逻辑非</span><br></pre></td></tr></table></figure><h4 id="优先级列表"><a href="#优先级列表" class="headerlink" title="优先级列表"></a>优先级列表</h4><p>从上向下优先级越高，从左向右优先级越高<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Lambda</span><br><span class="line">逻辑运算：<span class="keyword">or</span></span><br><span class="line">逻辑运算：<span class="keyword">and</span></span><br><span class="line">逻辑运算：<span class="keyword">not</span></span><br><span class="line">成员测试：<span class="keyword">in</span>，<span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">同一性测试：<span class="keyword">is</span>，<span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">比较：&lt;，&lt;=，&gt;，&gt;=，!=，==</span><br><span class="line">按位或：|</span><br><span class="line">按位异或：^</span><br><span class="line">按位与：&amp;</span><br><span class="line">移位：&lt;&lt;，&gt;&gt;</span><br><span class="line">加法和减法：+，-</span><br><span class="line">乘法、除法与取余：*，/，%</span><br><span class="line">正负号：+x，-x</span><br><span class="line">按位翻转：~x</span><br><span class="line">指数：**</span><br></pre></td></tr></table></figure></p><p>表达式是将不同的数据用运算符按一定的规则连接起来。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>四则运算，从键盘读取输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">num1 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line">num2 = input(<span class="string">"Please a number:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s + %s = %s"</span> %(num1,num2,num1+num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s - %s = %s"</span> %(num1,num2,num1-num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s * %s = %s"</span> %(num1,num2,num1*num2)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s / %s = %s"</span> %(num1,num2,num1/num2)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python配置&quot;&gt;&lt;a href=&quot;#python配置&quot; class=&quot;headerlink&quot; title=&quot;python配置&quot;&gt;&lt;/a&gt;python配置&lt;/h2&gt;&lt;p&gt;默认python的编辑器并不提供补全功能，建议安装&lt;code&gt;ipython&lt;/code&gt;。ipython可以通过python提供的包管理工具&lt;code&gt;pip&lt;/code&gt;安装和管理。&lt;br&gt;具体步骤为  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装扩展源epel  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="变量" scheme="https://rosinelan.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="pip" scheme="https://rosinelan.github.io/tags/pip/"/>
    
      <category term="文件类型" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="运算符" scheme="https://rosinelan.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>install of python</title>
    <link href="https://rosinelan.github.io/2018/11/14/install-of-python/"/>
    <id>https://rosinelan.github.io/2018/11/14/install-of-python/</id>
    <published>2018-11-14T08:51:28.000Z</published>
    <updated>2018-11-20T09:17:02.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a>python介绍</h2><p>python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。<br>python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。<br>除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。<br>根据<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a>2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。<br><a id="more"></a>   </p><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><p>当前python主要使用版本有2种，分别是python2和python3，且python2.7在将来的2020年之后将失去后续支持。<br>包括centos7版本系统默认安装的python依然是2.7版本，且大多数公司依然在使用python2。<br>学习以python3为主，使用最新的语法和类库，同时掌握python2和python3的主要区别，保证代码在2个版本的兼容性。   </p><h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><p>以最新的python3.6为基础进行安装。   </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>linux系统下载源码编译安装，windows系统下载可执行文件运行安装。<br><a href="https://www.python.org" target="_blank" rel="noopener">点击</a>进入python官方网站<br>选择Downloads –&gt; All releases<br><img src="http://cdn.rosinelan.com/blog/program/python-dowload.png" alt="python-Download" title="python-Download"><br>点击<code>Download Python 3.64</code><br><img src="http://cdn.rosinelan.com/blog/program/python-v364.png" alt="python-v364" title="python-v364"><br>在新的Python 3.6.4页面下拉至Files部分<br><img src="http://cdn.rosinelan.com/blog/program/python-install.png" alt="python-install" title="python-install"><br>其中linux系统使用 <code>Gzipped source tarball</code>,<a href="https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz" target="_blank" rel="noopener">点击下载</a></p><p>64位windows使用 <code>Windows x86-64 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe" target="_blank" rel="noopener">点击下载</a></p><p>32位windwos使用 <code>Windows x86 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="在linux上安装python"><a href="#在linux上安装python" class="headerlink" title="在linux上安装python"></a>在linux上安装python</h3><p>centos系统默认会安装python2.7,现在安装最新版本python3.6。<br>centos下使用源码编译安装，步骤如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Python-3.6.4.tgz   </span><br><span class="line">cd Python-3.6.4   </span><br><span class="line">./configure --prefix=/usr/local/python364   </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>此时发现/usr/bin/python依然是原来的老版本,需要修改/usr/bin/python对应的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python_27</span><br><span class="line">ln -s /usr/local/python364/bin/python /usr/bin/python</span><br></pre></td></tr></table></figure></p><p>此时通过<code>python -v</code>命令可以看到版本为v3.6.4.<br>注意：采用此方法安装后会发现yum不可用，原因是yum使用依赖老版本python，此时需要修改<code>/usr/bin/yum</code>第一行为<code>#!/usr/bin/python_27</code>就可以了。</p><h3 id="在windows上安装python"><a href="#在windows上安装python" class="headerlink" title="在windows上安装python"></a>在windows上安装python</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击<code>python-3.6.4-amd64.exe</code>开始安装<br><img src="http://cdn.rosinelan.com/blog/program/python-win-install.png" alt="python-win-install" title="python-win-install"><br>注意要勾选<code>Add Python 3.6 tp PATH</code>,然后点<code>Install Now</code>即可完成安装。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过<code>win+R</code>打开运行，输入<code>cmd</code>，在弹出的windows命令提示符输入<code>python</code>。<br>若提示信息如下，说明python安装正确。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-test.png" alt="python-win-test" title="python-win-test"><br>若得到如下错误信息，说明安装的时候未勾选<code>Add Python 3.6 tp PATH</code><br><img src="http://cdn.rosinelan.com/blog/program/python-win-wrong.png" alt="python-win-wrong" title="python-win-wrong"><br>此时需要修改环境变量使计算机能找到python所在位置。<br>通过<code>我的电脑--&gt;右键--&gt;属性--&gt;高级系统设置--&gt;环境变量</code>，在弹出的对话框中找到用户变量/系统变量中的<code>Path</code>变量，根据python安装位置添加路径。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-path.png" alt="python-win-path" title="python-win-path"><br><img src="http://cdn.rosinelan.com/blog/program/python-win-add.png" alt="python-win-add" title="python-win-add"><br>win10系统默认安装路径如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\Scripts\   </span><br><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\</span><br></pre></td></tr></table></figure></p><p>此处建议添加到系统变量中的Path变量中，系统变量是全局变量，无论什么用户登录均可生效；用户变量只针对当前用户生效，若更换其他用户登录则不会生效。<br>若认为添加环境变量操作太复杂，建议直接重装python，记得勾选<code>Add Python 3.6 tp PATH</code>。    </p><h2 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h2><h3 id="python开发工具介绍"><a href="#python开发工具介绍" class="headerlink" title="python开发工具介绍"></a>python开发工具介绍</h3><p>安装好python环境之后，简单的使用直接使用文本编辑器即可，比较常用的有Sublime Text、Notepad++等。<br>大型项目建议使用比较专业的集成开发环境，有利于提高效率，推荐PyCharm。<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击访问官方地址</a><br>PyCharm是Python IDE for Professional Developers。高大上的开发工具，工欲善其事必先利其器嘛。专业版为收费工具，请支持正版。<br>windows版本pycharm v2017.3.4<br><a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="PyCharm使用"><a href="#PyCharm使用" class="headerlink" title="PyCharm使用"></a>PyCharm使用</h3><h4 id="设置python版本"><a href="#设置python版本" class="headerlink" title="设置python版本"></a>设置python版本</h4><p>通过File–&gt;Setting–&gt;Project:XXXX–&gt;Project Interpreter下拉框选择相应版本的python。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-version.png" alt="pycharm-set-version" title="pycharm-set-version"><br>注意：当前选择的python版本用于当前Project，这样对于同时维护或开发不同版本的python非常便捷。   </p><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>通过File–&gt;Setting–&gt;Editor–&gt;Font设置合适的字体、大小、行距。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-font.png" alt="pycharm-set-font" title="pycharm-set-font">   </p><h4 id="设置文件模板"><a href="#设置文件模板" class="headerlink" title="设置文件模板"></a>设置文件模板</h4><p>通过File–&gt;setting–&gt;Editor–&gt;Code Style–&gt;File and Code Templates–&gt;Python Script添加文件模板。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-template.png" alt="pycahrm-set-template" title="pycharm-set-template"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"># @Author  : xiaohuihui</span><br><span class="line"># @File    : $&#123;NAME&#125;.py</span><br></pre></td></tr></table></figure></p><p>其中Time为创建时间，Author为作者，File为文件名。   </p><h4 id="pycharm运行"><a href="#pycharm运行" class="headerlink" title="pycharm运行"></a>pycharm运行</h4><p>通过File–&gt;New Project创建新的项目。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-python.png" alt="pycharm-new-python" title="pycharm-new-python"><br>通过项目–&gt;右键–&gt;New Python File创建第一个python文件。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-File.png" alt="pycharm-new-file" title="pycharm-new-file"><br>python文件的运行有3种方式<br>在python文件中右键–&gt;Run ‘input’，或者使用快捷键Ctrl+Shift+F10。<br>点击左下角的绿色<code>运行</code>按钮。<br>点击右上角的绿色<code>运行</code>按钮。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-run-python.png" alt="pycharm-run-python" title="pycharm-run-python"><br>注意：左下角和右上角的<code>运行</code>按钮默认执行的为上次执行过的python文件，也就是当切换到另一个python文件时，直接点击<code>运行</code>按钮，其执行文件不是当前文件。建议使用快捷键或者右键执行的方式。<br>windows下命令行运行python文件<br>在不打开pycharm时可以运行python文件嘛？<br>只要windows安装好python环境，答案自然是肯定的。<br>在命令行中使用<code>python D:\pythondev\calculate\print.py</code>方式运行即可。<br><img src="http://cdn.rosinelan.com/blog/program/python-run-cmd.png" alt="python-run-cmd" title="python-run-cmd">   </p><h4 id="pycharm参数传递"><a href="#pycharm参数传递" class="headerlink" title="pycharm参数传递"></a>pycharm参数传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys   </span><br><span class="line">print(&quot;File name:&#123;0&#125;&quot;.format(sys.argv[0]))  </span><br><span class="line">print(&quot;First argv:&#123;0&#125;&quot;.format(sys.argv[1]))  </span><br><span class="line">print(&quot;Second argv:&#123;0&#125;&quot;.format(sys.argv[2]))</span><br></pre></td></tr></table></figure><p>上述文件位于D:\pythondev\calculate，文件名称为print.py。<br>在命令行中参数传递方式<code>python print.py xiaohh 1000</code>。<br><img src="http://cdn.rosinelan.com/blog/program/python-argv-cmd.png" alt="python-argv-cmd" title="python-argv-cmd"><br>在pycharm中如何传递参数呢？<br>直接右键执行结果如下<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-wrong.png" alt="pycharm-argv-wrong" title="pycharm-argv-wrong"><br>需要传递参数的情况下，点击右上角<code>运行</code>左边下拉框，选择<code>Edit Configurations</code>，弹出的对话框中选择对应python文件–&gt;Configuration–&gt;Parameters，输入参数，空格区分。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-right.png" alt="pycharm-argv-right" title="pycharm-argv-right">    </p><h4 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h4><p><code>Ctrl + c</code> 复制<br><code>Ctrl + x</code> 剪切<br><code>Ctrl + d</code> 复制当前行<br><code>Ctrl + /</code> 注释当前行<br><code>Ctrl + r</code> 替换<br><code>Shift + Enter</code> 换行<br><code>Alt + Enter</code> 导入包(当写出包名时，按快捷键可自动添加<code>import</code>)<br><code>Ctrl + Shift + f</code> 查找(中文输入法冲突，需关闭才能生效)<br><code>Ctrl + Shift + n</code> 查找文件<br><code>Alt + 鼠标左键</code> 块编辑<br><code>光标批量选中 + Tab</code> 整体向右移动<br><code>光标批量选中 + Shift + Tab</code> 整体向左移动<br><code>Ctrl + a,Ctrl + Alt + L</code> 格式化(和QQ锁定快捷键一致，需修改QQ锁定快捷键)<br><code>Ctrl + Alt + 方向键</code> 查找引用和依赖包时，向右方向键为前进至下一个依赖包处，向左方向键为返回上一个依赖包处(此快捷键和Intel核心显卡快捷键冲突，建议禁用intel核心显卡快捷键)   </p><h4 id="pycharm调试"><a href="#pycharm调试" class="headerlink" title="pycharm调试"></a>pycharm调试</h4><p>设置断点<br>在行号和代码中间位置点击鼠标左键即可添加断点。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-dot.png" alt="pycahrm-debug-dot" title="pycharm-debug-dot"><br>调试模式<br>点击右上角的蜘蛛图标进行调试(Debug)模式<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-start.png" alt="pycharm-debug-start" title="pycharm-debug-start"><br><code>F7</code> Step into 跳入代码<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F7.gif" alt="pycharm-debug-F7" title="pycharm-debug-F7"><br><code>F8</code> Step Over 继续下一步<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F8.gif" alt="pycharm-debug-F8" title="pycharm-debug-F8"><br><code>F9</code> Resume Program 执行到下一个断点或恢复程序<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F9.gif" alt="pycharm-debug-F9" title="pycharm-debug-F9"><br>断点是调试时快速查找代码错误最有用的方法，需要熟悉并了解不同快捷键的作用。</p><h4 id="pycharm激活"><a href="#pycharm激活" class="headerlink" title="pycharm激活"></a>pycharm激活</h4><p>一般学习下载安装免费的社区版本足够，若有较大项目开发需求，专业版的pycharm激活可以参考<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">IntelliJ IDEA 注册码</a>。</p><h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><p>ipython是命令行工具，但包含补全等功能，比python自带的命令行好用很多，推荐安装使用。<br>手动安装需要首先解决依赖问题，推荐直接yum安装。<br>python2使用下面命令直接安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install ipython -y</span><br></pre></td></tr></table></figure></p><p>python3使用下面命令安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install ipython</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;python介绍&lt;/h2&gt;&lt;p&gt;python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。&lt;br&gt;python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。&lt;br&gt;除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。&lt;br&gt;根据&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TIOBE&lt;/a&gt;2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="安装" scheme="https://rosinelan.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>django基础</title>
    <link href="https://rosinelan.github.io/2018/07/26/django%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/26/django基础/</id>
    <published>2018-07-26T09:20:00.000Z</published>
    <updated>2018-07-26T09:20:00.623Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jquery基础</title>
    <link href="https://rosinelan.github.io/2018/07/18/jquery%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/18/jquery基础/</id>
    <published>2018-07-18T03:32:58.000Z</published>
    <updated>2018-07-23T08:02:09.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h3><p>jQuery是一个JavaScript函数库，它可以完成以下操作：</p><ul><li>HTML元素选取</li><li>HTML元素操作</li><li>CSS操作<a id="more"></a></li><li>HTML事件函数</li><li>JavaScript特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX</li><li>Utilities</li></ul><p>那么如何使用jQuery库呢？<br>jQuery库其实就在一个JavaScript文件中，其中包含了所有的jQuery函数。通过下面的标记就可以将jQuery添加到网页。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>jQuery的下载可以点击<a href="http://jquery.com/download/" target="_blank" rel="noopener">jQuery</a>从官网下载。<br>要是不想在本地计算机存放Jquery库，也可以从Google或者Microsoft加载CDN jQuery文件，具体使用方式如下。<br>使用Google的CDN<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs</span></span></span><br><span class="line"><span class="tag"><span class="string">/jquery/1.4.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用Microsoft的CDN<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://ajax.microsoft.com/ajax/jquery</span></span></span><br><span class="line"><span class="tag"><span class="string">/jquery-1.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><p>基础语法是<code>$(selector).action()</code>。  </p><ul><li><code>$</code>符号定义jQuery</li><li><code>selector</code>查询或查找HTML元素</li><li><code>action()</code>执行对元素的操作</li></ul><p>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).hide() <span class="comment">//隐藏当前元素</span></span><br><span class="line">$(<span class="string">"p"</span>).hide()  <span class="comment">//隐藏所有段落</span></span><br><span class="line">$(<span class="string">".test"</span>).hide()  <span class="comment">//隐藏所有class="test”的元素</span></span><br><span class="line">$(<span class="string">"#test"</span>).hide()  <span class="comment">//隐藏所有id="test"的元素</span></span><br></pre></td></tr></table></figure></p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>jQuery元素选择器和属性选择器允许通过标签名、属性名或内容对HTML元素进行选择。<br>选择器允许对HTML单个元素进行操作。  </p><ul><li><p>jQuery元素选择器<br>jQuery使用呢CSS选择器来选取HTML元素。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>)  <span class="comment">//选取&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">"p.intro"</span>)  <span class="comment">//选取所有class="intro"的&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">"p#demo"</span>)  <span class="comment">//选取所有id="demo"的&lt;p&gt;元素</span></span><br></pre></td></tr></table></figure></li><li><p>jQuery属性选择器<br>jQuery使用XPath表达式选择带有给定属性的元素。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"[href]"</span>)  <span class="comment">//选取所有带有href属性的元素</span></span><br><span class="line">$(<span class="string">"[href='#']"</span>)  <span class="comment">//选取所有带有href值等于"#"的元素</span></span><br><span class="line">$(<span class="string">"[href!='#']"</span>)  <span class="comment">//选取所有带有href值不等于"#"的元素</span></span><br><span class="line">$(<span class="string">"[href='.jpg']"</span>)  <span class="comment">//选取所有href值以.jpg结尾的元素</span></span><br></pre></td></tr></table></figure></li><li><p>jQuery CSS选择器<br>jQuery CSS选择器可用于改变HTML元素的CSS属性。<br>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);  <span class="comment">//所有p元素的背景颜色修改为红色</span></span><br></pre></td></tr></table></figure></li></ul><p>关于选择器有更多的内容，可以点击<a href="http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp" target="_blank" rel="noopener">jQuery 参考手册 - 选择器</a>查看。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li>jQuery 事件函数<br>jQuery事件处理方法是jQuery中的核心函数。<br>通常会把jQuery代码放到<code>&lt;head&gt;</code>部分的事件处理方法中。<br>示例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).read(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>))</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"p"</span>).hide();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>当按钮的点击事件被触发时会调用一个函数，该方法隐藏所有的<code>&lt;p&gt;</code>元素。  </p><ul><li>常用的事件方法<br><code>$(document).ready()</code><br>允许在文档完全加载完成后执行函数。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(docunment).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//jQuery代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>上述写法简化为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//jQuery代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>click()</code><br>当按钮点击事件被触发时调用一个函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>当点击事件在某个<code>&lt;p&gt;</code>元素出发时，隐藏当前的<code>&lt;p&gt;</code>元素。<br><code>dbclick()</code><br>双击元素时，会发生dbclick事件。此时将调用对应函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).dbclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>focus()</code><br>当元素获得焦点时，发生focus事件。<br>focus()方法出发focus事件，或规定发生focus事件时运行的函数。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input"</span>).foucs(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>,<span class="string">"#cccccc"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>更多关于jQuery事件可以点击<a href="http://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank" rel="noopener">jQuery 参考手册 - 事件</a>查看介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jQuery简介&quot;&gt;&lt;a href=&quot;#jQuery简介&quot; class=&quot;headerlink&quot; title=&quot;jQuery简介&quot;&gt;&lt;/a&gt;jQuery简介&lt;/h3&gt;&lt;p&gt;jQuery是一个JavaScript函数库，它可以完成以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML元素选取&lt;/li&gt;
&lt;li&gt;HTML元素操作&lt;/li&gt;
&lt;li&gt;CSS操作
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="jquery" scheme="https://rosinelan.github.io/tags/jquery/"/>
    
      <category term="查询" scheme="https://rosinelan.github.io/tags/%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="操作" scheme="https://rosinelan.github.io/tags/%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>css基础</title>
    <link href="https://rosinelan.github.io/2018/07/17/css%E5%9F%BA%E7%A1%80/"/>
    <id>https://rosinelan.github.io/2018/07/17/css基础/</id>
    <published>2018-07-17T07:52:14.000Z</published>
    <updated>2018-07-23T08:01:57.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h3><p>CSS指层叠样式表，是<code>Cascading Style Sheets</code>的缩写。<br>样式定义了如何显示HTML元素，通常存储在样式表中，使用样式解决了内容和表扬分离的问题。<br>使用外部样式表可以极大提高工作效率，通常存储在CSS文件中，多个样式定义可层叠为一。<br>同一个元素被多个样式定义时的优先级(其中数字4拥有最高的优先权)：<br><a id="more"></a></p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表(位于<code>&lt;head&gt;</code>标签内部)</li><li>内联样式(在HTML元素内部)<h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4>CSS规则主要由2个部分构成：选择器以及一条或多条声明。  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;declaration1; declaration2;... declarationN&#125;</span><br></pre></td></tr></table></figure></li></ol><p>选择器通常是需要改变样式的HTML元素。<br>每条元素由一个属性和一个值组成。属性是希望设置的样式属性，每个属性有一个值，属性和值使用冒号分开。<br>下面代码的作用是将h1元素内的文字颜色定义为红色，字体大小设置为14px。选择器是<code>h1</code>，属性是<code>color</code> <code>font-size</code> 值是<code>red</code> <code>14px</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h4><p>对选择器进行分组，这样被分组的选择器可以分享相同的声明。用逗号将需要分组的选择器分开。<br>下面代码对所有标签元素进行分组，所有标题元素都是绿色的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><ul><li>派生选择器<br>通过依据元素在其位置的上下文关系类定义样式。<br>例如：假如希望列表中的strong元素变为斜体，可以这样定义一个派生选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是粗体字，不是斜体字，因为我不在列表当中，所以这个规则对我不起作用<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是斜体字。这是因为 strong 元素位于 li 元素内。<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是正常的字体。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有<code>li</code>元素中的<code>strong</code>元素样式为斜体，无需为strong元素定义特别的class或id，代码更加整洁。  </p><ul><li>id选择器<br>id选择器可以为标有特定id的HTML元素指定特定的样式。id选择器以<code>#</code>定义。<br>下面示例中的id选择器，第一个定义元素颜色为红色，第二个定义元素颜色为绿色。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-id">#green</span> &#123;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在下面的HTML代码中，id属性为red的p元素显示为红色，id属性为green的p元素显示为绿色。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span>这个段落是红色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span>这个段落是绿色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>类选择器<br>类选择器以<code>.</code>定义。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>: center&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面的示例表示所有用于center类的HTML元素均为居中。<br>下面的示例中，h1和p元素都有center类，豆浆遵守<code>.center</code>选择器的规则。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">This heading will be center-aligned</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">This paragraph will also be center-aligned.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>属性选择器<br>对带有指定属性的HTML元素设置样式，不仅仅限于class和id属性。<br>下面示例为带有title属性的所有元素设置样式。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>也可以指定属性的值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title=hello]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还包括下面一些属性和值的对一个关系。<br>|选择器|描述|<br>|-|:-|<br>[attribute]|用于选取带有指定属性的元素<br>[attribute=value]|用于选取带有指定属性和值的元素<br>[attribute~=value]|用于选取属性值中包含指定词汇的元素<br>[attribute|=value]|用于选取带有以指定值开头的属性值的元素，该值必须是整个单词<br>[attribute^=value]|匹配属性值以指定值开头的每个元素<br>[attribute$=value]|匹配属性值以指定值结尾的每个元素<br>[attribute*=value]|匹配属性值中包含指定值的每个元素</p><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用<code>background-color</code>属性为元素设置背景色。可为所有元素设置背景色，但是不能继承，其默认值为<code>transparent</code>，也就是透明。<br>下面的示例将元素背景色设置为灰色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">background-color</span>: gray;&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-image</code>属性将图像放入背景。默认值为none。不能继承。<br>下面示例为段落应用了一个背景<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.flower</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(/i/eg_bg_03.gif);&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-repeat</code>属性对背景图像进行平铺。<br>属性值 repeat 导致图像在水平垂直方向上都平铺，就像以往背景图像的通常做法一样。repeat-x 和 repeat-y 分别导致图像只在水平或垂直方向上重复，no-repeat 则不允许图像在任何方向上平铺。<br>默认将从一个元素的左上角开始。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/i/eg_bg_03.gif);</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>background-position</code>属性改变图像在背景中的位置。该属性对应的值有多种。  </p><ol><li>关键字，top/bottom/left/right/center。</li><li>长度值，100px/5cm</li><li>百分数，50%/70%<br>示例：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    background-position: center;    居中</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 50%;    居中</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50px</span> 100<span class="selector-tag">px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后一个表示图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上。<br>使用<code>background-attachment</code>属性表示图像是否随着文档滚动而滚动，属性值有<code>fixed</code> <code>scroll</code>。其中<code>scroll</code>为默认值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> </span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(/i/eg_bg_02.gif);</span><br><span class="line">  <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><h3 id="CSS框模型"><a href="#CSS框模型" class="headerlink" title="CSS框模型"></a>CSS框模型</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS概述&quot;&gt;&lt;a href=&quot;#CSS概述&quot; class=&quot;headerlink&quot; title=&quot;CSS概述&quot;&gt;&lt;/a&gt;CSS概述&lt;/h3&gt;&lt;p&gt;CSS指层叠样式表，是&lt;code&gt;Cascading Style Sheets&lt;/code&gt;的缩写。&lt;br&gt;样式定义了如何显示HTML元素，通常存储在样式表中，使用样式解决了内容和表扬分离的问题。&lt;br&gt;使用外部样式表可以极大提高工作效率，通常存储在CSS文件中，多个样式定义可层叠为一。&lt;br&gt;同一个元素被多个样式定义时的优先级(其中数字4拥有最高的优先权)：&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="css" scheme="https://rosinelan.github.io/tags/css/"/>
    
      <category term="语法" scheme="https://rosinelan.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="选择器" scheme="https://rosinelan.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>html基础(二)</title>
    <link href="https://rosinelan.github.io/2018/07/17/html%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/07/17/html基础-二/</id>
    <published>2018-07-17T07:52:01.000Z</published>
    <updated>2018-07-23T08:01:42.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无须列表"><a href="#无须列表" class="headerlink" title="无须列表"></a>无须列表</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记。<br>无序列表始于<code>&lt;ul&gt;</code>标签。每个列表项始于<code>&lt;li&gt;</code>。<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下</p><p><ul></ul></p><p><li>Coffee</li></p><p><li>Milk</li><br><br>列表项内部也可以使用换行符、图片、链接及其他列表等。  </p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表也是一列项目，列表项目使用数字进行标记。<br>有序列表始于<code>ol</code>标签。每个列表项始于<code>li</code>标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下</p><p><ol></ol></p><p><li>Coffee</li></p><p><li>Milk</li><br><br>列表项内部也可以使用换行符、图片、链接及其他列表等。 </p><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>自定义列表以<code>&lt;dl&gt;</code>标签开始。每个自定义列表项以<code>&lt;dt&gt;</code>开始。每个自定义列表项的定义以<code>&lt;dd&gt;</code>开始。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示结果如下  </p><p><dl></dl></p><p><dt>Coffee</dt></p><p><dd>Black hot drink</dd></p><p><dt>Milk</dt></p><p><dd>White cold drink</dd><br><br>定义列表的列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格由<code>&lt;table&gt;</code>标签定义。每个表格均有若干行(由<code>&lt;tr&gt;</code>标签定义)，每行被分割为若干单元格(由<code>&lt;td&gt;</code>标签定义)。<br>单元格可以包含文本、图片、表格等。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>显示如下</p><table><br><tr><br><td>row 1, cell 1</td><br><td>row 1, cell 2</td><br></tr><br><tr><br><td>row 2, cell 1</td><br><td>row 2, cell 2</td><br></tr><br></table><p>其他属性</p><ul><li>显示边框使用<code>border</code>属性。</li><li>表头使用<code>&lt;th&gt;</code>标签定义。</li><li>合并行使用<code>rowspan</code>。</li><li>和并列使用<code>colspan</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>55577854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>55577855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>55577854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>55577855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示如下<br>列合并</p><table border="1"><br><tr><br><th>姓名</th><br><th colspan="2">电话</th><br></tr><br><tr><br><td>Bill Gates</td><br><td>55577854</td><br><td>55577855</td><br></tr><br></table><br>行合并<br><table border="1"><br><tr><br>  <th>姓名</th><br>  <td>Bill Gates</td><br></tr><br><tr><br>  <th rowspan="2">电话</th><br>  <td>55577854</td><br></tr><br><tr><br>  <td>55577855</td><br></tr><br></table><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>HTML表单用于搜集不同用户类型的用户输入。使用<code>&lt;form&gt;</code>定义HTML表单。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">form elements</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表单中包括的元素有<code>input元素</code> <code>复选框</code> <code>单选按钮</code> <code>提交按钮</code>等。  </p><ul><li>input元素<br><code>&lt;input&gt;</code>元素根据不同的type属性，有很多形态。<br><code>&lt;input type=&quot;text&quot;&gt;</code>定义用于文本输入的单行输入字段。<br><code>&lt;input type=&quot;radio&quot;&gt;</code>定义单选按钮，允许用户在有限数量的选项中选择其中之一。<br><code>&lt;select&gt;</code>定义下拉列表，<code>option</code>定义具体列表项，<code>size</code>表示下拉列表可见项的数目。<br><code>&lt;input type=&quot;submit&quot;&gt;</code>定义用于向表单处理程序提交表单的按钮。通常包含用来处理输入数据的脚本的服务器页面。处理程序在表单的action属性中指定。  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"action_page.php"</span>&gt;</span></span><br><span class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">value</span>=<span class="string">"Mickey"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">value</span>=<span class="string">"Mouse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Gender:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span>Male</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Education:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>postgraduate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>junior college student<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>technical secondary school<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>显示如下</p><form action="action_page.php"><br>First name:<br><br><input type="text" name="firstname" value="Mickey"><br><br><br>Last name:<br><br><input type="text" name="lastname" value="Mouse"><br><br><br>Gender:<br><br><input type="radio" name="sex" value="male" checked>Male<br><br><br><input type="radio" name="sex" value="female">Female<br><br><br>Education:<br><br><select name="list" size="3"><br><option>postgraduate</option><br><option>undergraduate</option><br><option>junior college student</option><br><option>technical secondary school</option><br></select><br><br><br><input type="submit" value="Submit"><br></form>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;h4 id=&quot;无须列表&quot;&gt;&lt;a href=&quot;#无须列表&quot; class=&quot;headerlink&quot; title=&quot;无须列表&quot;&gt;&lt;/a&gt;无须列表&lt;/h4&gt;&lt;p&gt;无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记。&lt;br&gt;无序列表始于&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;标签。每个列表项始于&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="web" scheme="https://rosinelan.github.io/categories/program/web/"/>
    
    
      <category term="html" scheme="https://rosinelan.github.io/tags/html/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="表格" scheme="https://rosinelan.github.io/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>saltstack结合ansible实战</title>
    <link href="https://rosinelan.github.io/2018/07/11/saltstack%E7%BB%93%E5%90%88ansible%E5%AE%9E%E6%88%98/"/>
    <id>https://rosinelan.github.io/2018/07/11/saltstack结合ansible实战/</id>
    <published>2018-07-11T10:21:04.000Z</published>
    <updated>2018-07-11T11:18:12.044Z</updated>
    
    <content type="html"><![CDATA[<p>通过<code>saltstack</code>模块调用，结合<code>ansible</code>实现2台服务器之间免密钥登录，同时安装<code>minion</code>端。<br>适用场景：已存在安装<code>saltstack</code>的<code>master</code>端，新上线服务器，需安装<code>minion</code>端加入至<code>master</code>。<br><a id="more"></a><br>在master端事先生成密钥对，写好免密钥登录和安装<code>minion</code>端脚本。脚本统一放在<code>/srv/salt/_shell</code>。  </p><ol><li>免密钥配置脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /srv/salt/_shell/installpub.sh   </span><br><span class="line"><span class="built_in">cd</span> /root/</span><br><span class="line"><span class="built_in">umask</span> 077</span><br><span class="line"><span class="built_in">test</span> -d .ssh || mkdir .ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'xxxx'</span> &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ol><p>注意此处<code>.ssh</code>目录权限为700，<code>authorized_keys</code>文件权限为600或700。</p><ol><li><p>安装配置minion端脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /srv/salt/_shell/minionid.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum install -y salt-minion</span><br><span class="line"><span class="comment">#ip=`ifconfig | grep -w 'inet' |grep -v grep |awk ` #根据不同版本centos获取方式不一样</span></span><br><span class="line">ip=ifconfig eth0|grep inet|awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">sed -i <span class="string">'s/^#master:salt/master: 19.168.145.130/'</span> /etc/salt/minion</span><br><span class="line">sed -i <span class="string">'s/^#id:.*/id: $ip/'</span> /etc/salt/minion</span><br></pre></td></tr></table></figure></li><li><p>客户端代码<br><code>saltapi.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaltServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.token = self.getToken()</span><br><span class="line">        print(self.token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        url =  <span class="string">"http://192.168.48.137:8000/login"</span></span><br><span class="line">        headers = &#123;<span class="string">"Accept"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"password"</span>: <span class="string">"saltapi"</span>,</span><br><span class="line">            <span class="string">"eauth"</span>: <span class="string">"pam"</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = self.session.post(url=url, headers=headers, data=data)</span><br><span class="line">        text = res.text</span><br><span class="line">        result = json.loads(text)</span><br><span class="line">        token = result.get(<span class="string">"return"</span>)[<span class="number">0</span>].get(<span class="string">"token"</span>)</span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runModules</span><span class="params">(self, minionid, fun, arg=None)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.48.137:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"local"</span>,</span><br><span class="line">            <span class="string">"tgt"</span>: minionid,</span><br><span class="line">            <span class="string">"fun"</span>: fun,</span><br><span class="line">            <span class="string">"arg"</span>: arg</span><br><span class="line">        &#125;</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url,  data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"success"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"failed"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runRunner</span><span class="params">(self, fun, **kwargs)</span>:</span></span><br><span class="line">        url = <span class="string">"http://192.168.48.137:8000"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"client"</span>: <span class="string">"runner"</span>,</span><br><span class="line">            <span class="string">"fun"</span>: fun,</span><br><span class="line">        &#125;</span><br><span class="line">        data.update(kwargs)</span><br><span class="line">        print(data)</span><br><span class="line">        resultBean = dict()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = self.session.post(url=url,  data=data)</span><br><span class="line">            text = res.text</span><br><span class="line">            data = json.loads(text).get(<span class="string">"return"</span>)</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"success"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resultBean[<span class="string">'code'</span>] = <span class="number">1</span></span><br><span class="line">            resultBean[<span class="string">'message'</span>] = <span class="string">"failed"</span></span><br><span class="line">            resultBean[<span class="string">'data'</span>] = e</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">return</span> resultBean</span><br></pre></td></tr></table></figure></li><li><p>位于<code>master</code>端，位置为<code>/srv/salt/__runner/masterApp.py</code>，提供具体执行方法<br><code>masterApp.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publicKey</span><span class="params">(ipaddr)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'/tmp/&#123;0&#125;.txt'</span>.format(ipaddr), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"&#123;0&#125; ansible_ssh_pass=123456"</span>.format(ipaddr))</span><br><span class="line">    resultBean = dict()</span><br><span class="line">    cmd = <span class="string">"ansible -i /tmp/&#123;0&#125;.txt all -m script -a '/srv/salt/_shell/installpub.sh'"</span>.format(ipaddr)</span><br><span class="line">    status, output = commands.getstatusoutput(cmd)</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">        resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">        resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">        resultBean[<span class="string">'data'</span>] = output</span><br><span class="line">        <span class="keyword">return</span> json.dumps(resultBean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">installMinionid</span><span class="params">(ipaddr)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> codecs.open(<span class="string">'/tmp/&#123;0&#125;.txt'</span>.format(ipaddr), <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"&#123;0&#125; ansible_ssh_pass=123456"</span>.format(ipaddr))</span><br><span class="line">    resultBean = dict()</span><br><span class="line">    cmd = <span class="string">"ansible -i /tmp/&#123;0&#125;.txt all -m script -a '/srv/salt/_shell/minionid.sh'"</span>.format(ipaddr)</span><br><span class="line">    status, output = commands.getstatusoutput(cmd)</span><br><span class="line">    <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">        resultBean[<span class="string">'code'</span>] = <span class="number">0</span></span><br><span class="line">        resultBean[<span class="string">'message'</span>] = <span class="string">'success'</span></span><br><span class="line">        resultBean[<span class="string">'data'</span>] = output</span><br><span class="line">        <span class="keyword">return</span> json.dumps(resultBean)</span><br></pre></td></tr></table></figure></li></ol><p>最后在客户端调用测试<br><code>test.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> saltstack_api.util.saltapi <span class="keyword">import</span> SaltServer</span><br><span class="line"></span><br><span class="line">saltServer = SaltServer()</span><br><span class="line">result1 = saltServer.runRunner(<span class="string">'masterApp.publicKey'</span>, ipaddr=<span class="string">'192.168.48.133'</span>)</span><br><span class="line">print(result1)</span><br><span class="line">result2 = saltServer.runRunner(<span class="string">'masterApp.installMinionid'</span>, ipaddr=<span class="string">'192.168.48.133'</span>)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过&lt;code&gt;saltstack&lt;/code&gt;模块调用，结合&lt;code&gt;ansible&lt;/code&gt;实现2台服务器之间免密钥登录，同时安装&lt;code&gt;minion&lt;/code&gt;端。&lt;br&gt;适用场景：已存在安装&lt;code&gt;saltstack&lt;/code&gt;的&lt;code&gt;master&lt;/code&gt;端，新上线服务器，需安装&lt;code&gt;minion&lt;/code&gt;端加入至&lt;code&gt;master&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="ansible" scheme="https://rosinelan.github.io/tags/ansible/"/>
    
      <category term="saltstack" scheme="https://rosinelan.github.io/tags/saltstack/"/>
    
      <category term="minion" scheme="https://rosinelan.github.io/tags/minion/"/>
    
  </entry>
  
</feed>
