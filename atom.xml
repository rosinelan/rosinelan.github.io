<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2019-01-14T11:45:31.038Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cmdb之需求分析逻辑梳理</title>
    <link href="https://rosinelan.github.io/2019/01/14/cmdb%E4%B9%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/"/>
    <id>https://rosinelan.github.io/2019/01/14/cmdb之需求分析逻辑梳理/</id>
    <published>2019-01-14T10:35:25.000Z</published>
    <updated>2019-01-14T11:45:31.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>管理的机器数量达到一定的量级，使用 excel 管理非常的不方便，而且在进行发布/监控/堡垒机等管理的时候也会很麻烦。<br><a id="more"></a><br>此时就需要 CMDB 进行资产管理，同时其他的发布/监控/堡垒机可以通过调用 CMDB 对应的 API 进行响应的操作，而不需要每次手工输入 IP 地址等操作。  </p><ul><li>需求1 资产管理<br>资产管理也就是代替 excel 的功能，根据 excel 的内容，可以初步梳理出需要保存的信息，例如<br>硬件类型 环境 部署的应用 来源 ip地址(内网、外网) 主机名 内存 CPU 硬盘 内核 操作系统 ecs_name 标识_name  上线状态 区域/城市</li></ul><p>上述类型其实也就是我们数据库中需要保存的相应字段，通过 <code>models.py</code> 定义即可。<br>磁盘表示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disk</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"><span class="string">'''磁盘'''</span></span><br><span class="line">path = models.CharField(max_length=<span class="number">64</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'挂载路径'</span>)</span><br><span class="line">size = models.CharField(max_length=<span class="number">64</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'磁盘大小/G'</span>)</span><br><span class="line">remarks = models.CharField(max_length=<span class="number">64</span>, blank=<span class="keyword">True</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'备注'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.zise</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">verbose_name_plural = <span class="string">'磁盘表'</span></span><br></pre></td></tr></table></figure></p><ul><li>需求2 其他系统交互<br>通常使用 jenkins 发布，使用 zabbix 监控， 使用 jumpserver 做堡垒机。  </li></ul><p>以 jenkins 发布为例<br>每次发布对应的主机 IP 地址不需要从 excel 获取，直接通过应用的类别，调用 CMDB 提供的 API 查询得到主机 ip 地址进行发布，其他类似，方便快捷。  </p><h3 id="逻辑梳理"><a href="#逻辑梳理" class="headerlink" title="逻辑梳理"></a>逻辑梳理</h3><p>需要实现数据录入、数据展示、数据更新。  </p><ol><li>数据录入和更新<br>资产管理系统实现基础的增删改查功能，少量数据可以通过页面录入。<br>更多的数据通过 client 工具，使用定时任务的方式更新，定时检查所有服务器信息，若有新增和变更则录入，若无则不变更。<br>变更需要保留日志，可追溯查看变更过程。<br>客户端工具可以使用 saltstack 或者 ansible 实现，对于公有云可以通过调用提供的 API 查询数据。<br>所有数据的变更都通过后台管理系统统一接口连接数据库进行数据更新，不开多个口子，保证数据准确和一致。  </li><li>数据展示<br>所有增删改查都可以通过页面进行操作，所有信息都可以通过页面进行查询得到。<br>数据变更记录可以追溯查看。<br>更新数据可以选择通过手动在页面更新，也可以选择定时任务自动更新。  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h3&gt;&lt;p&gt;管理的机器数量达到一定的量级，使用 excel 管理非常的不方便，而且在进行发布/监控/堡垒机等管理的时候也会很麻烦。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="cmdb" scheme="https://rosinelan.github.io/tags/cmdb/"/>
    
      <category term="需求分析" scheme="https://rosinelan.github.io/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    
      <category term="逻辑梳理" scheme="https://rosinelan.github.io/tags/%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Django + Uwsgi + Nginx 生产部署</title>
    <link href="https://rosinelan.github.io/2019/01/07/Django-Uwsgi-Nginx-%E7%94%9F%E4%BA%A7%E9%83%A8%E7%BD%B2/"/>
    <id>https://rosinelan.github.io/2019/01/07/Django-Uwsgi-Nginx-生产部署/</id>
    <published>2019-01-07T12:09:54.000Z</published>
    <updated>2019-01-07T13:11:00.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>django自带的测试服务器，生产环境在安全和稳定性等方面都会存在问题，在生产环境采用比较多的部署方式是 <code>nginx+uwsgi</code> 部署。<br><a id="more"></a><br>nginx作为前端服务器，负责接收所有的请求。对于静态文件，nginx就可以处理，支持高并发。<br>对于动态请求，nginx 交给 uWSGI 服务器处理。uWSGI 是实现了uwsgi 和 WSGI 两种协议的web服务器，uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information）。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>基础安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br><span class="line">yum intall nginx</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></p><p>保证<code>nginx</code>可以正常访问，<code>django</code> 项目可以通过网页正常访问<br><code>settings.py</code> 文件中修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Allow_host =[<span class="string">'172.16.0.1'</span>, <span class="string">'localhost'</span>,]</span><br></pre></td></tr></table></figure></p><p>安装好之后在 settigs.py 文件的同级目录下，增加配置文件 <code>uwsgi.ini</code>  </p><h4 id="uwsgi配置文件"><a href="#uwsgi配置文件" class="headerlink" title="uwsgi配置文件"></a>uwsgi配置文件</h4><p>more uwsgi.ini<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">chdir=/mnt/www/pachong<span class="comment">#项目目录</span></span><br><span class="line">module=CMDB.wwsgi:application<span class="comment">#指定项目的application</span></span><br><span class="line">socket=/mnt/www/django_uwsgi.sock<span class="comment">#指定sock文件路径</span></span><br><span class="line"><span class="comment"># socket=127.0.0.1:3309#也可以使用端口</span></span><br><span class="line"><span class="comment">#http=127.0.0.1:3309#作为单独服务器可以使用 http</span></span><br><span class="line">workers=<span class="number">4</span><span class="comment">#指定进程数</span></span><br><span class="line">pidfile=/mnt/www/uwsgi.pid</span><br><span class="line">http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span><span class="comment">#指定IP 端口</span></span><br><span class="line">static-map=/static = /mnt/www/pkcong/arry/static<span class="comment">#指定静态文件</span></span><br><span class="line">uid=root</span><br><span class="line">gid=root<span class="comment">#指定启动的用户名和组</span></span><br><span class="line">master=true<span class="comment">#启用主进程</span></span><br><span class="line">vacuum=true<span class="comment">#自动移除unix socket和pid文件 服务终止时</span></span><br><span class="line">thunder-lock=true<span class="comment">#序列化接受的内容 如果可能的话</span></span><br><span class="line">enable-thread=true<span class="comment">#启用线程</span></span><br><span class="line">harakiri=<span class="number">30</span><span class="comment">#设置自中断时间</span></span><br><span class="line">post-buffering=<span class="number">4096</span><span class="comment">#设置缓冲</span></span><br><span class="line">daemonize=/mnt/www/django_uwsgi.log<span class="comment">#设置日志目录</span></span><br></pre></td></tr></table></figure></p><p>启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure></p><h4 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h4><p>默认配置文件位于 /etc/nginx/conf/nginx.conf， 可以通过 nginx -t 查看<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    location /media &#123;</span><br><span class="line">    alias /path/to/project/media;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">    alias /mnt/www/pachong/arya/static;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    uwsgi_pass unix:///mnt/www/django_uwsgi.sock;#和前面uwsgi一致，可以为ip+端口</span><br><span class="line">    include uwsgi_params;</span><br><span class="line">    uwsgi_read_timeout 30;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来启动 nginx，然后访问 nginx 监听的 80 端口即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;django自带的测试服务器，生产环境在安全和稳定性等方面都会存在问题，在生产环境采用比较多的部署方式是 &lt;code&gt;nginx+uwsgi&lt;/code&gt; 部署。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="nginx" scheme="https://rosinelan.github.io/tags/nginx/"/>
    
      <category term="uwsgi" scheme="https://rosinelan.github.io/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>django进阶之中间件</title>
    <link href="https://rosinelan.github.io/2019/01/05/django%E8%BF%9B%E9%98%B6%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://rosinelan.github.io/2019/01/05/django进阶之中间件/</id>
    <published>2019-01-05T01:20:04.000Z</published>
    <updated>2019-01-05T02:20:15.225Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>下面是一个用户请求的执行顺序<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户请求 --&gt; 接受请求的中间件(process_request) --&gt; url --&gt; view --&gt; </span><br><span class="line">orm --&gt; templates --&gt; 返回请求的中间件(process_response)</span><br></pre></td></tr></table></figure></p><p>用户请求首先通过中间件，按照 <code>settings.py</code> 中 列表 <code>MIDDLEWARE</code> 顺序执行，执行完成后才继续后面的内容  </p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>用户登录验证，设置白名单，不需要登录验证</li><li>日志记录</li><li>对请求的 header 的处理，例如：非法IP地址</li></ul><h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><ol><li><p>需要在 settings.py 中的 MIDDLEWARE 中注册<br><code>md.middleware.MiddlewareDemo1</code><br>其中 md.middleware 为路径， MiddlewareDemo1 为对应的类  </p></li><li><p>定义的类实现两个方法<br><code>def process_request(self, request)</code><br>当该方法遇到 return 时，将不会执行下面的内容，直接被截断<br><code>def process_response(self, request, response)</code><br>该方法必须返回 response</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>md/middleware.py</code> 自定义中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from django.utils.deprecation import MiddlewareMixin</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect, HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">white_li = [<span class="string">'/login'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            response = self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareDemo1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'demo1_middleware_process_request'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">'PATH_INFO'</span>) <span class="keyword">in</span> white_li:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request.session.get(<span class="string">'login'</span>):</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'demo1_middleware_process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li></ol><ul><li>在新版本的 django 中<code>MiddlewareMixin</code>不存在，所以此处建议重写该类，避免兼容性问题  </li><li><code>white_li</code> 为定义的白名单列表，可将不需要验证 session 的页面写入，例如登录页面就不需要验证  </li></ul><p><code>settings.py</code> 注册自定义中间件的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'md.middleware.MiddlewareDemo1'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h3&gt;&lt;h4 id=&quot;执行顺序&quot;&gt;&lt;a href=&quot;#执行顺序&quot; class=&quot;headerlink&quot; title=&quot;执行顺序&quot;&gt;&lt;/a&gt;执行顺序&lt;/h4&gt;&lt;p&gt;下面是一个用户请求的执行顺序&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="MIDDLEWARE" scheme="https://rosinelan.github.io/tags/MIDDLEWARE/"/>
    
      <category term="中间件" scheme="https://rosinelan.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>django进阶之form表单</title>
    <link href="https://rosinelan.github.io/2019/01/03/django%E8%BF%9B%E9%98%B6%E4%B9%8Bform%E8%A1%A8%E5%8D%95/"/>
    <id>https://rosinelan.github.io/2019/01/03/django进阶之form表单/</id>
    <published>2019-01-03T14:47:57.000Z</published>
    <updated>2019-01-03T15:28:28.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="form-表单"><a href="#form-表单" class="headerlink" title="form 表单"></a>form 表单</h3><p>form 表单主要2个功能，用户输入验证和生成HTML标签<br><a id="more"></a></p><h4 id="用户输入验证"><a href="#用户输入验证" class="headerlink" title="用户输入验证"></a>用户输入验证</h4><ol><li>字段是否为空</li><li>字段格式是否正确</li><li>自定义验证，例如：用户两次输入的密码是否一致</li></ol><p>例如：用户注册页面，实现用户名/密码的验证<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    username = fields.CharField(</span><br><span class="line">        required=<span class="keyword">True</span>,</span><br><span class="line">        min_length=<span class="number">3</span>,</span><br><span class="line">        max_length=<span class="number">6</span>,</span><br><span class="line">        error_messages=&#123;<span class="string">"required"</span>: <span class="string">"用户名不能为空"</span>&#125;,</span><br><span class="line">        widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'c1'</span>&#125;)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><p>通过自定义类，继承 <code>Form</code> 表单，类属性就是对应 <code>models</code> 字段，建议两者一致<br>CharField 表示字段类型(还有其他类型,例如整型、日期、浮点型、IP地址等)<br>required 表示是否必填<br>error_messages 错误提示信息  </p><h4 id="生成标签"><a href="#生成标签" class="headerlink" title="生成标签"></a>生成标签</h4><p>主要针对 <code>templates</code> 模板，可以自动生成标签;提供 css 接口，通过选择器自定义样式<br><code>widgets</code><br>textinput 表示类型(还有其他类型，例如单选、多选等)<br><code>attr</code> 中的 class c1 表示该文本框中定义的css name=c1(可以定义其他属性)  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>用户注册页面，输入用户名和密码，密码需要二次确认，均不允许为空<br><code>models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">"用户名"</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">"密码"</span>)</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^register/'</span>, views.register),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> fields</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    username = fields.CharField(</span><br><span class="line">        required=<span class="keyword">True</span>,</span><br><span class="line">        min_length=<span class="number">3</span>,</span><br><span class="line">        max_length=<span class="number">6</span>,</span><br><span class="line">        error_messages=&#123;<span class="string">"required"</span>: <span class="string">"用户名不能为空"</span>&#125;,</span><br><span class="line">        widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'c1'</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">    password = fields.CharField(</span><br><span class="line">        min_length=<span class="number">4</span>,</span><br><span class="line">        max_length=<span class="number">8</span>,</span><br><span class="line">        error_messages=&#123;<span class="string">'required'</span>: <span class="string">'密码不能为空'</span>&#125;,</span><br><span class="line">        widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'c1'</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">    pwd_confirm = fields.CharField(</span><br><span class="line">        min_length=<span class="number">4</span>,</span><br><span class="line">        max_length=<span class="number">8</span>,</span><br><span class="line">        error_messages=&#123;<span class="string">'required'</span>: <span class="string">'密码不能为空'</span>&#125;,</span><br><span class="line">        widget=widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'c1'</span>&#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pwd = self.cleaned_data[<span class="string">'password'</span>]</span><br><span class="line">        pwd_confirm = self.cleaned_data[<span class="string">'pwd_confirm'</span>]</span><br><span class="line">        <span class="keyword">if</span> pwd == pwd_confirm:</span><br><span class="line">            <span class="keyword">del</span> self.cleaned_data[<span class="string">'pwd_confirm'</span>]</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.add_error(<span class="string">'pwd_confirm'</span>, ValidationError(<span class="string">'密码输入不一致'</span>))</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">    <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        form = RegisterForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():     <span class="comment"># 验证表单是否符合规则</span></span><br><span class="line">            models.UserInfo.objects.create(**form.cleaned_data)</span><br><span class="line">            print(form.cleaned_data[<span class="string">'pwd'</span>])</span><br><span class="line">            print(form.cleaned_data[<span class="string">'pwd_confirm'</span>])</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'注册成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>说明<br><code>form.is_valid()</code> 处会验证用户输入是否符合自定义类中各个属性的规则<br>调用 <code>is_valid()</code> 方法后会执行 <code>clean()</code> 方法，自定义的验证方法可以重写 clean() 方法实现<br>自定义的错误提示信息可以通过 <code>add_error()</code> 方法传入<br><code>cleaned_data</code> 中保存表单所有 post 的数据  </li></ul><p><code>templates/register.html</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form method=<span class="string">"post"</span> novalidate&gt;</span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        &lt;p&gt;用户名：&#123;&#123; form.username &#125;&#125; &#123;&#123; form.errors.username.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;密码：&#123;&#123; form.password &#125;&#125; &#123;&#123; form.errors.password.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;确认密码：&#123;&#123; form.pwd_confirm &#125;&#125; &#123;&#123; form.errors.pwd_confirm.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><code>form.errors</code> 保存所有的错误信息，若无则不显示，若有则根据 key 确定显示的位置</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;form-表单&quot;&gt;&lt;a href=&quot;#form-表单&quot; class=&quot;headerlink&quot; title=&quot;form 表单&quot;&gt;&lt;/a&gt;form 表单&lt;/h3&gt;&lt;p&gt;form 表单主要2个功能，用户输入验证和生成HTML标签&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="form" scheme="https://rosinelan.github.io/tags/form/"/>
    
      <category term="表单" scheme="https://rosinelan.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="验证" scheme="https://rosinelan.github.io/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>CBV及CBV登录验证</title>
    <link href="https://rosinelan.github.io/2019/01/02/CBV%E5%8F%8ACBV%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <id>https://rosinelan.github.io/2019/01/02/CBV及CBV登录验证/</id>
    <published>2019-01-02T10:38:05.000Z</published>
    <updated>2019-01-02T11:53:21.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CBV实现登录验证"><a href="#CBV实现登录验证" class="headerlink" title="CBV实现登录验证"></a>CBV实现登录验证</h3><p>通过 CBV 继承的 View 源码，可以看到通过调用 as_view 中的 view 方法，最后返回的是对应类的 <code>self.dispatch(request, *, **)</code>。<br><a id="more"></a><br>那么可以在调用 dispatch 之前做一个 session 验证，实现登录验证。<br><code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^index_demo'</span>, views.Index.as_view()),</span><br><span class="line">    url(<span class="string">r'^login_demo'</span>, views.CBV.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Auth</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">'login'</span>, <span class="keyword">False</span>):</span><br><span class="line">            response = super(Auth, self).dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span><span class="params">(Auth)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'Index'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBV</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># self.dispatch()</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="keyword">False</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码不能为空'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_obj = models.UserInfo.objects.filter(username=username, password=password)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user_obj.first():  <span class="comment"># 登录成功</span></span><br><span class="line">                request.session[<span class="string">'login'</span>] = user_obj.first().name  <span class="comment"># 创建session</span></span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/session'</span>)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 登录失败</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码错误'</span>)</span><br></pre></td></tr></table></figure></p><p><code>templates/login.html</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;form method=<span class="string">"post"</span>&gt;</span><br><span class="line">            用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">            密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><ul><li>实现效果<br>直接访问 <a href="http://127.0.0.1:8000/index_demo" target="_blank" rel="noopener">http://127.0.0.1:8000/index_demo</a> ，跳转至登录页面。<br>通过 <a href="http://127.0.0.1:8000/login_demo" target="_blank" rel="noopener">http://127.0.0.1:8000/login_demo</a> 登录成功之后再访问<a href="http://127.0.0.1:8000/index_demo，直接显示" target="_blank" rel="noopener">http://127.0.0.1:8000/index_demo，直接显示</a> Index 。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CBV实现登录验证&quot;&gt;&lt;a href=&quot;#CBV实现登录验证&quot; class=&quot;headerlink&quot; title=&quot;CBV实现登录验证&quot;&gt;&lt;/a&gt;CBV实现登录验证&lt;/h3&gt;&lt;p&gt;通过 CBV 继承的 View 源码，可以看到通过调用 as_view 中的 view 方法，最后返回的是对应类的 &lt;code&gt;self.dispatch(request, *, **)&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="CBV" scheme="https://rosinelan.github.io/tags/CBV/"/>
    
      <category term="CBV登录验证" scheme="https://rosinelan.github.io/tags/CBV%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>django FBV CBV及序列化工具</title>
    <link href="https://rosinelan.github.io/2018/12/29/django-FBV-CBV%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <id>https://rosinelan.github.io/2018/12/29/django-FBV-CBV及序列化工具/</id>
    <published>2018-12-29T02:54:03.000Z</published>
    <updated>2018-12-29T03:20:39.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h3><p>FBV 是对应的 function(函数)，也就是前面在<code>views.py</code>中进行逻辑处理时定义的函数<br><a id="more"></a></p><h3 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h3><p>CBV 是对应的 class(类)， 也就是在<code>views.py</code>中进行逻辑处理时定义的类<br>CBV 中 django 会封装一些方法，可以直接定义 get/post 方法，然后通过 dispatch 自动调用  </p><ul><li>示例</li></ul><p><code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^cbv_index'</span>, views.CBV.as_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View   <span class="comment">#CBV</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBV</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># self.dispatch()   # 可通过dispatch查看定义方法</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="keyword">False</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码不能为空'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_obj = models.UserInfo.objects.filter(username=username, password=password)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user_obj.first():  <span class="comment"># 登录成功</span></span><br><span class="line">                request.session[<span class="string">'login'</span>] = user_obj.first().name  <span class="comment"># 创建session</span></span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/session'</span>)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 登录失败</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码错误'</span>)</span><br></pre></td></tr></table></figure></p><p>和前面的登录方法相比，不需要自己判断 <code>request.method</code>判断是 post/get 方法，django 已经进行了封装处理。  </p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>进行数据处理的时候，可以通过 <code>json.dumps</code>方法将字典等类型转换成字符串类型处理<br>对于数据库查询得到的 queryset 类型，无法通过 json.dump 方法处理，可以使用 <code>serializers.serialize</code> 方法处理<br><code>json</code>处理示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">'Andy'</span>: <span class="string">'123'</span>, <span class="string">'Bob'</span>: <span class="string">'456'</span>&#125;</span><br><span class="line"><span class="keyword">return</span> HttpResponse(json.dumps(dic))</span><br></pre></td></tr></table></figure></p><p><code>serializers</code>处理示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_obj = models.UserInfo.objects.filter(username=username, password=password)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(serializers.serialize(<span class="string">"json"</span>,user_obj))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FBV&quot;&gt;&lt;a href=&quot;#FBV&quot; class=&quot;headerlink&quot; title=&quot;FBV&quot;&gt;&lt;/a&gt;FBV&lt;/h3&gt;&lt;p&gt;FBV 是对应的 function(函数)，也就是前面在&lt;code&gt;views.py&lt;/code&gt;中进行逻辑处理时定义的函数&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="CBV" scheme="https://rosinelan.github.io/tags/CBV/"/>
    
      <category term="FBV" scheme="https://rosinelan.github.io/tags/FBV/"/>
    
      <category term="序列化" scheme="https://rosinelan.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="serializers" scheme="https://rosinelan.github.io/tags/serializers/"/>
    
  </entry>
  
  <entry>
    <title>django cookie和session</title>
    <link href="https://rosinelan.github.io/2018/12/28/django-cookie%E5%92%8Csession/"/>
    <id>https://rosinelan.github.io/2018/12/28/django-cookie和session/</id>
    <published>2018-12-28T10:01:06.000Z</published>
    <updated>2018-12-29T02:16:03.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>网站访问一般都是基于 http 协议， http 协议无状态(也就是同一浏览器多次访问服务器，服务器都会当做第一次访问处理)，但是对于用户登录之类的情况又需要保持状态，这就是需要 cookie 的原因。<br><a id="more"></a></p><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li>工作原理<br>服务器生成内容，浏览器访问服务器之后会保存到客户端本地；再次访问服务器时，浏览器会自动带上 cookie，这样服务器就能通过 cookie 的内容判断是谁访问。  </li><li>缺陷<br>cookie 本身最大支持 4096 字节，保存在客户端，有可能被拦截或窃取，安全性不能保证。  </li></ul><p>为了解决 cookie 存在的问题，出现了 session，支持更多的字节，同时保存在服务器端，保证安全性。  </p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>session 保存在服务器端，浏览器访问的时候服务器无法区分到底是谁，此时通过 cookie + session 就可以区分。<br>每一个客户端 cookie 分配一个唯一的 id， 用户在访问的时候通过 cookie，服务端就可以区分访问者。然后根据不同 cookie 的 id，在服务端保存一段时间的私密信息。  </p><h3 id="认证应用"><a href="#认证应用" class="headerlink" title="认证应用"></a>认证应用</h3><p>使用 cookie + session 配合，可以实现页面登录才能进入后台页面。  </p><ul><li>认证机制<br>使用浏览器访问登录页面，通过认证之后，服务器端发送一组随机的字符串到浏览器保存，这个就是 cookie。<br>服务器端也会存储当前用户的状态信息，这种存储是类似字典的形式存放，字典的唯一 key 就是刚才发给用户的唯一的 cookie 值。  </li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><code>models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^test/'</span>, views.Test),</span><br><span class="line">    url(<span class="string">r'^session/'</span>, views.Session),</span><br><span class="line">    url(<span class="string">r'^del_session/'</span>, views.Del_Se),</span><br><span class="line">    url(<span class="string">r'^login/'</span>, views.login_demo),</span><br><span class="line">    url(<span class="string">r'^index/'</span>, views.index_demo),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Session</span><span class="params">(request)</span>:</span></span><br><span class="line">    get_sesson = request.session.get(<span class="string">'login'</span>, <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> get_sesson:</span><br><span class="line">        cookie_content = request.COOKIES</span><br><span class="line">        session_ceontent = request.session</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'session.html'</span>, locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Del_Se</span><span class="params">(request)</span>:</span></span><br><span class="line">    request.session.clear()</span><br><span class="line">    get_session = request.session.get(<span class="string">'login'</span>, <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(get_session))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_demo</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>, <span class="keyword">False</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>, <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码不能为空'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_obj = models.UserInfo.objects.filter(username=username, password=password)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user_obj.first():    <span class="comment">#登录成功</span></span><br><span class="line">                request.session[<span class="string">'login'</span>] = user_obj.first().name    <span class="comment">#创建session</span></span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'/session'</span>)</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment">#登录失败</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">'用户名密码错误'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_demo</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.session.get(<span class="string">'login'</span>, <span class="keyword">False</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'欢迎登录阿铭python系统'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/login'</span>)</span><br></pre></td></tr></table></figure></p><p><code>login.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>session.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>cookie内容&#123;&#123; cookie_content &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>session内容&#123;&#123; session_ceontent &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;网站访问一般都是基于 http 协议， http 协议无状态(也就是同一浏览器多次访问服务器，服务器都会当做第一次访问处理)，但是对于用户登录之类的情况又需要保持状态，这就是需要 cookie 的原因。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="cookie" scheme="https://rosinelan.github.io/tags/cookie/"/>
    
      <category term="session" scheme="https://rosinelan.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>django 分页</title>
    <link href="https://rosinelan.github.io/2018/12/28/django-%E5%88%86%E9%A1%B5/"/>
    <id>https://rosinelan.github.io/2018/12/28/django-分页/</id>
    <published>2018-12-28T01:58:00.000Z</published>
    <updated>2018-12-28T02:03:57.479Z</updated>
    
    <content type="html"><![CDATA[<p>django 提供自己封装的分页控件，可供使用<br>下面示例<br><a id="more"></a><br><code>models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure></p><p><code>urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^test/'</span>, views.Test),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>/demo01/views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator,EmptyPage,PageNotAnInteger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test</span><span class="params">(request)</span>:</span></span><br><span class="line">    data_obj_li = models.UserInfo.objects.all()</span><br><span class="line">    p = Paginator(data_obj_li, <span class="number">2</span>)   <span class="comment">#每一页显示几条</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"数据总数"</span>, p.count)</span><br><span class="line">    print(<span class="string">"数据页数"</span>, p.num_pages)</span><br><span class="line">    print(<span class="string">"数据页数范围"</span>, p.page_range)</span><br><span class="line">    print(<span class="string">"是否有下一页"</span>, p.page(<span class="number">2</span>).has_next())</span><br><span class="line">    print(<span class="string">"是否有上一页"</span>, p.page(<span class="number">2</span>).has_previous())</span><br><span class="line">    print(<span class="string">"是否有其他页码"</span>, p.page(<span class="number">2</span>).has_other_pages())</span><br><span class="line">    print(<span class="string">"下一页的页码"</span>, p.page(<span class="number">2</span>).next_page_number())</span><br><span class="line">    print(<span class="string">"上一页的页码"</span>, p.page(<span class="number">2</span>).previous_page_number())</span><br><span class="line"></span><br><span class="line">    get_page = int(request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data_obj_li = p.page(get_page)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        data_obj_li = p.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        data_obj_li = p.page(p.num_pages)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'test.html'</span>, locals())</span><br></pre></td></tr></table></figure></p><p><code>templates/test.html</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;thread&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;人名&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thread&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &#123;% <span class="keyword">for</span> item <span class="keyword">in</span> data_obj_li %&#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; item.username &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; item.password &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul class="paginator" id ="page"&gt;</span><br><span class="line">        &#123;% <span class="keyword">if</span> data_obj_li.has_previous %&#125;</span><br><span class="line">            &lt;li class="previous"&gt;&lt;a href="/test/?page="&#123;&#123; data_obj_li.previous_page_number &#125;&#125;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li class="previous disabled"&gt;&lt;a href="#"&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% <span class="keyword">for</span> num <span class="keyword">in</span> p.page_range %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> num == get_page %&#125;</span><br><span class="line">                &lt;li class="item active"&gt;&lt;a href="/test/?page= &#123;&#123; num &#125;&#125;"&gt;&#123;&#123; num &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">                &lt;li class="item"&gt;&lt;a href="/test/?page=&#123;&#123; num &#125;&#125;"&gt;&#123;&#123; num &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;% <span class="keyword">if</span> data_obj_li.has_next %&#125;</span><br><span class="line">            &lt;li class="next"&gt;&lt;a href="/test/?page=&#123;&#123; data_obj_li.next_page_number &#125;&#125;"&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li class="next disabled"&gt;&lt;a href="#"&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django 提供自己封装的分页控件，可供使用&lt;br&gt;下面示例&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="分页" scheme="https://rosinelan.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>django进阶之条件查询FQ查询</title>
    <link href="https://rosinelan.github.io/2018/12/26/django%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2FQ%E6%9F%A5%E8%AF%A2/"/>
    <id>https://rosinelan.github.io/2018/12/26/django进阶之条件查询FQ查询/</id>
    <published>2018-12-26T02:10:28.000Z</published>
    <updated>2018-12-26T02:36:14.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>可以通过双下划线方式进行一些条件查询(以 userinfo 表示例)</p><ul><li><p>查询 id 大于 1 且小于 5 的数据</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(id__lt=<span class="number">5</span>, id__gt=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询 id 在指定列表中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(id__in=[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br></pre></td></tr></table></figure></li><li><p>查询 id 不包括在指定列表中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.exclude(id__in=[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br></pre></td></tr></table></figure></li><li><p>查询 name 中包含 ven 的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(name__contains=<span class="string">"ven"</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询 name 中包含 ven 的数据(大小写不敏感)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(name__icontains=<span class="string">"ven"</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询 id 在 1 和 2 之间的数据(效果类似于 <code>between and</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(id__range=[<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>查询以指定字符串开头的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(name__startswith=<span class="string">"andy"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>类似的查询<br><code>istartswith</code>  查询以指定字符串开头的数据，大小写不敏感<br><code>endswith</code>  查询以指定字符串结尾的数据<br><code>iendswith</code>  查询以指定字符串结尾的数据，大小写不敏感  </p><h3 id="惰性机制"><a href="#惰性机制" class="headerlink" title="惰性机制"></a>惰性机制</h3><p>查询结果返回的是一个<code>queryset</code>，但它并不会马上执行 sql ，等到调用<code>queryset</code>的时候才执行 sql 查询</p><ul><li>queryset 特点</li></ul><ol><li>可迭代<br> 通过 for 循环读取每一行对象</li><li>支持切片<br> 通过类似列表的切片功能处理数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj_li = models.UserInfo.objects.all() <span class="comment">#返回结果为QuerySet list，可迭代</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> obj_li:</span><br><span class="line">    print(item.name, item.username)</span><br><span class="line">print(obj_li)</span><br><span class="line">print(obj_li[<span class="number">1</span>])</span><br><span class="line">print(obj_li[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(obj_li[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li></ol><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Andy Andy</span><br><span class="line">Bob Bob</span><br><span class="line">Cinder Cinder</span><br><span class="line">ddd ddd</span><br><span class="line">多对多测试 test</span><br><span class="line">&lt;QuerySet [&lt;UserInfo: Andy&gt;, &lt;UserInfo: Bob&gt;, &lt;UserInfo: Cinder&gt;, &lt;UserInfo: ddd&gt;, &lt;UserInfo: 多对多测试&gt;]&gt;</span><br><span class="line">Bob</span><br><span class="line">[&lt;UserInfo: Bob&gt;, &lt;UserInfo: Cinder&gt;]</span><br><span class="line">[&lt;UserInfo: 多对多测试&gt;, &lt;UserInfo: ddd&gt;, &lt;UserInfo: Cinder&gt;, &lt;UserInfo: Bob&gt;, &lt;UserInfo: Andy&gt;]</span><br></pre></td></tr></table></figure></p><p>前5行为迭代查询的结果<br>第6行为打印出的 obj_li ，结果为 QuerySet list<br>第7行为切片[1]，取的QuerySet 中的第2个结果(列表索引从0开头是)<br>第8行为切片[1:3]<br>第9行为切片[::-1]，其实就是倒序功能  </p><ul><li>queryset 实践</li></ul><ol><li>QuerySet 是惰性的，使用的时候添加过滤条件</li><li>要真正从数据库获取数据，可以遍历 queryset 或者使用 if queryset ，总是用到数据时就会执行 sql</li><li>queryset 具有 cache。当你遍历 queryset 时，所有匹配的记录从数据库获取，然后转换成 django 的 model，这被称为执行。这些 model 会保存在 queryset 的 cache 中，这样如果你再次遍历这个 queryset，不需要重复运行通过的查询</li><li>简单的使用 if 语句进行判断也会完全执行整个 queryset 将数据放入 cache,当不需要这些数据时，为了避免这个，可以用 exists() 方法检查是否有数据</li><li>queryset 非常巨大时， cache 会成为问题。成千上万的数据装入内存很浪费，可能造成程序崩溃，为避免在遍历数据时候产生 queryset cache，可以使用 iterator() 方法来获取数据，处理完数据就将其丢弃。</li></ol><ul><li>总结<br>queryset的cache是用于减少程序对数据库的查询，在通常的使用下会保证只有在需要的时候才会查询数据库。<br>使用exists()和iterator()方法可以优化程序对内存的使用。不过，由于它们并不会生成queryset cache，可能会造成额外的数据库查询<h3 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a>F查询</h3>主要针对数字进行处理<br>例如：下面是针对 userinfo 表中的 password 字段都加 1000<br>对于可以转换成 int 格式的，直接加 1000， 不能转换成 int 格式的，该字段会直接更新成 1000  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">models.UserInfo.objects.update(password=F(<span class="string">"password"</span>)+<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h3><p>导入 Q 查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br></pre></td></tr></table></figure></p><p>Q查询可以对关键字进行封装，从而更好的应用多个查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(Q(username__contains=<span class="string">"d"</span>)).all()</span><br></pre></td></tr></table></figure></p><p>可以使用 <code>&amp;</code>  <code>,</code>  <code>|</code> 操作符，当一个操作符用户用于两个 Q 对象，它产生一个新的 Q 对象<br><code>&amp;</code>  <code>,</code>  表示与<br><code>|</code> 表示或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(Q(username=<span class="string">"Cinder"</span>) | Q(password=<span class="string">"3123"</span>))</span><br></pre></td></tr></table></figure></p><p>Q对象也可以用 <code>~</code> 操作符放在前面表示否定，也可以否定和不否定的形式组合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(~Q(username=<span class="string">"Andy"</span>) &amp; Q(password=<span class="string">"3123"</span>))</span><br></pre></td></tr></table></figure></p><p>Q对象可以和关键字查询一起使用，但Q对象放在关键字参数查询的前面<br>关键字参数和位置参数同时存在，位置参数应该在前<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.UserInfo.objects.filter(Q(password=<span class="string">"3123"</span>), name__startswith=<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;条件查询&quot;&gt;&lt;a href=&quot;#条件查询&quot; class=&quot;headerlink&quot; title=&quot;条件查询&quot;&gt;&lt;/a&gt;条件查询&lt;/h3&gt;&lt;p&gt;可以通过双下划线方式进行一些条件查询(以 userinfo 表示例)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查询 id 大于 1 且小于 5 的数据&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="条件查询" scheme="https://rosinelan.github.io/tags/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="惰性机制" scheme="https://rosinelan.github.io/tags/%E6%83%B0%E6%80%A7%E6%9C%BA%E5%88%B6/"/>
    
      <category term="F查询" scheme="https://rosinelan.github.io/tags/F%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="Q查询" scheme="https://rosinelan.github.io/tags/Q%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>django进阶之ORM多表关联增删改查</title>
    <link href="https://rosinelan.github.io/2018/12/25/django%E8%BF%9B%E9%98%B6%E4%B9%8BORM%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://rosinelan.github.io/2018/12/25/django进阶之ORM多表关联增删改查/</id>
    <published>2018-12-25T09:44:41.000Z</published>
    <updated>2018-12-26T02:13:36.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库模型介绍"><a href="#数据库模型介绍" class="headerlink" title="数据库模型介绍"></a>数据库模型介绍</h3><p>school 和 class 之间创建的是一对多关系，通过外键对象 <code>sch</code> 关联<br><a id="more"></a><br>userinfo 和 class 之间是多对多的关系，通过 <code>ManyToManyField</code> 创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    sch = models.ForeignKey(to=<span class="string">'School'</span>, default=<span class="number">1</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    user = models.ManyToManyField(to=<span class="string">'UserInfo'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>以 school 和 class 之间的操进行示例</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>通过 <code>class</code> 名称得到查询结果，然后通过关联的 <code>sch</code> 进行查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj_li = models.Class.objects.filter(name=<span class="string">"class 1"</span>) <span class="comment">#QuerySet list</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> obj_li:</span><br><span class="line">    print(obj.name, obj.sch.name)</span><br></pre></td></tr></table></figure></p><p>查询结果肯定只有1条，可以通过 <code>first()</code> 直接得到对象，不用循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = models.Class.objects.filter(name=<span class="string">"class 1"</span>).first()   <span class="comment">#QuertSet</span></span><br><span class="line">print(obj.name, obj.sch.name)</span><br></pre></td></tr></table></figure></p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>首先创建 school 对象，得到对应的 id， 然后创建 class ，在创建 class 的时候通过 <code>sch</code> 传入参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.create(name=<span class="string">"aming_go"</span>)</span><br><span class="line">class_obj = models.Class.objects.create(name=<span class="string">"go_1期"</span>, sch=obj)</span><br><span class="line">print(class_obj.sch.name)</span><br></pre></td></tr></table></figure></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.Class.objects.filter(name=<span class="string">"class 1"</span>).delete()</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>注意此处的下划线为两个，操作是针对2张表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">models.Class.objects.filter(sch__name=<span class="string">"aming_linux"</span>).update(name=<span class="string">"10期linux"</span>)</span><br><span class="line">models.Class.objects.filter(sch__name=<span class="string">"aming_linux"</span>).delete()</span><br></pre></td></tr></table></figure></p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>以 userinfo 和 class 之间的操作进行示例</p><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"python_24"</span>).first()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> class_obj.user.all():</span><br><span class="line">    print(item.username, item.name)</span><br></pre></td></tr></table></figure><p>多对多的新增、删除、修改都是通过 <code>add()</code> <code>remove()</code> <code>clear()</code> 方法的组合完成<br>由于操作涉及到3个表，所以肯定需要首先得到两个表的对象，然后再进行操作  </p><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p><code>add()</code>方法传入的参数2种都可以，分别是 <code>id</code> 或者 <code>*object</code><br>新增数据然后关联<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"python_24"</span>).first()</span><br><span class="line">user_obj = models.UserInfo.objects.create(name=<span class="string">"多对多测试"</span>, username=<span class="string">"test"</span>)</span><br><span class="line">class_obj.user.add(user_obj.id)</span><br></pre></td></tr></table></figure></p><p>查询数据然后关联<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"python_24"</span>).first()</span><br><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>)</span><br><span class="line">class_obj.user.add(*user_obj)</span><br></pre></td></tr></table></figure></p><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"python_24"</span>).first()</span><br><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>)</span><br><span class="line">class_obj.user.remove(*user_obj)</span><br></pre></td></tr></table></figure><h4 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h4><p>更新操作是首先查询，然后删除(使用 delete 或者 clear 均可)，最后增加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"python_24"</span>).first()</span><br><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>)</span><br><span class="line">class_obj.user.clear()</span><br><span class="line">class_obj.user.add(*user_obj)</span><br></pre></td></tr></table></figure></p><p>上述操作都是正向查找，也就是通过主表的信息查询子表，当已知子表的信息查询主表的信息，就是反向查找<br>下面反向查找</p><h3 id="反向查找"><a href="#反向查找" class="headerlink" title="反向查找"></a>反向查找</h3><h4 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>).first()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_obj.class_set.all():   <span class="comment">#类名的小写_set</span></span><br><span class="line">    print(item.name)</span><br></pre></td></tr></table></figure><h4 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>).first()</span><br><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"go_1期"</span>)</span><br><span class="line">user_obj.class_set.add(*class_obj)</span><br></pre></td></tr></table></figure><h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>).first()</span><br><span class="line">class_obj = models.Class.objects.filter(name=<span class="string">"go_1期"</span>)</span><br><span class="line">user_obj.class_set.remove(*class_obj)</span><br></pre></td></tr></table></figure><h4 id="更新-2"><a href="#更新-2" class="headerlink" title="更新"></a>更新</h4><p>也是先查询，然后删除，最后增加  </p><h4 id="related-name"><a href="#related-name" class="headerlink" title="related_name"></a>related_name</h4><p>反向查找需要使用 <code>类名的小写_set</code> 方式比较麻烦，可以使用 <code>related_name</code> 进行简化  </p><ol><li><p>在 models.py 中添加 <code>related_name</code> 参数<br>变更仅涉及 ManyToManyField 的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    sch = models.ForeignKey(to=<span class="string">'School'</span>, default=<span class="number">1</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    user = models.ManyToManyField(to=<span class="string">'UserInfo'</span>, related_name=<span class="string">'caluser'</span>)</span><br></pre></td></tr></table></figure></li><li><p>更新数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">pyton manage.py migrate</span><br></pre></td></tr></table></figure></li><li><p>查找示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_obj = models.UserInfo.objects.filter(name=<span class="string">"Bob"</span>).first()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_obj.caluser.all():</span><br><span class="line">    print(item.name)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库模型介绍&quot;&gt;&lt;a href=&quot;#数据库模型介绍&quot; class=&quot;headerlink&quot; title=&quot;数据库模型介绍&quot;&gt;&lt;/a&gt;数据库模型介绍&lt;/h3&gt;&lt;p&gt;school 和 class 之间创建的是一对多关系，通过外键对象 &lt;code&gt;sch&lt;/code&gt; 关联&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="ORM" scheme="https://rosinelan.github.io/tags/ORM/"/>
    
      <category term="多对多" scheme="https://rosinelan.github.io/tags/%E5%A4%9A%E5%AF%B9%E5%A4%9A/"/>
    
      <category term="一对多" scheme="https://rosinelan.github.io/tags/%E4%B8%80%E5%AF%B9%E5%A4%9A/"/>
    
      <category term="增删改查" scheme="https://rosinelan.github.io/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>django进阶之ORM单表增删改查</title>
    <link href="https://rosinelan.github.io/2018/12/24/django%E8%BF%9B%E9%98%B6%E4%B9%8BORM%E5%8D%95%E8%A1%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://rosinelan.github.io/2018/12/24/django进阶之ORM单表增删改查/</id>
    <published>2018-12-24T09:01:49.000Z</published>
    <updated>2018-12-24T09:56:29.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认情况下，django 使用 sqlite 作为数据库，相关的配置文件在项目的 <code>settings.py</code>文件 <code>DATABASES</code> 中配置。<br><a id="more"></a><br>使用 mysql，配置示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>, </span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'books'</span>,    <span class="comment">#你的数据库名称</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,   <span class="comment">#你的数据库用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment">#你的数据库密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment">#你的数据库主机，留空默认为localhost</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>, <span class="comment">#你的数据库端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开项目前需要保证 mysql 数据库已经安装且服务处于运行状态。<br>项目运行之后可能会出现 <code>no module named MySQLdb</code>报错信息  </p><ul><li>原因<br>  默认情况下使用的是 MySQLdb 驱动，但是对 python3 的支持不太好，所以需要改用 PyMySQL</li><li>处理<br>安装 PyMySQL 驱动，然后在项目文件的 <code>__init__.py</code>里面写入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h3><p>建表相关操作在 <code>models.py</code>文件中定义，首先要导入 <code>from django.db import models</code>。<br>默认情况下将会在表中创建字段<code>id</code>  </p><ul><li>字段类型<br><code>CharFileld</code>、<code>IntegerField</code>、<code>URLField</code>、<code>EmailField</code>、<code>BooleanField</code>、<code>DateField</code><br>对于 <code>URLField</code>、<code>EmailField</code>等 数据库不存在的数据类型， django 会对输入的类型进行正则匹配的检查，确保符合相关标准。  </li><li>参数<br>null    表示是否允许为空<br>blank  通过 admin 管理页面<br>verbose_name    字段的显示名称<br>default 默认值<br>max_length 字段最大长度</li><li>表之间关系<br>ForeignKey 外键，将会在<code>to=</code>指定的表中添加一个字段，存放该表的主键。<br>下面的示例，将会在 <code>class</code>表中添加字段<code>sch_id</code>，保存的为 <code>schopl</code>表的<code>id</code>值<br>OneToOneField   一对一，将会在该表中添加一个字段，存放<code>to=</code>指定表的主键<br>下面的示例，将会在<code>number</code>表中添加字段<code>num_id</code>，同时会为<code>num_id</code>添加一个唯一索引<br>ManyToManyField 多对多，将会新建一个表，用于存放该表和<code>to=</code>指定表的主键<br>下面的示例，将会在<code>class</code>和<code>userinfo</code>之外再新建一个表<code>class_user</code><br>字段<code>user_id</code>为 <code>user</code>表主键，字段<code>class_id</code>为<code>class</code>表主键，同时为添加唯一索引<code>uniq(class_id,userinfo_id)</code></li><li><code>__str__</code><br>用于指定默认返回的值，若无默认返回<code>class</code>对象，否则返回该对象对应的值。<br>建表示例  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'姓名'</span>)</span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># number = models.IntegerField(default=0, verbose_name='学号')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">        <span class="comment"># return self.name+self.username+self.password</span></span><br></pre></td></tr></table></figure></li></ul><p><code>OneToOneField</code> 一对一示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    num = models.OneToOneField(to=<span class="string">'UserInfo'</span>, verbose_name=<span class="string">'学号'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'名字'</span>)</span><br><span class="line">    mac = models.URLField(max_length=<span class="number">128</span>, default=<span class="string">'1'</span>, verbose_name=<span class="string">'地址'</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'邮箱'</span>)</span><br><span class="line">    true_false = models.BooleanField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'是否'</span>)</span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">'日期'</span>)</span><br><span class="line">    models.OneToOneField(to=<span class="string">"Class"</span>, verbose_name=<span class="string">'一对一关系'</span>)</span><br><span class="line">    cal = models.ForeignKey(to=<span class="string">'Class'</span>, default=<span class="number">1</span>)  <span class="comment"># 外键</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p><code>ManyToManyField</code> 多对多示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    sch = models.ForeignKey(to=<span class="string">'School'</span>, default=<span class="number">1</span>) <span class="comment"># ForeignKey外键示例</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'名字'</span>)</span><br><span class="line">    user = models.ManyToManyField(to=<span class="string">'UserInfo'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure></p><p>完成建表操作之后在 Terminal 执行命令建表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></p><h3 id="单表数据操作"><a href="#单表数据操作" class="headerlink" title="单表数据操作"></a>单表数据操作</h3><p>下面提到的 <code>School</code> 是在 <code>models.py</code> 中定义的类名称，作为示例  </p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li><p>查询所有数据<br>使用<code>models.School.objects.all()</code>查询所有数据  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">school_li = models.School.objects.all()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> school_li:</span><br><span class="line">    print(item, type(item), item.name)</span><br></pre></td></tr></table></figure></li><li><p>get 方法查询<br>使用 get 方法只适用于返回结果只有一行，不适用于多行  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">school = models.School.objects.get(id=<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter 方法查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(name=<span class="string">'aming_linux'</span>)  <span class="comment"># 结果为QuerySet List</span></span><br><span class="line">obj1 = models.School.objects.filter(name=<span class="string">'aming_linux'</span>).first() <span class="comment">#取第一个结果</span></span><br><span class="line">obj2 = models.School.objects.filter(name=<span class="string">'aming_linux'</span>).last() <span class="comment">#取最后一个结果</span></span><br></pre></td></tr></table></figure></li></ul><p>当查询结果行数不确定，可以使用 <code>filter</code> 方法进行查询，查询结果为 QuerySet List<br>对得到的结果需要循环进行读取，同时特提供了<code>first()</code> 和 <code>last()</code> 方法对结果进行处理，可直接返回查询结果<br>若传入参数为字典，可以使用下面的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'aming_linux'</span>&#125;</span><br><span class="line">obj = models.School.objects.filter(**dic).first()</span><br></pre></td></tr></table></figure></p><p><code>get</code> 和 <code>filter</code> 方法，建议使用 <code>filter</code>  </p><ol><li><code>get</code> 返回结果为 QuerySet,<code>filter</code> 返回结果为 QuerySet List  </li><li><code>get</code> 若无返回结果则报错，<code>filter</code>若无返回结果不会报错，返回空值  </li></ol><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>增加数据使用<code>create</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'aming_linux'</span>&#125;</span><br><span class="line">obj = models.School.objects.create(**dic)</span><br><span class="line">obj1 = models.School.objects.create(name=<span class="string">'aming_linux2'</span>)</span><br></pre></td></tr></table></figure></p><p>返回结果为 <code>class</code> ，若定义了 <code>__str__</code> 函数，则返回指定的对象</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除数据使用<code>delete</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(**dic).delete()</span><br></pre></td></tr></table></figure></p><p>返回结果示例 <code>(1, {&#39;demo.School&#39;: 1})</code><br>返回结果为元组，元组第一个参数是删除的总行数，第二个参数是字典，字典的 key 表示数据库表， value 表示删除的行数。若是跨表，字典中可能存在多对键值    </p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li><p>方法1 <code>update</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(**dic).update(name=<span class="string">'linux_aming'</span>)</span><br></pre></td></tr></table></figure></li><li><p>方法2 先查询再修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.get(name=<span class="string">'linux_aming'</span>)</span><br><span class="line">obj.name = <span class="string">'aming_linux'</span></span><br><span class="line">obj.save()</span><br></pre></td></tr></table></figure></li></ul><p>推荐使用<code>方法1</code>进行修改操作。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;默认情况下，django 使用 sqlite 作为数据库，相关的配置文件在项目的 &lt;code&gt;settings.py&lt;/code&gt;文件 &lt;code&gt;DATABASES&lt;/code&gt; 中配置。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="ORM" scheme="https://rosinelan.github.io/tags/ORM/"/>
    
      <category term="增删改查" scheme="https://rosinelan.github.io/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
      <category term="django进阶" scheme="https://rosinelan.github.io/tags/django%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>django基础之views基础和admin管理</title>
    <link href="https://rosinelan.github.io/2018/12/21/django%E5%9F%BA%E7%A1%80%E4%B9%8Bviews%E5%9F%BA%E7%A1%80%E5%92%8Cadmin%E7%AE%A1%E7%90%86/"/>
    <id>https://rosinelan.github.io/2018/12/21/django基础之views基础和admin管理/</id>
    <published>2018-12-21T08:47:53.000Z</published>
    <updated>2018-12-21T09:58:18.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="views基础"><a href="#views基础" class="headerlink" title="views基础"></a>views基础</h3><p>views 常用的三个返回方法 <code>render</code> <code>HttpResponse</code> <code>redirect</code></p><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>通过模板语言的渲染，将 html 返回给用户<br><a id="more"></a></p><h4 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h4><p>一般是对页面部分数据的填充，返回部分的字符串数据  </p><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>请求 url 重定向</p><h4 id="应用场景区别"><a href="#应用场景区别" class="headerlink" title="应用场景区别"></a>应用场景区别</h4><ol><li>数据库返回的 queryset list 数据集，通过 render 渲染 templates 直接返回 html 页面</li><li>通过按钮调用 js 代码向 url 发送请求，然后通过 urls 定位到 views 的处理逻辑，得到需要的数据，通过 HttpResponse 返回。若是单个数据，则字符串返回，若多个数据则通过 json返回</li><li>请求重定向 url ，重新通过 urls 定位</li></ol><h3 id="admin管理页面"><a href="#admin管理页面" class="headerlink" title="admin管理页面"></a>admin管理页面</h3><p>admin 页面用于从数读取数据，呈现在页面上进行管理。  </p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>在 Terminal 创建登录用户<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>根据提示信息输入用户名和密码即可。<br>启动 django 项目的服务，访问 <a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a> 登录即可。<br>默认情况下展示 django 默认的数据库表信息<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-default.png" alt="django-admin-default" title="django-admin-default"></p><h4 id="自定义表展示"><a href="#自定义表展示" class="headerlink" title="自定义表展示"></a>自定义表展示</h4><p>首先创建表</p><p><code>demo/models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    schoolname=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    schooltype=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    classname=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    classno=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>在 Terminal 执行命令建表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></p><p>然后注册</p><p><code>demo/admin.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo)</span><br><span class="line">admin.site.register(models.School)</span><br><span class="line">admin.site.register(models.Class)</span><br></pre></td></tr></table></figure></p><p>重新访问就会显示应用 demo 新建的数据库表<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-demo.png" alt="django-admin-demo" title="django-admin-demo"><br>此时存在一个问题，选择一个表进去显示的都是 <code>object</code>而不是对应的表数据，选择对应的 object 才能看到数据。<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-object.png" alt="django-admin-object" title="django-admin-object"><br>修改如下<br><code>demo/admin.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">"username"</span>, <span class="string">"password"</span>) <span class="comment"># 显示表格的表头</span></span><br><span class="line">    search_fields = (<span class="string">"username"</span>,)   <span class="comment"># 设置搜索框允许搜索的字段</span></span><br><span class="line">    list_filter = (<span class="string">"username"</span>,) <span class="comment"># 设置过滤器</span></span><br><span class="line">    ordering = (<span class="string">"-username"</span>,)   <span class="comment"># 排序字段， -表示倒序</span></span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo, UserInfoAdmin)</span><br><span class="line">admin.site.register(models.School)</span><br><span class="line">admin.site.register(models.Class)</span><br></pre></td></tr></table></figure></p><p>再次访问效果如下<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-data.png" alt="django-admin-data" title="django-admin-data"></p><ul><li>数据表多对多关系通过页面删除数据，将会删除所有关联数据，属于级联删除</li><li>注册也可以写在其他应用的 admin.py 文件中，只要应用在项目的 settings.py 注册即可。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;views基础&quot;&gt;&lt;a href=&quot;#views基础&quot; class=&quot;headerlink&quot; title=&quot;views基础&quot;&gt;&lt;/a&gt;views基础&lt;/h3&gt;&lt;p&gt;views 常用的三个返回方法 &lt;code&gt;render&lt;/code&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;code&gt;redirect&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h4&gt;&lt;p&gt;通过模板语言的渲染，将 html 返回给用户&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="views" scheme="https://rosinelan.github.io/tags/views/"/>
    
      <category term="admin" scheme="https://rosinelan.github.io/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>templates基本使用</title>
    <link href="https://rosinelan.github.io/2018/12/20/templates%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/12/20/templates基本使用/</id>
    <published>2018-12-20T09:04:31.000Z</published>
    <updated>2018-12-21T02:28:40.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var_name &#125;&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h5 id="变量过滤器-filter"><a href="#变量过滤器-filter" class="headerlink" title="变量过滤器 (filter)"></a>变量过滤器 (filter)</h5><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj|filter:param &#125;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="常用的内置过滤器"><a href="#常用的内置过滤器" class="headerlink" title="常用的内置过滤器"></a>常用的内置过滤器</h5><ul><li>add        给变量加上相应的值</li><li>addslashes 给变量中的引号前加上斜线</li><li>capfirst   首字母大写</li><li>cut        从字符串中移除指定的字符</li><li>date       格式化日期字符串</li><li>default    如果值是False,就替换成设置的默认值，否则就是用本来的值</li><li>default_if_none  如果值是None，就替换成设置的默认值，否则就使用本来的值</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><code>views.py</code>定义日期变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'te st'</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.datetime.now()</span><br></pre></td></tr></table></figure></p><p><code>login.html</code> 使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; test | cut:<span class="string">' '</span> &#125;&#125;</span><br><span class="line">&#123;&#123; d|date:<span class="string">'Y-m-d'</span> &#125;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%tags%&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>%&#125;&#123;%endif%&#125;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span>%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> item <span class="keyword">in</span> obj_li %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;% <span class="keyword">if</span> item.username == <span class="string">'test'</span> %&#125;</span><br><span class="line">            &lt;span&gt;&#123;&#123; item.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; item.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>其实现的效果和 python 中的 <code>if</code> 和 <code>for</code> 效果类似。   </p><h5 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h5><p>内置方法无法满足需求，可以通过自定义过滤器和标签方式满足需求。  </p><ol><li>应用 demo 中新建 <code>package</code> ，名称为 <code>templatetags</code>。</li><li><p>新建 python 文件，可任意命名(my_tag.py 示例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> library</span><br><span class="line"></span><br><span class="line">register = library()    <span class="comment"># 必须实例化，对象名称为 register</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_tag</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'2018-08-18'</span></span><br></pre></td></tr></table></figure></li><li><p>在项目 settings.py 的 INSTALL_APPS 添加对应的应用名称(已注册不需要添加)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'demo.apps.DemoConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在 login.html 文件中引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load my_tag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; test | filter_func:'666' &#125;&#125;&lt;/p&gt;   # 自定义过滤器</span><br><span class="line"></span><br><span class="line">&#123;% filter_tag <span class="string">'a'</span> <span class="string">'b'</span> <span class="string">'c'</span> <span class="string">'d'</span> %&#125;    <span class="comment"># 自定义标签</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="引入静态文件"><a href="#引入静态文件" class="headerlink" title="引入静态文件"></a>引入静态文件</h5><p>引入 <code>jquery</code> 为示例  </p><ol><li>在应用 demo 中新建 static/js 文件夹，放入对应的文件</li><li><p>在项目的 settings.py 文件中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"demo/static/"</span>), <span class="comment"># 注意逗号</span></span><br><span class="line">    <span class="comment"># [os.path.join(BASE_DIR, "static/")]   </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>在 demo/login.html 文件中添加</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br></pre></td></tr></table></figure><p>注意：添加在 html 页面顶部<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.8.3.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：<code>&lt;script&gt;</code> 标签在 <code>&lt;head&gt;&lt;/head&gt;</code>标签中间</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>所有页面风格比较一致，例如导航栏、侧面栏等都一致，只有其他部分不一致。可以将导航栏和侧面栏作为模板页，其他页面继承。  </p><h5 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h5><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block %&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li>模板页使用 block 标识需要载入子页面的位置</li><li>子页面使用 extends 继承模板页，然后在 block 标识内添加子页面的内容<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5>模板页 <code>base.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.8.3.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是顶部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>子页面<code>login.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; a.0 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% for item in obj_li %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if item.username == 'test' %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;&#123; test &#125;&#125;</span><br><span class="line">        &#123;&#123; test | cut:' ' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; d &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; d|date:'Y-m-d' &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% load my_tag %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; test | filter_func:'666' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% filter_tag 'a' 'b' 'c' 'd' %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用最佳实践"><a href="#使用最佳实践" class="headerlink" title="使用最佳实践"></a>使用最佳实践</h5><ul><li>如果在模板中使用 <code>{% extends %}</code> ，必须保证其为模板中的第一个模板标记。 否则，模板继承将不起作用。</li><li>一般来说，基础模板中的 <code>{% block %}</code> 标签越多越好。 记住，子模板不必定义父模板中所有的代码块，因此你可以用合理的缺省值对一些代码块进行填充，然后只对子模板所需的代码块进行（重）定义。 俗话说，钩子越多越好。</li><li>如果发觉自己在多个模板之间拷贝代码，你应该考虑将该代码段放置到父模板的某个 <code>{% block %}</code> 中。如果你需要访问父模板中的块的内容，使用 <code>{{ block.super }}</code>这个标签吧，这一个魔法变量将会表现出父模板中的内容。如果只想在上级代码块基础上添加内容，而不是全部重载，该变量就显得非常有用了。</li><li>不允许在同一个模板中定义多个同名的 <code>{% block %}</code> 。存在这样的限制是因为block 标签的工作方式是双向的。也就是说，block 标签不仅挖了一个要填的坑，也定义了在父模板中这个坑所填充的内容。如果模板中出现了两个相同名称的 <code>{% block %}</code> 标签，父模板将无从得知要使用哪个块的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;templates&quot;&gt;&lt;a href=&quot;#templates&quot; class=&quot;headerlink&quot; title=&quot;templates&quot;&gt;&lt;/a&gt;templates&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;p&gt;语法格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; var_name &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="templates" scheme="https://rosinelan.github.io/tags/templates/"/>
    
      <category term="simple_tag" scheme="https://rosinelan.github.io/tags/simple-tag/"/>
    
  </entry>
  
  <entry>
    <title>django基础之urls详解</title>
    <link href="https://rosinelan.github.io/2018/12/19/django%E5%9F%BA%E7%A1%80%E4%B9%8Burls%E8%AF%A6%E8%A7%A3/"/>
    <id>https://rosinelan.github.io/2018/12/19/django基础之urls详解/</id>
    <published>2018-12-19T01:51:43.000Z</published>
    <updated>2018-12-19T10:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="urls基本配置"><a href="#urls基本配置" class="headerlink" title="urls基本配置"></a>urls基本配置</h3><p><code>urls</code> 配置类似于网站的目录，通过 urls 的配置，告诉 Django 对于该 url 调用哪段代码。基本的语法格式<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> urlpatterns = [</span><br><span class="line">         url(正则表达式, views视图函数，参数，别名),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><ul><li>正则表达式 正则表达式字符串</li><li>视图函数 可调用的对象，通常是视图函数或一个指定视图函数路径的字符串</li><li>参数 可选的要传递给视图函数的默认参数</li><li>别名 可选的name参数</li></ul><h4 id="正则字符串参数"><a href="#正则字符串参数" class="headerlink" title="正则字符串参数"></a>正则字符串参数</h4><h4 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/([0-9]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li>一旦匹配成功，则不再继续</li><li>若要从 url 中捕获一个值，只需要在它的周围放一对圆括号</li><li>不需要添加一个前置的反斜杠，例如，应该是 <code>^articles</code> 而不是 <code>^/articles</code>，因为每一个都会有  </li><li>每个表达式前面的 <code>r</code> 建议都添加，正则表达式的用法</li><li>是否开启 url 访问地址后面不带 / 跳转为带有 / 的路径，<code>APPEND_SLASH=True</code></li></ol><h4 id="include-其他urls"><a href="#include-其他urls" class="headerlink" title="include 其他urls"></a>include 其他urls</h4><p>当主 urls 中有很多匹配路由时，会比较杂乱，建议根据项目中的应用，使用 include 参数，分配到各项目的 urls 文件中。<br>对于 Djangotest 项目， demo01 应用<br><code>Djangotest/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, views.login),</span><br><span class="line">    url(<span class="string">r'^api/'</span>, include(<span class="string">'demo01.urls'</span>)),  <span class="comment"># include使用方法</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>demo01/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^list.html'</span>, views.list),</span><br><span class="line">    url(<span class="string">r'^add.html'</span>, views.add),</span><br><span class="line">    url(<span class="string">r'^update.html'</span>, views.update),</span><br><span class="line">    url(<span class="string">r'^delete.html'</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>此时访问地址为 <code>http://127.0.0.1:8000/api/list.html</code>，将会匹配到 demo01 的 urls 文件。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>当需要捕获 url 中传递的参数时候，可以采用如下的方式<br><code>demo01/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^list.html'</span>, views.list),</span><br><span class="line">    url(<span class="string">r'^add.html'</span>, views.add),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;num&gt;[0-9]+)/update.html'</span>, views.update), <span class="comment"># 正则匹配，参数num</span></span><br><span class="line">    url(<span class="string">r'^delete.html'</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>/demo01/views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(requests, num)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'this update'</span>)</span><br></pre></td></tr></table></figure></p><p>此处使用 <code>num</code>就可以直接接受到参数。<br>另外，此处传递的参数都是字符串，不论传递的是数字还是字符串。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;urls基本配置&quot;&gt;&lt;a href=&quot;#urls基本配置&quot; class=&quot;headerlink&quot; title=&quot;urls基本配置&quot;&gt;&lt;/a&gt;urls基本配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;urls&lt;/code&gt; 配置类似于网站的目录，通过 urls 的配置，告诉 Django 对于该 url 调用哪段代码。基本的语法格式&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="urls" scheme="https://rosinelan.github.io/tags/urls/"/>
    
  </entry>
  
  <entry>
    <title>django从基础之models的基础使用和命令</title>
    <link href="https://rosinelan.github.io/2018/12/18/django%E4%BB%8E%E5%9F%BA%E7%A1%80%E4%B9%8Bmodels%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
    <id>https://rosinelan.github.io/2018/12/18/django从基础之models的基础使用和命令/</id>
    <published>2018-12-18T02:43:37.000Z</published>
    <updated>2018-12-19T10:17:05.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="models的基本使用"><a href="#models的基本使用" class="headerlink" title="models的基本使用"></a>models的基本使用</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>models</code>是数据操作的API。不需要直接使用SQL语句进行对应表的创建等操作。<br><a id="more"></a></p><ol><li>在<code>settings.py</code>中配置数据库连接相关信息，如驱动、IP地址、用户名、密码等。  </li><li>在<code>models.py</code>中定义数据库表名称及字段信息。  </li><li><p>在Terminal中执行下面命令执行<code>models.py</code>中定义的语句，在数据库中建表。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></li><li><p>此时在数据库可以查看到创建的表信息。  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>django 自带 sqlite 数据库，已经在 settings.py 中配置好了，可直接使用，以使用 sqlite 为例子。  </p></li></ol><ul><li>在 models.py 中定义表及字段信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInof</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li></ul><p>此处类名为表名，类中定义的为各个字段名及属性。  </p><ul><li><p>在 Terminal 中执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></li><li><p>此时在左侧将会出现 <code>db.sqlite3</code>文件，将其拖至右侧边栏的 Database ，即可看到 sqlite 数据库信息<br><img src="http://cdn.rosinelan.com/blog/system/django-models-sqlite.png" alt="django-models-sqlite" title="django-models-sqlite"></p></li></ul><p>以<code>demo_*</code>开头的为新建的表，<code>auth_*</code>和<code>django_*</code>为 django 自带的表。  </p><ul><li>数据查询及绑定<br><code>sqlite</code>数据插入<br>在右侧展示的数据库中双击对应的<code>demo_userinof</code>，即可打开对应的数据库表<br><img src="http://cdn.rosinelan.com/django-sqlite-insert.png" alt="django-sqlite-insert" title="django-sqlite-insert"></li></ul><p>此处 <code>id</code> 列会自动生成并自增，不需要手动输入。<br><code>views.py</code> 定义数据查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        a = [<span class="number">1</span>,]</span><br><span class="line">        <span class="comment"># obj_li = models.UserInof.objects.all()    # 查询所有</span></span><br><span class="line">        obj_li = models.UserInof.objects.filter(username=<span class="string">'test'</span>)  <span class="comment"># 条件查询</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> obj_li:</span><br><span class="line">            print(<span class="string">'username---&gt;'</span>, item.username)</span><br><span class="line">            print(<span class="string">'password---&gt;'</span>, item.password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, locals())</span><br></pre></td></tr></table></figure></p><p><code>/templates/login.html</code> 数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; a.0 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% for item in obj_li %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此处数据绑定展示，效果如下<br><img src="http://cdn.rosinelan.com/blog/system/django-login-test.png" alt="django-login-test" title="django-login-test"><br> <code>1</code> 是通过定义变量列表直接传入。<br>用户名和密码通过 <code>for</code> 循环绑定。  </p><h3 id="django基础命令"><a href="#django基础命令" class="headerlink" title="django基础命令"></a>django基础命令</h3><ul><li><p>创建 django project，名称为<code>mysite</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure></li><li><p>在 mysite 目录下创建应用，名称为 <code>blog</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure></li><li><p>启动 django 项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></table></figure></li><li><p>更改数据库表或字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><p>django 1.7.1 以下版本使用<code>python manage.py syncdb</code>命令。</p><ul><li><p>清空数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py flush</span><br></pre></td></tr></table></figure></li><li><p>创建超级管理员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser  <span class="comment"># 按提示输入用户名和密码，邮箱可不输入</span></span><br><span class="line">python manage.py changepassword username  <span class="comment"># 修改用户密码</span></span><br></pre></td></tr></table></figure></li><li><p>Django 项目环境终端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure></li><li><p>显示数据库版本信息并在命令行下启动数据库的命令行工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py dbshell</span><br></pre></td></tr></table></figure></li></ul><p>通过 <code>python manage.py</code> 可以看到更多的用法。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;models的基本使用&quot;&gt;&lt;a href=&quot;#models的基本使用&quot; class=&quot;headerlink&quot; title=&quot;models的基本使用&quot;&gt;&lt;/a&gt;models的基本使用&lt;/h3&gt;&lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;p&gt;&lt;code&gt;models&lt;/code&gt;是数据操作的API。不需要直接使用SQL语句进行对应表的创建等操作。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="models" scheme="https://rosinelan.github.io/tags/models/"/>
    
      <category term="命令" scheme="https://rosinelan.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>django基础之urls及view</title>
    <link href="https://rosinelan.github.io/2018/12/18/django%E5%9F%BA%E7%A1%80%E4%B9%8Burls%E5%8F%8Aview/"/>
    <id>https://rosinelan.github.io/2018/12/18/django基础之urls及view/</id>
    <published>2018-12-17T23:17:53.000Z</published>
    <updated>2018-12-18T02:29:53.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境为 python 3.X + Django 1.11，若安装的 Django 版本不一致，可先卸载然后指定版本安装。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">pip uninstall Django</span><br><span class="line"><span class="comment"># 指定版本安装</span></span><br><span class="line">pip install Django==<span class="number">1.11</span></span><br></pre></td></tr></table></figure></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Django 使用 MVC/MTV 模式，其本质是为了保持各组件之间松耦合关系。  </p><ul><li>Model(模型)：负责业务对象与数据库的对象(ORM)</li><li>Template(模版)：负责如何把页面展示给用户</li><li>View(视图)：负责业务逻辑，并在适当的时候调用 Model 和 Template  </li></ul><p>此外，Django 还有一个 <code>url</code> 分发器，它的作用是将一个个的 URL 页面请求分发给不同的 view 请求， view 再调用相应的 Model 和 Template 。</p><h3 id="Django流程"><a href="#Django流程" class="headerlink" title="Django流程"></a>Django流程</h3><p>Django 包括 MTV 和 url 分发器，那么具体的处理流程如何呢？<br><img src="http://cdn.rosinelan.com/blog/system/django-process.png" alt="django-process" title="diango-process">  </p><p>用户访问，首先通过<code>urls</code>进行访问路径的匹配，然后转到匹配到的方法或函数，转到 <code>views</code> 进行逻辑处理。<br>若需要访问数据库，则通过 <code>models</code> 访问数据库，获取需要的数据，返回给 <code>views</code>。<br><code>views</code> 处理完成后，若是API调用方式，直接返回数据给用户；否则通过 <code>template</code> 对指定的模板进行渲染，然后将对应的 html 返回给页面。  </p><h3 id="urls及view基础"><a href="#urls及view基础" class="headerlink" title="urls及view基础"></a>urls及view基础</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>使用 pycharm 创建对应的 django 项目，具体步骤如下<br>文件 –&gt; New Project ,然后选择 Diango<br><img src="http://cdn.rosinelan.com/blog/system/django-create.png" alt="django-create" title="django-create"><br>Location 选择对应位置，Djangotest 是对应的 project 名称。<br>Application name 填写具体的应用名称，不填写则不创建。<br>创建完成后对应的目录结构如下<br><img src="http://cdn.rosinelan.com/blog/system/django-ceontent.png" alt="django-content" title="diango-ceontent"></p><h4 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h4><p>在 urls 中添加一个 login 登录<br>/demo/Djangotest/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> views  <span class="comment"># 此处需要import</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, views.login),  <span class="comment"># 此处第一个参数是正则匹配，第二个参数是对应的方法或者函数</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>此处 views.login 无此方法，需要在 views 中添加<br>/demo/views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        data = <span class="string">'helo demo'</span></span><br><span class="line">        msg = <span class="string">'aming pythono'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, &#123;<span class="string">'data'</span>:data,<span class="string">'msg'</span>:msg&#125;)</span><br><span class="line">    <span class="comment"># return render(request, 'login.html', locals())</span></span><br><span class="line">    <span class="comment"># return HttpResponse('hello demo')</span></span><br></pre></td></tr></table></figure></p><ol><li>views 中的方法要求必须返回数据。  </li><li>返回数据常用的是render/HttpResponse/redirect 3个方法。  </li><li><p>locals()方法等价于上面的通过字典传参数，更常用locals()。<br>上面代码跳转至 login.html 页面，在 /demo/templates 添加 login.html 页面  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2个大括号是django使用的参数绑定的方法。  </p></li><li>此处的 data 和前面 views 中 return 返回的字典中的 <code>key</code> 是一致的。  </li></ol><p>然后运行该项目，默认访问 <a href="http://127.0.0.1:8000/login/" target="_blank" rel="noopener">http://127.0.0.1:8000/login/</a> 即可得到对应页面。<br><img src="http://cdn.rosinelan.com/blog/system/django-result.png" alt="django-result" title="django-result"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h4><p>在不涉及 models (数据库交互)的情况下，一般的处理流程  </p><ol><li>在 urls 中匹配并跳转至对应的方法</li><li>在 views 中根据方法或函数的逻辑进行数据处理  </li><li>根据 views 结果，跳转至 templates 中进行渲染  </li></ol><h4 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h4><p>创建流程和新建流程其实是一致的  </p><ol><li>根据应用实际情况，在 urls 添加路径匹配，并指定 views 对应的函数或方法 </li><li>在 views 中创建对应的方法或函数，进行响应的逻辑处理，最后返回数据  </li><li>在 templates 中创建 html 页面，并根据 views 中返回的数据进行数据绑定  </li></ol><p>更复杂的包含 models 的涉及数据库交互的内容后面学习。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Django&quot;&gt;&lt;a href=&quot;#Django&quot; class=&quot;headerlink&quot; title=&quot;Django&quot;&gt;&lt;/a&gt;Django&lt;/h3&gt;&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;p&gt;环境为 python 3.X + Django 1.11，若安装的 Django 版本不一致，可先卸载然后指定版本安装。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="install" scheme="https://rosinelan.github.io/tags/install/"/>
    
      <category term="流程" scheme="https://rosinelan.github.io/tags/%E6%B5%81%E7%A8%8B/"/>
    
      <category term="urls" scheme="https://rosinelan.github.io/tags/urls/"/>
    
  </entry>
  
  <entry>
    <title>python rc脚本实例续</title>
    <link href="https://rosinelan.github.io/2018/12/07/python-rc%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B%E7%BB%AD/"/>
    <id>https://rosinelan.github.io/2018/12/07/python-rc脚本实例续/</id>
    <published>2018-12-07T08:39:32.000Z</published>
    <updated>2018-12-18T01:58:40.388Z</updated>
    
    <content type="html"><![CDATA[<p>##<br>脚本功能：使用python写一个memcached的start/stop/restart/status脚本。<br>前面构造了脚本的基础结构，下面是具体方法的实现。<br><a id="more"></a></p><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, args, workdir)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.program = program</span><br><span class="line">        self.args = args</span><br><span class="line">        self.workdir = workdir</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached'''</span>    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.workdir):</span><br><span class="line">            os.mkdir(self.workdir)</span><br><span class="line">            os.chdir(self.workdir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pidFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached/memcached.pid'''</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(self.workdir, <span class="string">"%s.pid"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_writePid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.pid:</span><br><span class="line">            <span class="keyword">with</span> open(self._pidFile(), <span class="string">'w'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                fd.write(str(self.pid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is running..."</span> % self.name</span><br><span class="line">            sys.exit()</span><br><span class="line">        self._init()</span><br><span class="line">        cmd = self.program + <span class="string">' '</span> +self.args</span><br><span class="line">        p = Popen(cmd, stdout=PIPE, shell=<span class="keyword">True</span>) </span><br><span class="line">        self.pid = p.pid</span><br><span class="line">        self._writePid()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s start Sucessful"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPid</span><span class="params">(self)</span>:</span></span><br><span class="line">        p = Popen([<span class="string">'pidof'</span>,self.name], stdout=PIPE)</span><br><span class="line">        pid = p.stdout.read().strip()</span><br><span class="line">        <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            os.kill(int(pid), <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(self._pidFile()):</span><br><span class="line">                os.remove(self._pidFile())</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is stopped"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stop()</span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()        </span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is already running"</span> % self.name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is not running"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s &#123;start|stop|status|restart&#125;"</span> % __file__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">    prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">    args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">    wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">    </span><br><span class="line">    pm = Process(name = name,</span><br><span class="line">                 program = prog,</span><br><span class="line">                 args = args,</span><br><span class="line">                 workdir = wd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Option Error"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">        pm.start()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">        pm.stop()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">        pm.restart()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">        pm.status()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用命令行启动，父进程为当前bash的<code>PID</code>,当前shell关闭之后，该子进程由<code>init</code>接受，即父进程变更为1。<br>查询当前bash的<code>PID</code>  </p><ul><li><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># echo $$</span></span><br><span class="line"><span class="number">98509</span></span><br></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># tty</span></span><br><span class="line">/dev/pts/<span class="number">0</span></span><br><span class="line"> [root@linux02 advance]<span class="comment"># ps -ef|grep pts/0</span></span><br><span class="line">root      98501   1666  0 Jun20 ?        00:00:10 sshd: root@pts/0 </span><br><span class="line">root      <span class="number">98509</span>  <span class="number">98501</span>  <span class="number">0</span> Jun20 pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> -bash</span><br><span class="line">root     <span class="number">109237</span>  <span class="number">98509</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">35</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</span><br><span class="line">root     <span class="number">109238</span>  <span class="number">98509</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">35</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep pts/<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="守护进程启动"><a href="#守护进程启动" class="headerlink" title="守护进程启动"></a>守护进程启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line">    args = &#123;<span class="string">'USER'</span>:<span class="string">'memcached'</span>, </span><br><span class="line">            <span class="string">'PORT'</span>:<span class="number">11211</span>,</span><br><span class="line">            <span class="string">'MAXCONN'</span>:<span class="number">1024</span>,</span><br><span class="line">            <span class="string">'CACHESIZE'</span>:<span class="number">64</span>,</span><br><span class="line">            <span class="string">'OPTIONS'</span>:<span class="string">''</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, workdir)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.program = program</span><br><span class="line">        self.workdir = workdir</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached'''</span>    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.workdir):</span><br><span class="line">            os.mkdir(self.workdir)</span><br><span class="line">            os.chdir(self.workdir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pidFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached/memcached.pid'''</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(self.workdir, <span class="string">"%s.pid"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_writePid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.pid:</span><br><span class="line">            <span class="keyword">with</span> open(self._pidFile(), <span class="string">'w'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                fd.write(str(self.pid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_readConf</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(f) <span class="keyword">as</span> fd:</span><br><span class="line">            lines = fd.readlines()</span><br><span class="line">            <span class="keyword">return</span> dict([i.strip().replace(<span class="string">'"'</span>,<span class="string">''</span>).split(<span class="string">'='</span>) <span class="keyword">for</span> i <span class="keyword">in</span> lines])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parseArgs</span><span class="params">(self)</span>:</span></span><br><span class="line">        conf = self._readConf(<span class="string">'/etc/sysconfig/memcached'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'USER'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'USER'</span>] = conf[<span class="string">'USER'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'PORT'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'PORT'</span>] = conf[<span class="string">'PORT'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'MAXCONN'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'MAXCONN'</span>] = conf[<span class="string">'MAXCONN'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'CACHESIZE'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'CACHESIZE'</span>] = conf[<span class="string">'CACHESIZE'</span>]</span><br><span class="line">        options = [<span class="string">'-u'</span>, self.args[<span class="string">'USER'</span>],</span><br><span class="line">                   <span class="string">'-p'</span>, self.args[<span class="string">'PORT'</span>],</span><br><span class="line">                   <span class="string">'-m'</span>, self.args[<span class="string">'CACHESIZE'</span>],</span><br><span class="line">                   <span class="string">'-c'</span>, self.args[<span class="string">'MAXCONN'</span>]]</span><br><span class="line">        os.system(<span class="string">"chown %s %s"</span> % (self.args[<span class="string">'USER'</span>],self.workdir))</span><br><span class="line">        <span class="keyword">return</span> options</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is running..."</span> % self.name</span><br><span class="line">            sys.exit()</span><br><span class="line">        self._init()</span><br><span class="line">        cmd = [self.program] + self._parseArgs() + [<span class="string">'-d'</span>,<span class="string">'-P'</span>, self._pidFile()]</span><br><span class="line">        <span class="keyword">print</span> cmd</span><br><span class="line">        p = Popen(cmd, stdout=PIPE) </span><br><span class="line">        <span class="comment">#self.pid = p.pid</span></span><br><span class="line">        <span class="comment">#self._writePid()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s start Sucessful"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPid</span><span class="params">(self)</span>:</span></span><br><span class="line">        p = Popen([<span class="string">'pidof'</span>,self.name], stdout=PIPE)</span><br><span class="line">        pid = p.stdout.read().strip()</span><br><span class="line">        <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            os.kill(int(pid), <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(self._pidFile()):</span><br><span class="line">                os.remove(self._pidFile())</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is stopped"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stop()</span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()        </span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is already running"</span> % self.name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is not running"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s &#123;start|stop|status|restart&#125;"</span> % __file__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">    prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">    args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">    wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">    </span><br><span class="line">    pm = Process(name = name,</span><br><span class="line">                 program = prog,</span><br><span class="line">                 workdir = wd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Option Error"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">        pm.start()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">        pm.stop()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">        pm.restart()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">        pm.status()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意点  </p><ol><li>以<code>-d</code>方式启动，需添加<code>-P</code>参数，不需要自己写入pid文件。  </li><li>守护进程启动方式在命令行启动脚本基础上进行了改进，主要是针对配置文件。  </li><li>守护进程方式启动，会出现二次fork，最后结果就是其父进程PID为1。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;br&gt;脚本功能：使用python写一个memcached的start/stop/restart/status脚本。&lt;br&gt;前面构造了脚本的基础结构，下面是具体方法的实现。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="rc脚本" scheme="https://rosinelan.github.io/tags/rc%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>python类的属性和方法总结及rc脚本实例</title>
    <link href="https://rosinelan.github.io/2018/12/06/python%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E5%8F%8Arc%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B/"/>
    <id>https://rosinelan.github.io/2018/12/06/python类的属性和方法总结及rc脚本实例/</id>
    <published>2018-12-06T08:36:15.000Z</published>
    <updated>2018-12-06T09:04:05.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的属性总结"><a href="#类的属性总结" class="headerlink" title="类的属性总结"></a>类的属性总结</h2><p>类属性相关内容如下  </p><ul><li>类的公有属性  </li><li>类的私有属性  <a id="more"></a></li><li>对象的公有属性  </li><li>对象的私有属性  </li><li>对象的内置属性  </li><li>函数的局部变量  </li><li>函数的全局变量  </li></ul><p>是否可通过对象访问？  </p><ul><li>类的公有属性可以实例化之后，通过对象直接访问。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc.var1</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br></pre></td></tr></table></figure></p><ul><li>类的私有属性实例化之后通过对象不可直接访问，可使用<code>instance._classname__attribute</code>方式访问。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc._MyClass__var2</span><br><span class="line"><span class="keyword">print</span> mc.__var2</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类的私有属性 __var2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_6_3.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> mc.__var2</span><br><span class="line">AttributeError: <span class="string">'MyClass'</span> object has no attribute <span class="string">'__var2'</span></span><br></pre></td></tr></table></figure></p><ul><li>对象的公有属性需要调用对应的方法之后，才可以通过对象访问。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line"><span class="keyword">print</span> mc.var3</span><br><span class="line">mc1 = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc1.var3</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象的公有属性 var3</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_6_3.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> mc1.var3</span><br><span class="line">AttributeError: <span class="string">'MyClass'</span> object has no attribute <span class="string">'var3'</span></span><br></pre></td></tr></table></figure></p><ul><li>对象的私有属性，通过对象不可访问。  </li><li>函数的局部变量，通过对象不可访问。  </li></ul><p>是否可以通过类访问？  </p><ul><li>公有属性可以直接通过类访问  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> MyClass.var1</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br></pre></td></tr></table></figure></p><ul><li>私有属性不可通过类直接访问。  </li><li>方法的公有属性和私有属性不可通过类直接访问。  </li><li>方法的公有属性只能通过对象来访问。  </li></ul><p>方法内部是否可以调用呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.var1</span><br><span class="line">        <span class="keyword">print</span> self.__var2</span><br><span class="line">        <span class="keyword">print</span> self.var3</span><br><span class="line">        <span class="keyword">print</span> self.__var4</span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line">mc.func2()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br><span class="line">类的私有属性 __var2</span><br><span class="line">对象的共有属性 var3</span><br><span class="line">对象的私有属性 __var4</span><br></pre></td></tr></table></figure></p><ul><li>方法内部可以直接调用类的公有属性和私有属性。  </li><li>方法内部调用其它方法的公有属性和私有属性，需要先执行该方法再调用，否则无法调用。  </li><li>方法内部无法调用其它方法的局部变量。  </li><li>内置属性可以通过对象或类调用。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line">var5 = <span class="string">'全局变量 var5'</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量 var5'</span></span><br><span class="line">        <span class="keyword">print</span> var5</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.var1</span><br><span class="line">        <span class="keyword">print</span> self.__var2</span><br><span class="line">        <span class="keyword">print</span> self.var3</span><br><span class="line">        <span class="keyword">print</span> self.__var4</span><br><span class="line">        <span class="keyword">print</span> var5</span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line">mc.func2()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line"><span class="keyword">print</span> mc.__dict__</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line"><span class="keyword">print</span> MyClass.__dict__</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">函数的局部变量 var5</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">类属性，类的公有属性 var1</span><br><span class="line">类的私有属性 __var2</span><br><span class="line">对象的共有属性 var3</span><br><span class="line">对象的私有属性 __var4</span><br><span class="line">全局变量 var5</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">&#123;<span class="string">'_MyClass__var4'</span>: <span class="string">'\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe7\xa7\x81\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 __var4'</span>, <span class="string">'var3'</span>: <span class="string">'\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x85\xb1\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 var3'</span>&#125;</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">&#123;<span class="string">'func2'</span>: &lt;function func2 at <span class="number">0x7fbeac51a8c0</span>&gt;, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'var1'</span>: <span class="string">'\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe7\xb1\xbb\xe7\x9a\x84\xe5\x85\xac\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 var1'</span>, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'func1'</span>: &lt;function func1 at <span class="number">0x7fbeac51a230</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'_MyClass__var2'</span>: <span class="string">'\xe7\xb1\xbb\xe7\x9a\x84\xe7\xa7\x81\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 __var2'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类的方法总结"><a href="#类的方法总结" class="headerlink" title="类的方法总结"></a>类的方法总结</h2><ul><li>公有方法</li><li>私有方法</li><li>类方法</li><li>静态方法</li><li>内置方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是公有方法"</span></span><br><span class="line">        self.__func2()  <span class="comment">## 类的内部调用私有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是私有方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classFun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是类方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticFun</span><span class="params">()</span>:</span>    <span class="comment">## 不可添加self</span></span><br><span class="line">        <span class="keyword">print</span> MyClass.name,    <span class="comment">## 通过类名调用</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是静态方法"</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line">MyClass.classFun()</span><br><span class="line">MyClass.staticFun()</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test 我是公有方法</span><br><span class="line">Test 我是私有方法</span><br><span class="line">Test 我是类方法</span><br><span class="line">Test 我是静态方法</span><br></pre></td></tr></table></figure></p><ul><li>公有方法可以在类的内部和外部调用；</li><li>私有方法只能在类的内部调用；</li><li>类方法添加装饰器，通过类调用</li></ul><p>内置方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.func1() </span><br><span class="line">        self.__func2()</span><br><span class="line">        self.classFun()</span><br><span class="line">        self.staticFun()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是公有方法"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是私有方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classFun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是类方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticFun</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> MyClass.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是静态方法"</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test 我是公有方法</span><br><span class="line">Test 我是私有方法</span><br><span class="line">Test 我是类方法</span><br><span class="line">Test 我是静态方法</span><br></pre></td></tr></table></figure></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用python写一个memcached的启动脚本，可以参照<code>/etc/init.d/memcached</code>脚本。<br>下面是启动脚本的大体结构，下一章节详细介绍类中方法的实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, args, workdir)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">self.program = program</span><br><span class="line">self.args = args</span><br><span class="line">self.workdir = workdir</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.stop()</span><br><span class="line">self.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">pm = Process(name = name,</span><br><span class="line"> program = prog,</span><br><span class="line"> args = args,</span><br><span class="line"> workdir = wd)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span> IndexError, e:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Option error"</span></span><br><span class="line">sys.exit()</span><br><span class="line"><span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">pm.start()</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">pm.stop()</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">pm.restart</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">pm.status()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'main'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的属性总结&quot;&gt;&lt;a href=&quot;#类的属性总结&quot; class=&quot;headerlink&quot; title=&quot;类的属性总结&quot;&gt;&lt;/a&gt;类的属性总结&lt;/h2&gt;&lt;p&gt;类属性相关内容如下  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类的公有属性  &lt;/li&gt;
&lt;li&gt;类的私有属性
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="rc脚本" scheme="https://rosinelan.github.io/tags/rc%E8%84%9A%E6%9C%AC/"/>
    
      <category term="属性" scheme="https://rosinelan.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="方法" scheme="https://rosinelan.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python类的内置方法和继承</title>
    <link href="https://rosinelan.github.io/2018/12/05/python%E7%B1%BB%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>https://rosinelan.github.io/2018/12/05/python类的内置方法和继承/</id>
    <published>2018-12-05T08:44:47.000Z</published>
    <updated>2018-12-05T09:10:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python内部类"><a href="#python内部类" class="headerlink" title="python内部类"></a>python内部类</h2><p>内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界。  </p><h3 id="内部类的实例化方法"><a href="#内部类的实例化方法" class="headerlink" title="内部类的实例化方法"></a>内部类的实例化方法</h3><ul><li>方法1 <a id="more"></a>直接使用外部类调用内部类<br><code>object_name = outclass_name.inclass_name()</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line">jack = People.Chinese()</span><br><span class="line"><span class="keyword">print</span> jack.name</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am chinese</span><br></pre></td></tr></table></figure></p><p>访问方法可以有多种<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> People.Chinese.name</span><br><span class="line"><span class="keyword">print</span> People.Chinese().name</span><br></pre></td></tr></table></figure></p><p>通过类的方法访问<br><code>People.Chinese.name</code><br>通过对象的方法访问<br><code>People.Chinese().name</code><br>对于公有属性，可以通过上述两种方式都可以。  </p><ul><li>方法2<br>先对外部类进行实例化，然后再实例化内部类。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out_name = outclass_name()</span><br><span class="line">in_name = out_name.inclass_name()</span><br><span class="line">in_name.method()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line">jack = ren.Chinese()</span><br><span class="line"><span class="keyword">print</span> jack.name</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am chinese</span><br></pre></td></tr></table></figure></p><h3 id="类的内置方法-魔术方法"><a href="#类的内置方法-魔术方法" class="headerlink" title="类的内置方法(魔术方法)"></a>类的内置方法(魔术方法)</h3><p><code>__str__(self)</code>默认在类实例化过程中就会执行，不需要调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.People object at <span class="number">0x7f40dfcbbd90</span>&gt;</span><br></pre></td></tr></table></figure></p><p>当添加<code>__str__</code>后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is a people class'</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a people <span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure></p><ul><li>构造函数<br><code>__init__()</code><br>用于初始化类的内部状态，如果不提供，python会给出一个默认的<code>__init__</code>方法。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c=<span class="string">'white'</span>)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line"><span class="keyword">print</span> People.color</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">white</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure></p><p>使用类访问不会发生变化。<br>使用对象访问，值会根据传入的参数发生变化。  </p><ul><li>析构函数<br><code>__del__()</code><br>用于释放对象占用的资源，如果不提供，python会在后台提供默认析构函数。<br>析构函数在执行完成的最后再执行。  <h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3>python采用垃圾回收机制清理不再使用的对象：python提供gc模块释放不再使用的对象。<br>python采用“引用计数”的算法方式来处理回收，即当某个对象在其作用域内不再被其他对象引用的时候，python就自动清除对象。<br>gc模块的<code>collect()</code>可以一次性收集所有待处理的对象(gc.collect)。<h2 id="python类的继承"><a href="#python类的继承" class="headerlink" title="python类的继承"></a>python类的继承</h2><h3 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h3>继承可以重用已经存在的数据和行为，减少代码的重复编写。<br>python在类名后使用一堆括号来表示继承关系，括号中的类即为父类。<br><code>class Myclass(ParentClass)</code><br>如果父类定义了<code>__init__</code>方法，子类必须显式调用父类的<code>__init__</code>方法(父类的<strong>init</strong>参数&gt;=2的时候)。<br><code>ParentClass.__init__(self,[args...])</code><br>如果子类需要扩展父类的行为，可以添加<strong>init</strong>方法的参数。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        People.__init__(self,<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line"><span class="keyword">print</span> cn.color</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">I am a red</span><br><span class="line">I am a thinker</span><br></pre></td></tr></table></figure></p><ul><li>使用super继承父类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Chinese, self).__init__(<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line"><span class="keyword">print</span> cn.color</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">I am a red</span><br></pre></td></tr></table></figure></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>python支持多重继承，即一个类可以继承多个父类。<br><code>class class_name(Parent_c1,Parent_c2,...)</code><br>注意：当父类中出现多个自定义的<code>__init__</code>方法时，多重继承只执行第一个类的<code>__int__</code>方法，其他不执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"init..."</span></span><br><span class="line">        self.dwell =<span class="string">'Earth'</span>       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"My home is %s"</span> % self.dwell</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Martian</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dwell =<span class="string">'Martian'</span>       </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(Martian,People)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am a red</span><br><span class="line">My home <span class="keyword">is</span> Martian</span><br></pre></td></tr></table></figure></p><p>当继承更换顺序时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People,Martian)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init...</span><br><span class="line">I am a yellow</span><br><span class="line">My home <span class="keyword">is</span> Earth</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python内部类&quot;&gt;&lt;a href=&quot;#python内部类&quot; class=&quot;headerlink&quot; title=&quot;python内部类&quot;&gt;&lt;/a&gt;python内部类&lt;/h2&gt;&lt;p&gt;内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界。  &lt;/p&gt;
&lt;h3 id=&quot;内部类的实例化方法&quot;&gt;&lt;a href=&quot;#内部类的实例化方法&quot; class=&quot;headerlink&quot; title=&quot;内部类的实例化方法&quot;&gt;&lt;/a&gt;内部类的实例化方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法1
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="内置方法" scheme="https://rosinelan.github.io/tags/%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    
      <category term="继承" scheme="https://rosinelan.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>python面向对象及类的属性和方法</title>
    <link href="https://rosinelan.github.io/2018/12/04/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8F%8A%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/12/04/python面向对象及类的属性和方法/</id>
    <published>2018-12-04T06:47:44.000Z</published>
    <updated>2018-12-04T07:51:45.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h2><p>面向过程：函数式编程，C程序。<br>面向对象：C++,Java,Python等。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.+TAB键    查看字符串的方法</span><br><span class="line">list. +TAB键    查看列表的方法</span><br><span class="line">tuple. +TAB键    查看元组的方法</span><br><span class="line">dict. +TAB键    查看字典的方法</span><br></pre></td></tr></table></figure></p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类：对事物的抽象，比如：人类，球类。<br>对象：类的一个实例，比如：篮球，足球。<br>实例的说明：<br>球类可以对球的特征和行为进行抽象，然后可以实例化一个真实的球实体出来。<br>面向对象的思想：封装、继承、多态。  </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>类把需要的变量和函数组合在一起，这种包含称为封装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br></pre></td></tr></table></figure></p><p>命名：1个单词首字母大写，多个单词首字母都大写。<br>创建对象的过程称之为实例化；当一个对象被创建之后，包含3方面的特性：对象句柄、属性和方法。<br>句柄用于区分不同的对象。<br>对象的属性和方法与类中的成员变量和成员函数对应。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = MyClass()  //创建类的一个实例(对象)，通过对象调用方法和属性</span><br></pre></td></tr></table></figure></p><h4 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">成员变量 – 属性</span><br><span class="line">成员函数 – 方法</span><br></pre></td></tr></table></figure><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> “I am function”</span><br></pre></td></tr></table></figure><p>类的方法至少有一个参数self。  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yellow</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br></pre></td></tr></table></figure></p><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>按使用范围：私有属性和公有属性。<br>公有属性：在类中和类外都能调用的属性。<br>私有属性：不能再类外及被类以外的函数调用。<br>定义方式：以”<strong>”双下划线开始的成员变量就是私有属性，可以通过instance._classname_attribute方式访问(不建议使用，仅用于测试)。<br>内置属性：由系统在定义类的时候默认添加的，由前后双下划线构成，`</strong>dict<strong><code>、</code></strong>module__`。<br>支持中文的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment">#encoding:utf8</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br></pre></td></tr></table></figure></p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line">ren.color = <span class="string">'白色人'</span></span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br><span class="line"><span class="comment">#print ren.__age</span></span><br><span class="line"><span class="keyword">print</span> ren._People__age</span><br><span class="line"><span class="keyword">print</span> ren.__dict__</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> * <span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.color</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> *<span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.__dict__</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">白色人</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'black'</span>&#125;</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">yellow</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'_People__age'</span>: <span class="number">30</span>, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'think'</span>: &lt;function think at <span class="number">0x7f95deb1bc08</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>方法的定义和函数一样，但是需要self作为第一个参数。  </p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>公有方法：在类中和类外都可以调用的。<br>私有方法：不能被类的外部调用，在方法前面加上”__”双下划线。<br>self参数：用于分区函数和类方法(必须有一个self)，self参数表示执行对象本身。<br>类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用(是继承的关系)。<br>静态方法：相当于全局函数，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义，静态方法没有self参数。  </p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>公有方法调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.think()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am a yellow</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><ul><li>私有方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am talking with Tom"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__talk()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br><span class="line">jack.__talk()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am talking <span class="keyword">with</span> Tom</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    jack.__talk()</span><br><span class="line">AttributeError: <span class="string">'People'</span> object has no attribute <span class="string">'__talk'</span></span><br></pre></td></tr></table></figure></p><ul><li>类方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Testing..."</span></span><br><span class="line"></span><br><span class="line">    cm = classmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.cm()</span><br><span class="line">People.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果(类方法必须经过classmethod方法处理，否则会报错如下)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Testing...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4_1.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    People.test()</span><br><span class="line">TypeError: unbound method test() must be called <span class="keyword">with</span> People instance <span class="keyword">as</span> first argument (got nothing instead)</span><br></pre></td></tr></table></figure></p><ul><li>静态方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a func"</span></span><br><span class="line"></span><br><span class="line">    sm = staticmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.sm()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a func</span><br></pre></td></tr></table></figure></p><ul><li>装饰器(仅对相邻的第一个函数起作用,类方法和静态方法的简化)<br>@classmethod<br>@statucmethod<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a class method"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a static method"</span></span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.test()</span><br><span class="line">People.test1()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a <span class="class"><span class="keyword">class</span> <span class="title">method</span></span></span><br><span class="line"><span class="class"><span class="title">this</span> <span class="title">is</span> <span class="title">a</span> <span class="title">static</span> <span class="title">method</span></span></span><br></pre></td></tr></table></figure></p><p>说明<br>静态方法：将类的所有属性和方法提前加载到内存。<br>动态方法：只加载调用的属性和方法至内存，未调用的不加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python面向对象&quot;&gt;&lt;a href=&quot;#python面向对象&quot; class=&quot;headerlink&quot; title=&quot;python面向对象&quot;&gt;&lt;/a&gt;python面向对象&lt;/h2&gt;&lt;p&gt;面向过程：函数式编程，C程序。&lt;br&gt;面向对象：C++,Java,Python等。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="属性" scheme="https://rosinelan.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="方法" scheme="https://rosinelan.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="面向对象" scheme="https://rosinelan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
