<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-05-13T12:40:16.980Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python中使用SQLAlchemy</title>
    <link href="https://rosinelan.github.io/2018/05/11/python%E4%B8%AD%E4%BD%BF%E7%94%A8SQLAlchemy/"/>
    <id>https://rosinelan.github.io/2018/05/11/python中使用SQLAlchemy/</id>
    <published>2018-05-11T03:35:35.000Z</published>
    <updated>2018-05-13T12:40:16.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h3><ul><li>ORM<br><code>ORM</code>是Object-Relational Mapping的简写。今天学习的<code>SQLAlchemy</code>其实就是ORM框架中最有名的一个。<br><code>SQLAlchemy</code>框架工作<br>通过数据的API，使用关系对象映射进行数据库操作，也就是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。  <a id="more"></a><img src="http://cdn.rosinelan.com/blog/program/orm-sqlalchemy-core.jpg" alt="orm-sqlalchemy-core" title="orm-sqlalchemy-core"><br>SQLAlchemy本身无法操作数据库，其必须通过<code>pymysql</code>等第三方插件。上图中Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqldb</span></span><br><span class="line">mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"><span class="comment"># pymysql</span></span><br><span class="line">mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"><span class="comment"># mysql-connector</span></span><br><span class="line">mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"><span class="comment"># cx_oracle</span></span><br><span class="line"> oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br></pre></td></tr></table></figure></li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>ORM思想的核心是隐藏了数据访问细节，提供了通用的数据库交互。并且完全不用考虑SQL语句，从而快速开发。  </p><ul><li>使用SQL创建表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="built_in">int</span>,</span><br><span class="line">  address <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>上述是一个简单的创建单表的语句。  </p><ul><li>使用SQLAlchemy<br>方法1<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer, MetaData</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">Base = declarative_base()    <span class="comment">#生成orm基类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span>    <span class="comment">#指定表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)    <span class="comment">#创建表结构</span></span><br></pre></td></tr></table></figure></li></ul><p>方法2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, MetaData, Column, Integer, String, create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> mapper</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">metadata = MetaData()</span><br><span class="line"></span><br><span class="line">student = Table(<span class="string">'student'</span>, metadata,</span><br><span class="line">             Column(<span class="string">'id'</span>, Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">             Column(<span class="string">'name'</span>, String(<span class="number">100</span>)),</span><br><span class="line">             Column(<span class="string">'age'</span>, Integer),</span><br><span class="line">             Column(<span class="string">'address'</span>, String(<span class="number">100</span>))</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, address)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.address = address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mapper(Student, student)    <span class="comment">#此处有问题，待解决</span></span><br></pre></td></tr></table></figure></p><p>说明<br><code>echo=True</code> 显示每条执行的SQL语句，可以关闭。<br><code>create_engine()</code>返回一个Engine的实例，并且表示通过数据库语法处理细节的核心接口，这种情况下数据库语法将被解释成python的类方法。<br>上面简单示例对比了下使用SQL直接创建表和使用ORM框架建表的区别，下面开始介绍<code>SQLAlchemy</code>的使用。  </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过<code>pip install SQLAlchemy</code>安装，访问mysql使用<code>pymysql</code>，安装方法<code>pip install pumysql</code>。可以参照<a href="https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/" target="_blank" rel="noopener">python访问mysql</a>。  </p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer, MetaData</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine) <span class="comment">#创建与数据库的会话session class ,注意,这里返回给session的是个class,不是实例</span></span><br><span class="line">session = DBsession()    <span class="comment">#生成session实例</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student1 = Student(id=<span class="number">1001</span>, name=<span class="string">'Alice'</span>, age=<span class="number">25</span>, address=<span class="string">"anhui"</span>)</span><br><span class="line">student2 = Student(id=<span class="number">1002</span>, name=<span class="string">'Bob'</span>, age=<span class="number">69</span>, address=<span class="string">"beijing"</span>)</span><br><span class="line">student3 = Student(id=<span class="number">1003</span>, name=<span class="string">'Cerry'</span>, age=<span class="number">14</span>, address=<span class="string">"jiangsu"</span>)</span><br><span class="line"></span><br><span class="line">session.add_all([student1, student2, student3])</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询是通过Session的<code>query()</code>方法创建一个查询对象，这个函数的参数可以是任何类或者类的描述的集合。<br>查询出来的数据是一个对象，直接通过对象的属性调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> db.orm2 <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:123456@localhost/test'</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line"></span><br><span class="line">a = session.query(Student)</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT student.id AS student_id, student.name AS student_name, student.age AS student_age, student.address AS student_address </span><br><span class="line">FROM student</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1003</span> Cerry <span class="number">14</span> jiangsu</span><br></pre></td></tr></table></figure></p><p><code>session.query(Student)</code>结果为查询的SQL语句，若出现查询结果错误可以通过查看SQL确认。  </p><ul><li>filter()和filter_by()<br>过滤条件。<code>==</code>、<code>!=</code>、<code>like</code>等过滤操作都可以在filter函数中使用。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> db.orm2 <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:123456@localhost/test'</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line"></span><br><span class="line">a = session.query(Student).filter(Student.id == <span class="number">1001</span>)</span><br><span class="line">b = session.query(Student).filter_by(id=<span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x.id, x.name, x.age, x.address)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br></pre></td></tr></table></figure></p><p><code>filter()</code>和<code>filter_by()</code>区别<br>filter可以像写sql的where条件那样写&gt;、&lt;等条件，但引用列名时，需要通过<code>类名.属性名</code>的方式。<br>filter_by可以使用python的正常参数传递方法传递条件，指定列名时，不需要额外指定类名，参数名对应类中的属性名，不能使用&gt;、&lt;等条件。<br>当使用filter的时候条件之间是使用<code>==</code>，filter_by使用的是<code>=</code>。<br>filter不支持组合查询，只能连续调用filter变相实现。filter_by的参数是**kwargs，直接支持组合查询。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filters = &#123;<span class="string">'id'</span>:<span class="number">1002</span>, <span class="string">'name'</span>:<span class="string">'Bob'</span>&#125;</span><br><span class="line">b = session.query(Student).filter_by(**filters)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br></pre></td></tr></table></figure></p><ul><li>all()<br>返回一个列表，可以通过遍历列表获取每个对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id &gt; <span class="number">1001</span>).all()</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x.id, x.name, x.age, x.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&lt;db.orm2.Student object at <span class="number">0x00000197ECC759E8</span>&gt;, &lt;db.orm2.Student object at <span class="number">0x00000197ECC75A58</span>&gt;]</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1003</span> Cerry <span class="number">14</span> jiangsu</span><br></pre></td></tr></table></figure></p><ul><li>one()<br>返回且仅返回一个查询结果。当结果数量不足或者多于一个时会报错。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id == <span class="number">1001</span>).one()</span><br><span class="line">print(a)</span><br><span class="line">print(a.id, a.name, a.age, a.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;db.orm2.Student object at <span class="number">0x000001B7C57E7908</span>&gt;</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br></pre></td></tr></table></figure></p><ul><li>first()<br>返回至多一个结果，而且以单项形式，而不是只有一个元素的tuple形式返回。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id &gt; <span class="number">1001</span>).first()</span><br><span class="line">print(a)</span><br><span class="line">print(a.id, a.name, a.age, a.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;db.orm2.Student object at <span class="number">0x000001C63E536B00</span>&gt;</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br></pre></td></tr></table></figure></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>MetaData类<br>主要用于保存表结构，连接字符串等数据，是一个多表共享的对象。<br><code>metadata = MetaData(engine)</code>绑定一个数据源的metadata。<br><code>metadata.create_all(engine)</code> 创建表，该操作会先判断表是否存在，若存在则不创建。  </li><li>Table类<br>构造函数为<code>Table.__init__(self, name, metadata,*args, **kwargs)</code><br>name  表名<br>metadata 共享的元数据<br><em>args中<code>Column</code>是列定义<br>下面是可变参数`*</em>kwargs`定义<br>schema 此表的结构名称，默认None<br>autoload 自动从现有表中读入表结构，默认False<br>autoload_with 从其他engine读取结构，默认None<br>include_columns 如果autoload设置为True，则此项数组中的列明将被引用，没有写的列明将被忽略，None表示所有都列明都引用，默认None<br>mustexist 如果为True，表示这个表必须在其他的python应用中定义，必须是metadata的一部分，默认False<br>useexisting 如果为True，表示这个表必须被其他应用定义过，将忽略结构定义，默认False<br>owner 表所有者，用于Orcal，默认None<br>quote 设置为True，如果表明是SQL关键字，将强制转义，默认False<br>quote_schema  设置为True，如果列明是SQL关键字，将强制转义，默认False<br>mysql_engine  mysql专用，可以设置’InnoDB’或’MyISAM’</li><li>Column类<br>构造函数为<code>Column.__init__(self,  name,  type_,  *args,  **kwargs)</code><br>name 列名<br>type_ 类型，更多类型sqlalchemy.types<br>下面是<code>*args</code>参数定义<br>Constraint（约束）<br>ForeignKey（外键）<br>ColumnDefault（默认）<br>Sequenceobjects（序列）定义<br>key 列名的别名，默认None<br>下面是<code>**kwargs</code>参数定义<br>primary_key 如果为True，则是主键<br>nullable 是否可为Null，默认是True<br>default 默认值，默认是None<br>index 是否是索引，默认是True<br>unique 是否唯一键，默认是False<br>onupdate 指定一个更新时候的值，这个操作是定义在SQLAlchemy中，不是在数据库里的，当更新一条数据时设置，大部分用于updateTime这类字段<br>autoincrement 设置为整型自动增长，只有没有默认值，并且是Integer类型，默认是True<br>quote 如果列明是关键字，则强制转义，默认False</li><li>创建会话<br>Session的主要目的是建立与数据库的会话，它维护你加载和关联的所有数据库对象。它是数据库查询（Query）的一个入口。<br>在<code>SQLAlchemy</code>中，数据库的查询操作是通过Query对象来实现的,而Session提供了创建Query对象的接口。Query对象返回的结果是一组同一映射（Identity Map）对象组成的集合。事实上，集合中的一个对象，对应于数据库表中的一行（即一条记录）。所谓同一映射，是指每个对象有一个唯一的ID。如果两个对象（的引用）ID相同，则认为它们对应的是相同的对象。<br>要完成数据库查询，就需要建立与数据库的连接。这就需要用到Engine对象。一个Engine可能是关联一个Session对象，也可能关联一个数据库表。<br>当然Session最重要的功能还是实现原子操作。<br>ORM通过session与数据库建立连接进行通信，如下所示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line">session = DBSession()</span><br></pre></td></tr></table></figure></li></ol><p>通过sessionmake方法创建一个Session工厂，然后在调用工厂的方法来实例化一个Session对象。</p><p>要了解更多关于<code>SQLAlchemy</code>内容可以点击<a href="http://docs.sqlalchemy.org/en/latest/dialects/index.html" target="_blank" rel="noopener">SQLAlchemy Documentation</a>查看官方介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念简介&quot;&gt;&lt;a href=&quot;#概念简介&quot; class=&quot;headerlink&quot; title=&quot;概念简介&quot;&gt;&lt;/a&gt;概念简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ORM&lt;br&gt;&lt;code&gt;ORM&lt;/code&gt;是Object-Relational Mapping的简写。今天学习的&lt;code&gt;SQLAlchemy&lt;/code&gt;其实就是ORM框架中最有名的一个。&lt;br&gt;&lt;code&gt;SQLAlchemy&lt;/code&gt;框架工作&lt;br&gt;通过数据的API，使用关系对象映射进行数据库操作，也就是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="ORM" scheme="https://rosinelan.github.io/tags/ORM/"/>
    
      <category term="SQLAIchemy" scheme="https://rosinelan.github.io/tags/SQLAIchemy/"/>
    
  </entry>
  
  <entry>
    <title>python访问mysql(二)</title>
    <link href="https://rosinelan.github.io/2018/05/09/python%E8%AE%BF%E9%97%AEmysql-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/05/09/python访问mysql-二/</id>
    <published>2018-05-09T12:46:13.000Z</published>
    <updated>2018-05-10T00:29:26.772Z</updated>
    
    <content type="html"><![CDATA[<p>关于mysql中的事务、python访问mysql简单步骤、mysql常见操作等内容点击<a href="https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/" target="_blank" rel="noopener">python访问mysql</a>查看。<br>在前面介绍<code>python访问mysql</code>的一个典型执行过程中出现了<code>cursor()</code>方法，它就是游标。我们执行sql命令或者得到执行结果都需要使用游标。  </p><h3 id="curosr"><a href="#curosr" class="headerlink" title="curosr()"></a>curosr()</h3><p><code>cursor</code>游标是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。可以将游标当做一个指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理。<br><a id="more"></a><br>建立数据库连接之后，使用<code>cursor</code>提供的方法执行命令或者返回结果。  </p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><ul><li>execute(self, query, args=None)<br>执行一个数据库sql命令。  </li><li>executemany(self, query, args)<br>执行多个数据库sql命令。  </li><li>callproc(self, procname, args=())<br>执行存储过程。  </li></ul><p>上述方法返回结果为受影响的行数。</p><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><ul><li>fetchall(self)<br>接受全部的返回结果行。</li><li>fetchmany(self, size=None)<br>接受<code>size</code>条返回结果行。如果size值大于结果行的数量则返回cursor.arraysize条数据。</li><li>fetchone(self)<br>返回结果行的下一行。  </li></ul><p>上述方法返回结果为元组<code>tuple</code>。<br>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db_config=&#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'mysql'</span></span><br><span class="line">    &#125;</span><br><span class="line">    conn = pymysql.connect(**db_config)</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line">cnm = conn_mysql()</span><br><span class="line">cus = cnm.cursor()</span><br><span class="line">sql = <span class="string">'select host,user from user'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cus.execute(sql)</span><br><span class="line">    print(cus.fetchmany(size=<span class="number">1</span>))    <span class="comment">#输出结果：(('localhost', 'mysql.session'),)</span></span><br><span class="line">    print(cus.fetchall())    <span class="comment">#输出结果：(('localhost', 'mysql.sys'), ('localhost', 'root'))</span></span><br><span class="line">    print(cus.fetchone())    <span class="comment">#输出结果：None</span></span><br><span class="line">    cus.close()    <span class="comment">#关闭游标对象</span></span><br><span class="line">    cnm.commit()    <span class="comment">#正确则提交</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    cnm.rollback()    <span class="comment">#错误则回滚</span></span><br><span class="line">    print(<span class="string">"错误"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cnm.close()    <span class="comment">#数据库连接需要关闭</span></span><br></pre></td></tr></table></figure></p><p>说明：<br>执行该sql最后结果为3条，<code>fetchall()</code>、<code>fetchmany()</code>和<code>fetchone()</code>出现位置不同，则结果不同。<br>fetchmany(size=1) 取出结果集中的第一条。此时游标处于第二行开始位置。<br>fetchall() 取出结果集中的全部，也就是游标当前位置至结束，此时游标处于结果集末尾。<br>fetchone() 取出结果集中的下一条，此时游标处于末尾，返回None。<br><strong>executemany说明</strong><br>executemany()主要是针对一条sql需要执行多次，每次执行的参数不同情况。数据量较多时建议使用executemany()方法，速度较快。<br>下面是executemany()简单示例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'test'</span>)</span><br><span class="line">cus = conn.cursor()</span><br><span class="line">sql = <span class="string">'insert into test(id, name) values(%s, %s)'</span></span><br><span class="line">args = [(<span class="number">1</span>, <span class="string">'Alice'</span>), (<span class="number">2</span>, <span class="string">'Bob'</span>), (<span class="number">3</span>, <span class="string">'Cellary'</span>)]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(cus.executemany(sql, args))    <span class="comment">#输出结果：3</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"执行出错：&#123;0&#125;"</span>.format(e))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cus.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>python编程中使用pymysql进行数据库的连接及诸如查询/插入/更新等操作，但是每次连接mysql数据库请求时都是独立的额请求，比较浪费资源，而且访问数量达到一定数量时，对mysql性能会产生较大的影响。因此在实际使用过程中通常会使用数据库的连接池技术来访问数据库，从而实现资源复用。同时也可以保证数据库不会因为连接数过多而造成数据库宕机。<br>在python中<code>DBUtils</code>是一套数据库连接池包，提供2种接口。  </p><ul><li>PersistentDB ：提供线程专用的数据库连接，并自动管理连接。</li><li>PooledDB ：提供线程间可共享的数据库连接，并自动管理连接。</li></ul><p>下面使用PooledDB示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">db_config = &#123;</span><br><span class="line">        <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"user"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="string">"db"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="comment"># "charset": "utf8"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">spool = PooledDB(pymysql, <span class="number">5</span>, **db_config)  <span class="comment"># 5为连接池里的最少连接数</span></span><br><span class="line">conn = spool.connection()  <span class="comment"># 以后每次需要数据库连接就是用connection（）函数获取连接</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line">SQL = <span class="string">"select * from test;"</span></span><br><span class="line">r = cur.execute(SQL)</span><br><span class="line">r = cur.fetchall()</span><br><span class="line">print(r)</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>常见的mysql操作温习<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看所有的库  <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">切换数据库  <span class="keyword">use</span> <span class="keyword">test</span></span><br><span class="line">查看库中所有的表  <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">查看数据库连接数  <span class="keyword">show</span> <span class="keyword">processlist</span></span><br><span class="line">授权超级用户  <span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'user'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line">查询建表语句 <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student\G</span><br><span class="line">查询表结构 <span class="keyword">desc</span> student;</span><br><span class="line">查看index  <span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p><code>\G</code>可以使结果显示更容易查看。<br>数据库操作其实就是SQL语句，介绍常用的<code>增删改查</code>语句。  </p><ul><li>建表create<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    StdID <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    StdName <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    Gender enum(<span class="string">'M'</span>,<span class="string">'F'</span>),</span><br><span class="line">    Age <span class="built_in">int</span>,</span><br><span class="line">    Score <span class="built_in">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>mysql中常用数据类型为<code>int</code>(整型)和<code>varchar</code>(字符型)，当字段取值为固定值时，可以采用枚举类型<code>enum</code>。<br>char和varchar区别在于存储数据时，当数据大小小于声明的大小时，<code>varchar</code>按照实际数据大小存放，<code>char</code>则会添加空格至声明的数据大小。<br>varchar(5)存储123，实际存储为<code>123</code>。<br>char(5)存储123，实际存储为<code>123</code>(后面带2空格)。</p><ul><li>插入insert<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Gender,Age,Score)<span class="keyword">values</span>(<span class="number">01</span>,<span class="string">'xiaohh'</span>,<span class="string">'M'</span>,<span class="number">18</span>,<span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Score,Age)<span class="keyword">values</span>(<span class="number">02</span>,<span class="string">'Bob'</span>,<span class="number">59</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Score)<span class="keyword">values</span>(<span class="number">03</span>,<span class="string">'Alice'</span>,<span class="number">68</span>),(<span class="number">04</span>,<span class="string">'Lisa'</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure></li></ul><p>最后一条语句为插入多行的写法。</p><ul><li><p>更新update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> Score=<span class="number">100</span> <span class="keyword">where</span> StdID=<span class="number">01</span> <span class="keyword">and</span> Score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> StdID,Score <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> Score &gt; <span class="number">59</span> <span class="keyword">and</span> Gender=<span class="string">'M'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> Score &lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure></li></ul><p><code>truncate</code>：清空表中的数据，和不带where条件的delete作用一样。<br><code>drop</code>：删除表结构。</p><ul><li><p>创建索引index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_std_stID <span class="keyword">on</span> student(StdID);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">index</span> idx_std_stScore(StdID,Score);</span><br></pre></td></tr></table></figure></li><li><p>删除索引index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">index</span> idx_std_stScore;</span><br></pre></td></tr></table></figure></li></ul><p>通过常见索引可以加快语句查询的速度，类似于字典中的目录。<br>那么我们如何确定语句是否使用索引呢？使用explain+sql语句即可。<br><code>explain select StdID from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_StdID.png" alt="mysql_explain_StdID" title="mysql_explain_StdID"><br><code>explain select Score from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_Score.png" alt="mysql_explain_Score" title="mysql_explain_Score"><br><code>explain select Age from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_Age.png" alt="mysql_explain_Age" title="mysql_explain_Age"><br>从字段<code>key</code>中可以看到索引名称，若为null则表示未使用索引。<br><strong>备注</strong><br>对于sql语句及index索引只是介绍基本的语法规则，更多内容以后继续学习。<br>查询中可能涉及到多表的<code>join</code>，可能会用到分组<code>group by</code>，也可能会使用到更多的<code>count()</code>、<code>order by</code>等函数。<br>索引可能会涉及到唯一索引<code>UNIQUE INDEX</code>、全文索引<code>FULLTEXT INDEX</code>等内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于mysql中的事务、python访问mysql简单步骤、mysql常见操作等内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python访问mysql&lt;/a&gt;查看。&lt;br&gt;在前面介绍&lt;code&gt;python访问mysql&lt;/code&gt;的一个典型执行过程中出现了&lt;code&gt;cursor()&lt;/code&gt;方法，它就是游标。我们执行sql命令或者得到执行结果都需要使用游标。  &lt;/p&gt;
&lt;h3 id=&quot;curosr&quot;&gt;&lt;a href=&quot;#curosr&quot; class=&quot;headerlink&quot; title=&quot;curosr()&quot;&gt;&lt;/a&gt;curosr()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cursor&lt;/code&gt;游标是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。可以将游标当做一个指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="游标" scheme="https://rosinelan.github.io/tags/%E6%B8%B8%E6%A0%87/"/>
    
      <category term="cursor" scheme="https://rosinelan.github.io/tags/cursor/"/>
    
      <category term="insert" scheme="https://rosinelan.github.io/tags/insert/"/>
    
      <category term="delete" scheme="https://rosinelan.github.io/tags/delete/"/>
    
      <category term="update" scheme="https://rosinelan.github.io/tags/update/"/>
    
      <category term="select" scheme="https://rosinelan.github.io/tags/select/"/>
    
      <category term="drop" scheme="https://rosinelan.github.io/tags/drop/"/>
    
  </entry>
  
  <entry>
    <title>python访问mysql</title>
    <link href="https://rosinelan.github.io/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/"/>
    <id>https://rosinelan.github.io/2018/05/06/python访问mysql/</id>
    <published>2018-05-06T14:26:38.000Z</published>
    <updated>2018-05-09T12:59:36.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>python中的<code>DB-API</code>为大多数数据库实现了接口，使用它连接数据库，就可以使用相同的方式操作各数据库。<br>使用<code>DB-API</code>基本流程<br><a id="more"></a></p><ol><li>引入<code>API</code>模块。  </li><li>获取数据库连接参数，打开数据库连接。  </li><li>执行SQL语句和存储过程。  </li><li>关闭数据库连接。  </li></ol><p>使用<code>pymysql</code>(同时支持python2和3)作为连接mysql数据库的接口。直接使用<code>pip install pymysql</code>安装即可。<br>注意：<code>pip</code>安装之后使用pycharm<code>import pymysql</code>可能出现无法使用的情况，此时可直接在pycharm中安装<code>pymysql</code>包。通过File–&gt;Settings–&gt;Project:XXX–&gt;Project Interpreter可以看到所有已安装的包，点击右边绿色<code>+</code>即可添加。<br>python2.X中还可以使用<code>MySQLdb</code>(仅支持python2)，点击<a href="https://pypi.org/project/MySQL-python/1.2.5/#files" target="_blank" rel="noopener">mysqldb</a>可下载安装。  </p><h3 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h3><h4 id="mysql中的事务"><a href="#mysql中的事务" class="headerlink" title="mysql中的事务"></a>mysql中的事务</h4><p>事务是必须满足4个条件（ACID）： Atomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）。  </p><ul><li>原子性：一组事务，要么成功；要么撤回。</li><li>稳定性：有非法数据（外键约束之类），事务撤回。</li><li>隔离性：事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。</li><li>可靠性：软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候吧事务保存到日志里<br>mysql中<code>autocommit</code>参数默认为开启，若需要多条sql语句同时提交，可以通过<code>start transaction</code>开启事务，通过<code>rollback</code>回滚事务，通过<code>commit</code>提交事务。<br>查询<code>autocommit</code>参数状态：<code>show variables like autocommit</code>。<h4 id="mysql常用操作"><a href="#mysql常用操作" class="headerlink" title="mysql常用操作"></a>mysql常用操作</h4></li><li>mysql安装<br>当前mysql最新版本为<code>8.0</code>,常用版本为<code>5.6</code>和<code>5.7</code>，可以根据自己需要选择合适版本。<br>点击<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载</a>跳转下载。  </li><li><p>常用操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">授权超级用户 <span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'user'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;  </span><br><span class="line">创建普通用户并授权 <span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> db1.user1 <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;   </span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> db1.* <span class="keyword">to</span> <span class="string">'user2'</span>@<span class="string">'10.0.2.100'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'111222'</span>; </span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> db1.* <span class="keyword">to</span> <span class="string">'user3'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'231222'</span>;</span><br><span class="line">更改密码 <span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">"newpwd"</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'username'</span> ;</span><br><span class="line"></span><br><span class="line">查看库 <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">查看都有哪些库  <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">查看某个库的表 <span class="keyword">use</span> db; <span class="keyword">show</span> <span class="keyword">tables</span> \G; </span><br><span class="line">查看表的字段 desc tb;</span><br><span class="line">查看建表语句 <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb;</span><br><span class="line">当前是哪个用户 <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">当前库 <span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">创建库 <span class="keyword">create</span> <span class="keyword">database</span> db1; </span><br><span class="line">创建表 <span class="keyword">create</span> <span class="keyword">table</span> t1 (<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">40</span>) adress <span class="built_in">varchar</span>(<span class="number">30</span>));  </span><br><span class="line">查看数据库版本 <span class="keyword">select</span> <span class="keyword">version</span>(); </span><br><span class="line">查看mysql状态 <span class="keyword">show</span> <span class="keyword">status</span>;</span><br><span class="line">修改mysql参数 <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connect%'</span>; <span class="keyword">set</span> <span class="keyword">global</span> max_connect_errors = <span class="number">1000</span>; </span><br><span class="line">查看mysql队列 <span class="keyword">show</span> <span class="keyword">processlist</span>; </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">sleep的可以忽略，qurey查询的才有</span><br><span class="line"> </span><br><span class="line">查询 <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mysql.user; <span class="keyword">select</span> * <span class="keyword">from</span> mysql.db; <span class="keyword">select</span> * <span class="keyword">from</span> mysql.db <span class="keyword">where</span> host <span class="keyword">like</span> <span class="string">'10.0.%'</span>; </span><br><span class="line">插入 <span class="keyword">update</span> db1.t1 <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'aaa'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;  </span><br><span class="line">清空表 <span class="keyword">truncate</span> <span class="keyword">table</span> db1.t1; </span><br><span class="line">删除表 <span class="keyword">drop</span> <span class="keyword">table</span> db1.t1; </span><br><span class="line">删除数据库 <span class="keyword">drop</span> <span class="keyword">database</span> db1; </span><br><span class="line">修复表 <span class="keyword">repair</span> <span class="keyword">table</span> tb1 [<span class="keyword">use</span> frm];</span><br><span class="line">查看权限<span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> root@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line">执行sql mysql -uroot -p1234556 -e "<span class="keyword">select</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'/home/mysql/1.txt'</span> <span class="keyword">from</span> mysql.user;"；</span><br></pre></td></tr></table></figure></li><li><p>数据库连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=pymysql.connect(host=<span class="string">"192.168.48.128"</span>,user=<span class="string">"xiang"</span>,passwd=<span class="string">"123456"</span>,db=<span class="string">"python"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>参数说明<br>host：数据库主机名.默认是用本地主机。<br>user：数据库登陆名.默认是当前用户。<br>passwd：数据库登陆的秘密.默认为空。<br>db：要使用的数据库名.没有默认值。<br>port：MySQL服务使用的TCP端口.默认是3306，数字类型。</p><h3 id="python访问mysql"><a href="#python访问mysql" class="headerlink" title="python访问mysql"></a>python访问mysql</h3><p>一个典型的执行过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">"192.168.48.136"</span>, port=<span class="number">3306</span>, user=<span class="string">"xiang"</span>, passwd=<span class="string">"xiang"</span>, db=<span class="string">"test"</span>)    <span class="comment">#创建连接</span></span><br><span class="line">cus = conn.cursor()    <span class="comment">#连接对象的cursor方法</span></span><br><span class="line">sql = <span class="string">"select * from test2;"</span></span><br><span class="line">cus.execute(sql)    <span class="comment">#执行sql</span></span><br><span class="line">result = cus.fetchall()    <span class="comment">#游标对象的方法，获取所有返回结果</span></span><br><span class="line">print(result)</span><br><span class="line">cus.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><p>在实际编码过程中，推荐通过函数形式调用，方便重复使用和修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db_config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'192.168.48.128'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'xiang'</span>,</span><br><span class="line">        <span class="string">'passwd'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'python'</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cnx = pymysql.connect(**db_config)</span><br><span class="line">    <span class="keyword">return</span> cnx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;python中的&lt;code&gt;DB-API&lt;/code&gt;为大多数数据库实现了接口，使用它连接数据库，就可以使用相同的方式操作各数据库。&lt;br&gt;使用&lt;code&gt;DB-API&lt;/code&gt;基本流程&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="mysql" scheme="https://rosinelan.github.io/tags/mysql/"/>
    
      <category term="pymysql" scheme="https://rosinelan.github.io/tags/pymysql/"/>
    
      <category term="事务" scheme="https://rosinelan.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>python正则表达式练习题</title>
    <link href="https://rosinelan.github.io/2018/05/04/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/05/04/python正则表达式练习题/</id>
    <published>2018-05-04T06:43:36.000Z</published>
    <updated>2018-05-04T13:15:35.136Z</updated>
    
    <content type="html"><![CDATA[<p>针对前面<code>正则表达式</code>及<code>re</code>模块进行复习，然后题目实战。  </p><h3 id="正则常用语法"><a href="#正则常用语法" class="headerlink" title="正则常用语法"></a>正则常用语法</h3><p>熟悉最常用的正则语法。  </p><ul><li>单字符匹配<br><code>.</code> 匹配除换行符之外的任意一个字符。<br><code>[...]</code> 表示匹配一个字符集集合，如<code>[A-Za-z0-9]</code>表示匹配所有字母和数字。  <a id="more"></a><code>[^...]</code> 表示匹配除该字符集集合指定字符外的任意字符。如<code>[^0-9]</code>表示匹配除数字之外的所有字符。<br><code>\</code> 转义字符，用来改变特殊字符的原有含义(使其表示本身)。  </li><li>预定义字符集<br><code>\d</code> 表示数字<br><code>\D</code> 表示非数字<br><code>\s</code> 表示空白字符<br><code>\S</code> 表示非空白字符<br><code>\w</code> 表示字母和数字<br><code>\W</code> 表示非字母和数字</li><li>字符次数匹配<br><code>*</code> 匹配前一个字符0或者无限次<br><code>+</code> 匹配前一个字符1或者无限次<br><code>?</code> 匹配前一个字符0或者1次</li><li>边界匹配<br><code>^</code> 匹配字符串开头<br><code>$</code> 匹配字符串结尾  </li><li>分组<br><code>(...)</code> 分组<br><code>(?P&lt;NAME&gt;)</code> 分组，并且指定该分组的名称为NAME。<br><code>(?P=NAME)</code> 引用名称为NAME的分组所匹配到的字符串，配合上一个使用。  <h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3>从地址<code>http://qwd.jd.com/fcgi-bin/qwd_searchitem_ex?skuid=26878432382%7C1658610413%7C26222795271%7C25168000024%7C11731514723%7C26348513019%7C20000220615%7C4813030%7C25965247088%7C5327182%7C19588651151%7C1780924%7C15495544751%7C10114188069%7C27036535156%7C10123099847%7C26016197600%7C10503200866%7C16675691362%7C15904713681</code>得到的json字符串，使用正则匹配，查找出商品对应的<code>skuid</code>(商品唯一编码)和<code>skuimgurl</code>(商品图片)。</li><li>题目分析</li></ul><ol><li>首先使用简单的爬虫功能得到需要匹配的数据；</li><li>根据json字符串的规律编写对应的正则表达式</li><li>输出</li></ol><ul><li>代码实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://qwd.jd.com/fcgi-bin/qwd_searchitem_ex?skuid=26878432382%7C1658610413%7C26222795271%7C25168000024%7C11731514723%7C26348513019%7C20000220615%7C4813030%7C25965247088%7C5327182%7C19588651151%7C1780924%7C15495544751%7C10114188069%7C27036535156%7C10123099847%7C26016197600%7C10503200866%7C16675691362%7C15904713681"</span></span><br><span class="line">session = requests.session()</span><br><span class="line">r = session.get(url)    <span class="comment">#简单爬虫使用示意，后面会讲到</span></span><br><span class="line">html = r.text</span><br><span class="line"></span><br><span class="line">reg = re.compile(<span class="string">r"\s*\"skuid\":\"(\d+)\",\s*\S*\s*\S*\s*\"skuimgurl\":\"(\S*.jpg)\""</span>)    <span class="comment">#正则表达式</span></span><br><span class="line">result = reg.findall(html)</span><br><span class="line">print(result)    <span class="comment">#使用()分组，输出结果为2个分组的数据</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'26878432382'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18226/169/1318243724/390477/5b0718ff/5ac44edcNa350dbd9.jpg'</span>), (<span class="string">'5327182'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17461/138/1837663326/68820/5f8da5cd/5ad9b1e2N42bce837.jpg'</span>), (<span class="string">'11731514723'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19231/337/2147939016/196162/4210a6ae/5aea6250N0235cd05.jpg'</span>), (<span class="string">'19588651151'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t11341/60/1553062810/120774/ab9534ff/5a02c3f4Naebe34b7.jpg'</span>), (<span class="string">'15495544751'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18088/43/2048465630/167669/dd3c8b7b/5ae12c40N57c98ea8.jpg'</span>), (<span class="string">'16675691362'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18490/21/2141098141/120513/b3ca521a/5ae90247N3b4909ae.jpg'</span>), (<span class="string">'26222795271'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19441/291/1597121495/310550/9bc2e141/5ad05fc0N1510cae5.jpg'</span>), (<span class="string">'1780924'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17167/97/1957869461/43204/d064647b/5adda3e0Ne1d3aa86.jpg'</span>), (<span class="string">'4813030'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19198/83/1908967366/189260/7538e84b/5adda865N8f547981.jpg'</span>), (<span class="string">'27036535156'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19399/140/2175516321/123017/41e6d6a8/5aea87d3N9736cc9d.jpg'</span>), (<span class="string">'26348513019'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t14857/240/2643838980/220943/c982fda1/5aaf2002Ndd25bc52.jpg'</span>), (<span class="string">'26016197600'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19894/76/195725612/190103/23c60ca1/5aeabb94N3e0266bc.jpg'</span>), (<span class="string">'25168000024'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17629/301/2062161127/434152/aa3560a5/5ae319f9N1ae1146c.jpg'</span>), (<span class="string">'25965247088'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19270/67/2232771964/253207/25f41fd9/5aea61b0Nfd21a809.jpg'</span>), (<span class="string">'10123099847'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t15511/14/1469153129/729958/b0af0ca1/5a533063N15fea56c.jpg'</span>), (<span class="string">'20000220615'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t16426/172/2638358261/151693/87020840/5ab869ddN30621fec.jpg'</span>), (<span class="string">'15904713681'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17287/197/2249621651/366556/d36ae213/5aeadb4cN97f413f3.jpg'</span>), (<span class="string">'10114188069'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19927/88/179058964/386205/afd08ef1/5ae9717fN07f116d9.jpg'</span>), (<span class="string">'10503200866'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18139/246/1628563908/114414/9315ac7c/5ad0647eNa9f1e2af.jpg'</span>), (<span class="string">'1658610413'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19411/79/1017814440/108641/1b185d6d/5ab8b479Nd2417e97.jpg'</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><p>根据文件<code>ga10.wms5.jd.com.txt</code>中的内容，分别匹配<code>upstream</code>和<code>location</code>{}中的内容，将对应内容分别写入文件夹<code>upstream</code>和<code>location</code>，文件夹中分别是以配置名称命名的配置内容。显示结果如下<br><img src="http://cdn.rosinelan.com/blog/program/upstream.png" alt="regular" title="regular">。</p><ul><li>题目分析</li></ul><ol><li>正则匹配<code>upstream</code>内容，分组应包括名称及全部内容，名称用于文件命名，全部内容用于写入文件。  </li><li>利用<code>os</code>模块进行文件夹判断、创建、切换等功能的实现。  </li><li>最后写入文件。  </li><li><code>location</code>处理方法基本一致。 </li></ol><ul><li>代码实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regupstream = re.compile(<span class="string">r"\s*(upstream\s+(\S+)\s+&#123;[^&#125;]+&#125;)"</span>)</span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"ga10.wms5.jd.com.txt"</span>) <span class="keyword">as</span> fum:</span><br><span class="line">    upstmlist = regupstream.findall(fum.read())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"upstream"</span>):</span><br><span class="line">        os.mkdir(<span class="string">"upstream"</span>)</span><br><span class="line">    os.chdir(<span class="string">"upstream"</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> upstmlist:</span><br><span class="line">        <span class="keyword">with</span> codecs.open(item[<span class="number">1</span>], <span class="string">"w"</span>) <span class="keyword">as</span> fumw:</span><br><span class="line">            fumw.write(item[<span class="number">0</span>])</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reglocation = re.compile(<span class="string">r"\s*(location\s+\/(\S+)\/\s+&#123;[^&#125;]+&#125;)"</span>)</span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"ga10.wms5.jd.com.txt"</span>) <span class="keyword">as</span> flc:</span><br><span class="line">    lcalist = reglocation.findall(flc.read())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"location"</span>):</span><br><span class="line">        os.mkdir(<span class="string">"location"</span>)</span><br><span class="line">    os.chdir(<span class="string">"location"</span>)</span><br><span class="line">    <span class="keyword">for</span> ilocal <span class="keyword">in</span> lcalist:</span><br><span class="line">        filename1 = ilocal[<span class="number">1</span>]+<span class="string">".conf"</span></span><br><span class="line">        <span class="keyword">with</span> codecs.open(filename1, <span class="string">"w"</span>) <span class="keyword">as</span> flcw:</span><br><span class="line">            flcw.write(ilocal[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/upstream.png" alt="regular_rex" title="regular_rex"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;针对前面&lt;code&gt;正则表达式&lt;/code&gt;及&lt;code&gt;re&lt;/code&gt;模块进行复习，然后题目实战。  &lt;/p&gt;
&lt;h3 id=&quot;正则常用语法&quot;&gt;&lt;a href=&quot;#正则常用语法&quot; class=&quot;headerlink&quot; title=&quot;正则常用语法&quot;&gt;&lt;/a&gt;正则常用语法&lt;/h3&gt;&lt;p&gt;熟悉最常用的正则语法。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单字符匹配&lt;br&gt;&lt;code&gt;.&lt;/code&gt; 匹配除换行符之外的任意一个字符。&lt;br&gt;&lt;code&gt;[...]&lt;/code&gt; 表示匹配一个字符集集合，如&lt;code&gt;[A-Za-z0-9]&lt;/code&gt;表示匹配所有字母和数字。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="re" scheme="https://rosinelan.github.io/tags/re/"/>
    
      <category term="正则" scheme="https://rosinelan.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="爬虫" scheme="https://rosinelan.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(四)</title>
    <link href="https://rosinelan.github.io/2018/04/29/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E5%9B%9B/"/>
    <id>https://rosinelan.github.io/2018/04/29/python内置模块-四/</id>
    <published>2018-04-29T13:44:57.000Z</published>
    <updated>2018-05-04T08:42:33.685Z</updated>
    
    <content type="html"><![CDATA[<p>内置模块<code>datetime</code>、<code>time</code>、<code>commands</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。<br>内置模块<code>subprocess</code>、<code>os</code>、<code>random</code>、<code>sys</code>、<code>logging</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/" target="_blank" rel="noopener">python内置模块(二)</a>查看。<br>内置模块<code>hashlib</code>、<code>StringIO</code>、<code>BytesIO</code>、<code>Json</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/" target="_blank" rel="noopener">python内置模块(三)</a>查看。  </p><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p><code>re</code>模块是python中处理正则表达式的一个模块，通过re模块的方法，把正则表达式编译成正则对象，以便使用正则对象的方法。<br><a id="more"></a></p><h4 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h4><p>首先推荐一个在线的正则表达式验证调试网站<a href="https://regex101.com/" target="_blank" rel="noopener">regular expressions 101</a>。支持<code>python</code>、<code>javascript</code>、<code>python</code>和<code>golang</code>4种语言的正则语法。使用时注意勾选正确的语言。<br>正则表达式中的字符分为<code>普通字符</code>和<code>元字符</code>，通过普通字符和元字符组合成一个特定匹配规则的表达式。除元字符之外的都是普通字符。下面介绍部分元字符。  </p><ul><li>单个字符匹配<br><code>.</code> 匹配换行符<code>\n</code>之外的任意一个字符。<br><code>[...]</code> 表示一个字符集集合。被匹配的文本对应位置可以是这个字符集合中指定的任意字符。<br><code>[^...]</code> 表示匹配除该字符集合指定的字符外的其它所有字符中的任意一个。<br><code>\</code> 转义字符，可以用来改变特殊字符的原有含义。</li><li>预定义字符集<br><code>\d</code> 数字 [0-9]<br><code>\D</code> 非数字 [^\d]<br><code>\s</code> 空白字符 [&lt;空格&gt;\t\r\n\f\v]<br><code>\S</code> 非空白字母 [^\s]<br><code>\w</code> 单词字符 [A-Za-z0-9]<br><code>\W</code> 非单词字符 [^\w]  </li><li>字符次数匹配<br><code>*</code> 匹配前一个字符0或无限次<br><code>+</code> 匹配前一个字符1或无限次<br><code>?</code> 匹配前一个字符0或1次<br><code>{m}</code> 匹配前一个字符m次<br><code>{m, n}</code> 匹配前一个字符m至n次。<br><code>*? + ???(m,n)?</code> 使变成非贪婪模式</li><li>边界匹配<br><code>^</code> 匹配字符串开头。多行模式下匹配每一行的开头。<br><code>$</code> 匹配字符串末尾。多行模式下匹配每一行的末尾。<br><code>\A</code> 仅匹配字符串开头。<br><code>\Z</code> 仅匹配字符串末尾。<br><code>\b</code> 匹配\w和\W之间。<br><code>\B</code> [^\b]</li><li>逻辑与分组<br><code>|</code> 表示逻辑或，代表它左右两边的表达式会任意匹配一个。总是优先匹配左边的表达式，若匹配成功则跳过右边的表达式匹配。若<code>|</code>没有出现在<code>()</code>中，则它的有效范围是整个正则表达式。<br><code>(...)</code> 被括起来的表达式表示一个分组，且每一个分组都有一个正整数编号，从表达式开始每遇到一个分组的左括号，分组编号就+1,。另外，分组表达式作为一个整体，后面可接表示词次数的字符。分组表达式中的<code>|</code>仅在该分组中有效。<br><code>(?P&lt;NAME...&gt;)</code> 表示一个分组，除了原有的分组编号外，又指定了一个分组名称。<br><code>\&lt;number&gt;</code> 引用编号为<code>&lt;number&gt;</code>的分组所匹配到的字符串。<br><code>(?P=name)</code> 引用名称为<code>name</code>的分组所匹配到的字符串。  </li><li>特殊构造<br><code>(?:...)</code> (…)的不分组版本，用于使用<code>|</code>或后接数量词。<br><code>(?#...)</code> #后的内容将作为注释被忽略。<br><code>(?=...)</code> 后面的字符串内容需要匹配表达式才能成功匹配。不消耗字符串的内容。<br><code>(?&lt;=...)</code> 前面的字符串内容需要匹配表达式才能成功匹配。不消耗字符串的内容。<br><code>(?!...)</code> 后面的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。<br><code>(?&lt;!...)</code> 前面的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。<br><code>(?iLmsux)</code><br><code>(?(id/name)yes-pattern|no-pattern)</code> 编号为id或别名为name的分组匹配到字符，则需要匹配yes-pattern表达式，否则需要匹配no-pattern表达式。<code>|no-pattern</code>可以省略。<br>关于更多的逻辑分组、特殊构造可以查看图片<img src="http://cdn.rosinelan.com/blog/program/regular.png" alt="regular"><h4 id="re方法"><a href="#re方法" class="headerlink" title="re方法"></a>re方法</h4></li><li>compile(pattern, flags=0)<br>使用<code>compile()</code>函数编译正则表达式，返回正则表达式对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(p)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">_sre</span>.<span class="title">SRE_Pattern</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>表达式对象的方法和属性<br>通过<code>compile()</code>函数返回的就是表达式对象</p><ul><li><p>match(self, string, pos=0, endpos=-1)<br>在string字符串开始位置匹配正则表达式，如果0个或者多个字符被匹配则返回相应的匹配对象，如果不匹配则返回None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(p, <span class="string">'hello'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(p, <span class="string">'hello123'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>fullmatch(self, string, pos=0, endpos=-1)<br>整个string字符串与该正则表达式对象匹配则返回相应的匹配对象，否则返回None。相当于给正则表达式加上了边界字元字符<code>^</code>和<code>$</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.fullmatch(p, <span class="string">'hello'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.fullmatch(p, <span class="string">'hello123'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.fullmatch(p, <span class="string">'hello123'</span>))</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></li><li><p>search(self, string, pos=0, endpos=-1)<br>扫描整个string字符串，查找正则表达式对象可以匹配的子串第一次出现的位置，并返回相应的匹配对象，如果没有匹配的内容则返回None。<br><code>search()</code>在字符串的任意位置进行匹配检测；<code>match</code>仅在字符串开始位置进行匹配检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="string">'abcdef'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.search(<span class="string">r'^c'</span>, f))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.search(<span class="string">r'^a'</span>, f))</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'a'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>findall(self, string, pos=0, endpos=-1)<br>搜索string字符串中与正则表达式匹配的所有子串，以列表形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">"He was carefully disguised but captured quickly by police."</span>    <span class="comment">#查找以ly结尾的单词</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.findall(<span class="string">r'\w+ly'</span>, text))</span><br><span class="line">[<span class="string">'carefully'</span>, <span class="string">'quickly'</span>]</span><br></pre></td></tr></table></figure></li><li><p>finditer(self, string, pos=0, endpos=-1)<br>搜索string字符串中与正则表达式匹配的所有子串，以迭代器形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.finditer(<span class="string">r'\w+ly'</span>, text))</span><br><span class="line">&lt;callable_iterator object at <span class="number">0x0000028AF0429710</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(<span class="string">r'\w+ly'</span>, text):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"&#123;0&#125;-&#123;1&#125;:&#123;2&#125;"</span>.format(i.start(), i.end(), i.group()))</span><br><span class="line">...</span><br><span class="line"><span class="number">7</span><span class="number">-16</span>:carefully</span><br><span class="line"><span class="number">40</span><span class="number">-47</span>:quickly</span><br></pre></td></tr></table></figure></li><li><p>sub(self, repl, string, count=0)<br>替换string字符串中与正则表达式匹配的count个子串，返回替换修改后的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'pro--gr-am'</span>    <span class="comment">#替换出现的-字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.sub(<span class="string">r'-+'</span>, <span class="string">''</span>, text))</span><br><span class="line">program</span><br></pre></td></tr></table></figure></li><li><p>split(self, string, maxsplit=0)<br>以正则表达式匹配的字符串为分隔符，对一个字符串进行分割，以列表形式返回分隔后的各个字符串。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'Words, words, words.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.split(<span class="string">r'\W+'</span>, text))</span><br><span class="line">[<span class="string">'Words'</span>, <span class="string">'words'</span>, <span class="string">'words'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure></li></ul><p>上述方法中部分参数说明<br><code>string</code> 要匹配或处理的字符串<br><code>pos</code> 表示从string字符串的哪个位置开始<br><code>endpos</code> 表示到string字符串的哪个位置结束<br><code>maxsplit</code> 表示最大切割次数，默认值0，表示能切割多少次就尽可能多的切割多少次  </p><p>匹配对象的方法<br>用正则表达式对象的regex.match()、regex.fullmatch()和regex.search()得到的结果就是一个匹配对象</p><ul><li>group(self, *args)<br>返回一个或多个指定捕获组匹配到的内容。若只有一个参数则返回值是一个单独的字符串；若有多个参数则返回值是包含每一个指定分组所对应的匹配字符串的元组；若不指定参数，则group1默认为0，将返回整个正则表达式所匹配的内容。</li><li>groups(self, default=None)<br>返回一个包含所有分组所匹配内容的元组，如果某个分组没有匹配的内容，则取default所指定的值。</li><li>groupdict(self, default=None)<br>返回一个包含所有命名分组名称及其所匹配内容的字典对象，如果某个分组没有匹配的内容，则取default所指定的值。</li><li>start()<br>返回匹配到内容的开始位置。  </li><li>end()<br>返回匹配到内容的结束位置。  </li><li>span()<br>返回包含匹配到内容开始和结束位置的元组<code>(start, end)</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'.*name\s+is\s+(\w+).*am\s+(?P&lt;age&gt;\d&#123;1,3&#125;)\s+years.*tel\s+is\s+(?P&lt;tel&gt;\d&#123;11&#125;).*'</span>, re.DOTALL)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>My name is Tom,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>I am 16 years old,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>My tel is 13972773480.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = p.match(string)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group())</span><br><span class="line"></span><br><span class="line">My name <span class="keyword">is</span> Tom,</span><br><span class="line">I am <span class="number">16</span> years old,</span><br><span class="line">My tel <span class="keyword">is</span> <span class="number">13972773480.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">My name <span class="keyword">is</span> Tom,</span><br><span class="line">I am <span class="number">16</span> years old,</span><br><span class="line">My tel <span class="keyword">is</span> <span class="number">13972773480.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">1</span>))</span><br><span class="line">Tom</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">2</span>))</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">3</span>))</span><br><span class="line"><span class="number">13972773480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="string">'tel'</span>))</span><br><span class="line"><span class="number">13972773480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.groups())</span><br><span class="line">(<span class="string">'Tom'</span>, <span class="string">'16'</span>, <span class="string">'13972773480'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.groupdict())</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="string">'16'</span>, <span class="string">'tel'</span>: <span class="string">'13972773480'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>re</code>在模块级别提供的函数如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">fullmatch(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">search(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">findall(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line">split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>函数名称和<code>re</code>对象所提供的函数名称同名，其实就是正则表达式对象方法的封装，功能相同。<br>通过<code>complie()</code>声明正则对象，然后调用正则对象方法效率比直接使用模块级别函数高。  </p><ul><li>正则表达式的<code>r</code>前缀<br>对于一些特殊的字符需要通过<code>/</code>(反斜线)进行转义处理才能被正确的识别。加上<code>r</code>(raw，原始的意思)表示字符串的字面值就是其真实值，不需要进行转义等操作。  </li></ul><p>关于python正则语法，可以点击<a href="https://docs.python.org/3/howto/regex.html#regex-howto" target="_blank" rel="noopener">Regular Expression HOWTO</a>查看更多内容。<br>关于python正则模块使用，可以点击<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">Regular expression operations</a>查看更多内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内置模块&lt;code&gt;datetime&lt;/code&gt;、&lt;code&gt;time&lt;/code&gt;、&lt;code&gt;commands&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;subprocess&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;random&lt;/code&gt;、&lt;code&gt;sys&lt;/code&gt;、&lt;code&gt;logging&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(二)&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;hashlib&lt;/code&gt;、&lt;code&gt;StringIO&lt;/code&gt;、&lt;code&gt;BytesIO&lt;/code&gt;、&lt;code&gt;Json&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(三)&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;headerlink&quot; title=&quot;re&quot;&gt;&lt;/a&gt;re&lt;/h3&gt;&lt;p&gt;&lt;code&gt;re&lt;/code&gt;模块是python中处理正则表达式的一个模块，通过re模块的方法，把正则表达式编译成正则对象，以便使用正则对象的方法。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="re" scheme="https://rosinelan.github.io/tags/re/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(三)</title>
    <link href="https://rosinelan.github.io/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/"/>
    <id>https://rosinelan.github.io/2018/04/27/python内置模块-三/</id>
    <published>2018-04-27T06:08:41.000Z</published>
    <updated>2018-04-27T15:08:50.030Z</updated>
    
    <content type="html"><![CDATA[<p>内置模块<code>datetime</code>、<code>time</code>、<code>commands</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。<br>内置模块<code>subprocess</code>、<code>os</code>、<code>random</code>、<code>sys</code>、<code>logging</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/" target="_blank" rel="noopener">python内置模块(二)</a>查看。  </p><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><p><code>haslib</code>模块为不同的安全哈希/安全散列(Secure Hash Algorithm)和信息摘要算法(Message Digest Algorithm)实现了一个公共的、通用的接口。haslib模块提供了很多算法的函数实现，例如：md5、sha1、sha224、sha256、sha384、sha512等。<br><a id="more"></a><br>此处简单介绍下集中数据加密方式</p><table><thead><tr><th>数据加密方式</th><th>描述</th><th>主要解决问题</th><th>常用算法</th></tr></thead><tbody><tr><td>对称加密</td><td>数据加密和解密使用相同的密钥</td><td>数据的机密性</td><td>DES,AES</td></tr><tr><td>非对称加密</td><td>也叫公钥加密，指数据加密和解密使用不同的密钥(密钥对)</td><td>身份验证</td><td>DSA,RSA</td></tr><tr><td>单向加密</td><td>只能加密数据，不能解密数据</td><td>数据的完整性验证</td><td>MD5,SHA系统算法</td></tr></tbody></table><p>摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的字符串(通常用16进制字符串表示)。常用的是<code>md5</code>算法。<br><strong>hashlib模块对应的属性和函数</strong>  </p><ul><li><p>hselib.new(name[, date])<br>通用的哈希对象构造函数，用于构造指定的哈希算法对应的哈希对象。其中<code>name</code>用于指定哈希算法名称，如<code>md5</code>、<code>sha1</code>，不区分大小写；<code>data</code>可选，表示初始数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">'md5'</span>)    <span class="comment">#构建hash对象</span></span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE948AD0</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.算法名称()<br>可以直接通过具体的哈希算法名称对应的函数获取哈希对象，如hashlib.md5()等。<br>hashlib.md5()和hashlib.new(‘md5’)是等价的。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5()</span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE9489E0</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.algorithms_guaranteed<br>它的值是该模块在所有平台都支持的哈希算法的名称集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.algorithms_guaranteed</span><br><span class="line">&#123;<span class="string">'sha384'</span>, <span class="string">'blake2b'</span>, <span class="string">'sha3_384'</span>, <span class="string">'shake_128'</span>, <span class="string">'sha3_256'</span>, <span class="string">'sha3_224'</span>, <span class="string">'md5'</span>, <span class="string">'sha3_512'</span>, <span class="string">'blake2s'</span>, <span class="string">'sha224'</span>, <span class="string">'shake_256'</span>, <span class="string">'sha256'</span>, <span class="string">'sha512'</span>, <span class="string">'sha1'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.algorithms_available<br>当前运行python解释器中可用的哈希算法的集合。<code>algorithms_guaranteed</code>是它的子集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.algorithms_available</span><br><span class="line">&#123;<span class="string">'md4'</span>, <span class="string">'sha3_384'</span>, <span class="string">'shake_128'</span>, <span class="string">'whirlpool'</span>, <span class="string">'SHA224'</span>, <span class="string">'blake2s'</span>, <span class="string">'ripemd160'</span>, <span class="string">'MD4'</span>, <span class="string">'sha1'</span>, <span class="string">'sha384'</span>, <span class="string">'SHA384'</span>, <span class="string">'ecdsa-with-SHA1'</span>, <span class="string">'md5'</span>, <span class="string">'SHA256'</span>, <span class="string">'DSA-SHA'</span>, <span class="string">'SHA1'</span>, <span class="string">'sha3_512'</span>, <span class="string">'shake_256'</span>, <span class="string">'sha'</span>, <span class="string">'sha256'</span>, <span class="string">'sha512'</span>, <span class="string">'DSA'</span>, <span class="string">'RIPEMD160'</span>, <span class="string">'blake2b'</span>, <span class="string">'dsaEncryption'</span>, <span class="string">'SHA512'</span>, <span class="string">'sha3_224'</span>, <span class="string">'sha224'</span>, <span class="string">'SHA'</span>, <span class="string">'sha3_256'</span>, <span class="string">'MD5'</span>, <span class="string">'dsaWithSHA'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>hash对象对应的属性和方法</strong>  </p><ul><li>hash.update()<br>更新哈希对象所要计算的数据，多次调用为累加效果。<br><code>m.update(a);m.update(b)</code>等价于<code>m.update(a+b)</code>。</li><li>hash.digest()<br>返回传递给update()函数的所有数据的摘要信息(二进制格式的字符串)</li><li>hash.hexdigest()<br>返回传递给update()函数的所有数据的摘要信息(十六进制格式的字符串)</li><li>hash.copy()<br>返回该哈希对象的一个copy(“clone”)，这个函数可以用来有效的计算共享一个公共初始化子串的数据的摘要信息。</li><li>hash.digest_size<br>hash结果的字节大小，即<code>hash.digest()</code>方法返回结果的字符串长度。该值对于哈希对象是固定的。md5:16，sha1:20, sha224:28。</li><li>hash.name<br>当前哈希对象对应的哈希算法的标准名称(小写)，可以直接传递给<code>hashlib.new()</code>函数来创建另外一个同类型的哈希对象。<br><strong>使用示例</strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = hashlib.md5()    <span class="comment">#创建hash对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.update(<span class="string">'hello world'</span>.encode(<span class="string">'utf-8'</span>))    <span class="comment">#更新hash对象的计算数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)</span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE9489E0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.hexdigest())    <span class="comment">#返回对应数据摘要信息(十六进制)</span></span><br><span class="line"><span class="number">5</span>eb63bbbe01eeed093cb22bb8f5acdc3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.digest())    <span class="comment">#返回对应数据摘要信息(二进制)</span></span><br><span class="line"><span class="string">b'^\xb6;\xbb\xe0\x1e\xee\xd0\x93\xcb"\xbb\x8fZ\xcd\xc3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.name)    <span class="comment">#返回使用的哈希算法</span></span><br><span class="line">md5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.digest_size)    <span class="comment">#返回字符串长度</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></li></ul><p>注意点：</p><ol><li>实际使用中都是获取十六进制的字符串，也就是使用<code>hash.hexdigest()</code>。  </li><li>使用hashlib模块一般是3步，通过<code>hashlib.md5()</code>创建哈希对象;通过<code>update()</code>追加需要计算的数据；通过<code>hexdigest()</code>得到数据对应的十六进制字符串(也就是摘要信息)。<h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><code>StringIO</code>主要用来在内存中写入字符串及字符串的缓存。其接口和文件操作的接口是一致的，基本所有关于文件的方法都可以用。<br>关于文件操作的方法可以点击<a href="https://rosinelan.coding.me/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">python文件操作</a>查看更多内容。<br>示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = StringIO()    <span class="comment">#初始化StringIO对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'hello world'</span>)    <span class="comment">#写入字符串</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.getvalue()    <span class="comment">#获取实例中的字符串</span></span><br><span class="line"><span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></li></ol><p><code>stringIO.getvalue()</code>返回StringIO实例中的字符串。<br>读取StringIO中的字符串，也可以使用文件类似的<code>read</code>、<code>readline</code>、<code>readlines</code>等方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'\n new line'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.seek(<span class="number">0</span>)    <span class="comment">#回到文件开头</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    print(line)</span><br><span class="line">...</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"> new line</span><br></pre></td></tr></table></figure></p><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p><code>StringIO</code>操作只能是<code>str</code>，如果要操作二进制数据，就需要使用<code>BytesIO</code>。<br><code>BytesIO</code>实现了在内存中读写bytes。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">0</span>)    <span class="comment">#回到文件最开头</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()    <span class="comment">#读取</span></span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)    <span class="comment">#读取的内容和写入的对比</span></span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure></p><p>此处写入的内容不是<code>中文</code>字符串，而是经过UTF-8编码的bytes。</p><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>Json(JavaScript Object Notation)，它是一种轻量级的数据交换格式。其应用最广泛的是作为AJAX中web服务器和客户端的通讯的数据格式，现在也常用于http请求。  </p><ul><li>序列化和反序列化<br>将对象转换为可通过网络传输或可以存储到本地磁盘的数据格式(如：XML、JSON或特定数据格式)的过程称为序列化；反之则称为反序列化。<br>python的JSON模块序列化和反序列化的过程分别叫做：encoding和decoding。<br>encoding：把python对象转换成JSON字符串。<br>decoding：把JSON字符串转换成python对象。<br><strong>json模块提供了下面的方法进行序列化和反序列化操作</strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化：将python对象转换成json字符串</span></span><br><span class="line">dumps(obj, *, skipkeys=<span class="keyword">False</span>, ensure_ascii=<span class="keyword">True</span>, check_circular=<span class="keyword">True</span>, allow_nan=<span class="keyword">True</span>, cls=<span class="keyword">None</span>, indent=<span class="keyword">None</span>, separators=<span class="keyword">None</span>, default=<span class="keyword">None</span>, sort_keys=<span class="keyword">False</span>, **kw)</span><br><span class="line"><span class="comment">#反序列化：将json字符串转换成python对象</span></span><br><span class="line">loads(s, *, encoding=<span class="keyword">None</span>, cls=<span class="keyword">None</span>, object_hook=<span class="keyword">None</span>, parse_float=<span class="keyword">None</span>, parse_int=<span class="keyword">None</span>, parse_constant=<span class="keyword">None</span>, object_pairs_hook=<span class="keyword">None</span>, **kw)</span><br></pre></td></tr></table></figure></li></ul><p><strong>将序列化后得到的json数据保存到文件以及直接读取文件中的json数据进行反序列化操作</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化：将python对象转换成json字符串并存储到文件</span></span><br><span class="line">dump(obj, fp, *, skipkeys=<span class="keyword">False</span>, ensure_ascii=<span class="keyword">True</span>, check_circular=<span class="keyword">True</span>, allow_nan=<span class="keyword">True</span>, cls=<span class="keyword">None</span>, indent=<span class="keyword">None</span>, separators=<span class="keyword">None</span>, default=<span class="keyword">None</span>, sort_keys=<span class="keyword">False</span>, **kw)</span><br><span class="line"><span class="comment">#反序列化：读取指定文件中的json字符串并转换成python对象</span></span><br><span class="line">load(fp, *, cls=<span class="keyword">None</span>, object_hook=<span class="keyword">None</span>, parse_float=<span class="keyword">None</span>, parse_int=<span class="keyword">None</span>, parse_constant=<span class="keyword">None</span>, object_pairs_hook=<span class="keyword">None</span>, **kw)</span><br></pre></td></tr></table></figure></p><p><strong>json和python数据类型对应关系</strong></p><ol><li>python转换为json</li></ol><table><thead><tr><th>Python</th><th style="text-align:center">JSON</th></tr></thead><tbody><tr><td>dict</td><td style="text-align:center">object</td></tr><tr><td>list,tuple</td><td style="text-align:center">array</td></tr><tr><td>str</td><td style="text-align:center">string</td></tr><tr><td>int,float,int- &amp; float-derived Enums</td><td style="text-align:center">number</td></tr><tr><td>True</td><td style="text-align:center">true</td></tr><tr><td>False</td><td style="text-align:center">false</td></tr><tr><td>None</td><td style="text-align:center">null</td></tr></tbody></table><ol><li>json转换为python</li></ol><table><thead><tr><th>JSON</th><th style="text-align:center">Python</th></tr></thead><tbody><tr><td>object</td><td style="text-align:center">dict</td></tr><tr><td>array</td><td style="text-align:center">list</td></tr><tr><td>string</td><td style="text-align:center">str</td></tr><tr><td>number(int)</td><td style="text-align:center">int</td></tr><tr><td>number(real)</td><td style="text-align:center">float</td></tr><tr><td>true</td><td style="text-align:center">True</td></tr><tr><td>false</td><td style="text-align:center">False</td></tr><tr><td>null</td><td style="text-align:center">None</td></tr></tbody></table><p><strong>序列化示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="string">'&#123;"a": "str", "c": true, "e": 10, "b": 11.1, "d": null, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br></pre></td></tr></table></figure></p><p><code>sort_keys</code>参数： 表示序列化时是否对dict的key进行排序（dict默认是无序的）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, sort_keys=<span class="keyword">True</span>)</span><br><span class="line"><span class="string">'&#123;"a": "str", "b": 11.1, "c": true, "d": null, "e": 10, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br></pre></td></tr></table></figure></p><p><code>indent</code>参数： 表示缩进，它可以使得数据存储的格式变得更加优雅、可读性更强；如果indent是一个非负整数或字符串，则JSON array元素和object成员将会被以相应的缩进级别进行打印输出；如果indent是0或负数或空字符串，则将只会插入换行，不会有缩进。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"a"</span>: <span class="string">"str"</span>,</span><br><span class="line">    <span class="string">"b"</span>: <span class="number">11.1</span>,</span><br><span class="line">    <span class="string">"c"</span>: true,</span><br><span class="line">    <span class="string">"d"</span>: null,</span><br><span class="line">    <span class="string">"e"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"f"</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"g"</span>: [</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>separators</code>参数： 尽管indent参数可以使得数据存储的格式变得更加优雅、可读性更强，但是那是通过添加一些冗余的空白字符进行填充的。当json被用于网络数据通信时，应该尽可能的减少无用的数据传输，这样可以节省带宽并加快数据传输速度。json模块序列化Python对象后得到的json字符串中的’,’号和’:’号分隔符后默认都会附加一个空白字符，我们可以通过<code>separators</code>参数重新指定分隔符，从而去除无用的空白字符。<br>该参数的值应该是一个tuple(item_separator, key_separator)</p><ul><li>若indent是None，其默认值为(‘, ‘, ‘: ‘)</li><li>若indent不为None，则默认值为(‘,’, ‘: ‘)</li><li>我们可以通过为separator赋值为(‘,’, ‘:’)来消除空白字符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="string">'&#123;"a": "str", "c": true, "e": 10, "b": 11.1, "d": null, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, separators=(<span class="string">','</span>,<span class="string">':'</span>))</span><br><span class="line"><span class="string">'&#123;"a":"str","c":true,"e":10,"b":11.1,"d":null,"f":[1,2,3],"g":[4,5,6]&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><p><code>ensure_ascii</code>参数： 当该参数的值为True（默认值）时，输出中的所有非ASCII字符（比如中文）都会被转义成’\uXXXX’组成的序列，得到的结果是一个完全由ASCII字符组成的str实例。如果我们想得到一个人类可读的输出结果，需要把ensure_ascii参数的值设置为False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu=&#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span> : <span class="number">16</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_json = json.dumps(stu)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stu_json)</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"\u5c0f\u660e"</span>, <span class="string">"age"</span>: <span class="number">16</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_json01 = json.dumps(stu, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stu_json01)</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span>: <span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure></p><p>说明：<code>\u5c0f\u660e</code>是unicode字符对应的内存编码值，该内存编码名称为”unicode-escape”。可以通过<code>unicodestr.encode(&#39;unicode-escape&#39;)</code>和<code>decode(&#39;unicode-escape&#39;)</code>完成unicode字符串和Unicode内存编码序列进行相互转换。<br><strong>反序列化示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'&#123;"a": "str", "c": true, "b": 11.1, "e": 10, "d": null, "g": [4, 5, 6], "f": [1, 2, 3]&#125;'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'&#123;"a":"str","c":true,"b":11.1,"e":10,"d":null,"g":[4,5,6],"f":[1,2,3]&#125;'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure></p><p><strong>load()和dump()</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化到文件中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'test.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    json.dump(&#123;<span class="string">'a'</span>:<span class="string">'str中国'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, fp, indent=<span class="number">4</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">#反序列化文件中的内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'test.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    json.load(fp)</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str中国'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>注意：如果试图使用相同的<code>fp</code>调用dump()函数去序列化多个对象，将会产生一个无效的JSON文件。也就是说对于一个fd只能调用一次<code>dump()</code>。<br>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/json.html" target="_blank" rel="noopener">JSON encoder and decoder</a>查看官网内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内置模块&lt;code&gt;datetime&lt;/code&gt;、&lt;code&gt;time&lt;/code&gt;、&lt;code&gt;commands&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;subprocess&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;random&lt;/code&gt;、&lt;code&gt;sys&lt;/code&gt;、&lt;code&gt;logging&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(二)&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;hashlib&quot;&gt;&lt;a href=&quot;#hashlib&quot; class=&quot;headerlink&quot; title=&quot;hashlib&quot;&gt;&lt;/a&gt;hashlib&lt;/h3&gt;&lt;p&gt;&lt;code&gt;haslib&lt;/code&gt;模块为不同的安全哈希/安全散列(Secure Hash Algorithm)和信息摘要算法(Message Digest Algorithm)实现了一个公共的、通用的接口。haslib模块提供了很多算法的函数实现，例如：md5、sha1、sha224、sha256、sha384、sha512等。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="hashlib" scheme="https://rosinelan.github.io/tags/hashlib/"/>
    
      <category term="StringIO" scheme="https://rosinelan.github.io/tags/StringIO/"/>
    
      <category term="BytesIO" scheme="https://rosinelan.github.io/tags/BytesIO/"/>
    
      <category term="Json" scheme="https://rosinelan.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(二)</title>
    <link href="https://rosinelan.github.io/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/25/python内置模块-二/</id>
    <published>2018-04-25T00:03:32.000Z</published>
    <updated>2018-04-29T13:45:39.902Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>datetime/time/commands</code>模块的内容可以点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。  </p><h3 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h3><p><code>subprocess</code>模块用来生成子进程，并可以通过管道连接它们的输入/输出/错误，以及获得它们的返回值。  </p><h4 id="getoutput-cmd"><a href="#getoutput-cmd" class="headerlink" title="getoutput(cmd)"></a>getoutput(cmd)</h4><p>该命令类似<code>commands</code>模块中的<code>getoutput()</code>，执行<code>cmd</code>命令返回执行结果。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS = subprocess.getoutput(<span class="string">"netstat -aon | findstr 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS1 = subprocess.getoutput(<span class="string">"netstat -aon | grep 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS1)</span><br><span class="line"><span class="string">'grep'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></p><h4 id="getstatusoutput-cmd"><a href="#getstatusoutput-cmd" class="headerlink" title="getstatusoutput(cmd)"></a>getstatusoutput(cmd)</h4><p>该命令类似<code>commands</code>模块中的<code>getstatusoutput()</code>，执行<code>cmd</code>命令返回包含2个元素的元组。<br>第一个元素为命令执行状态(int)，如果执行成功返回0，不成功返回非0。<br>第二个元素为命令执行结果(str)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS = subprocess.getstatusoutput(<span class="string">"netstat -aon | findstr 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS)  <span class="comment">#输出结果为元组</span></span><br><span class="line">(<span class="number">0</span>, <span class="string">'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\n  TCP    192.168.0.102:64793    111.202.100.60:80      TIME_WAIT       0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS1 = subprocess.getstatusoutput(<span class="string">"netstat -aon | grep 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS1)</span><br><span class="line">(<span class="number">255</span>, <span class="string">"'grep' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status, result = subprocess.getstatusoutput(<span class="string">"netstat -aon | grep 0:80"</span>)    <span class="comment">#python中典型使用方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(status)</span><br><span class="line"><span class="number">255</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line"><span class="string">'grep'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></p><h4 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h4><p>参数说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(args, *, stdin=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, timeout=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行命令并返回执行状态，其中shell参数为<code>False</code>时，命令需要以列表的方式传入，当shell为<code>True</code>时，可直接传入命令。默认情况下<code>shell=False</code>。<br><code>shell=False</code>情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.call(<span class="string">"ls"</span>)    <span class="comment">#单个不带参数的命令可直接执行</span></span><br><span class="line">anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)    <span class="comment">#命令执行结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.call(<span class="string">"ls -l"</span>)    <span class="comment">#带参数命令直接传入将会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">524</span>, <span class="keyword">in</span> call</span><br><span class="line">    <span class="keyword">return</span> Popen(*popenargs, **kwargs).wait()</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">711</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    errread, errwrite)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">1327</span>, <span class="keyword">in</span> _execute_child</span><br><span class="line">    <span class="keyword">raise</span> child_exception</span><br><span class="line">OSError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])    <span class="comment">#带参数命令以列表方式传入</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><code>shell=True</code>情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.call(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)    <span class="comment">#带参数命令也可直接传入</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h4 id="check-call"><a href="#check-call" class="headerlink" title="check_call()"></a>check_call()</h4><p>参数说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_call(args, *, stdin=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, timeout=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行命令，若返回状态码为0，则返回<code>0</code>，否则抛出异常<code>CalledProcessError</code>。<br>注意：该方法等价于python3.5中的<code>run(..., check=True)</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_call(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.check_call(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>)    <span class="comment">#即使正确执行命令，但返回值不为0抛出异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">542</span>, <span class="keyword">in</span> check_call</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="check-output"><a href="#check-output" class="headerlink" title="check_output()"></a>check_output()</h4><p>语法说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args, *, stdin=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, universal_newlines=<span class="keyword">False</span>, timeout=<span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>执行命令，若返回状态码为0，则返回<code>执行结果</code>，否则抛出异常<code>CalledProcessError</code>。<br>注意：该方法等价于python3.5中的<code>run(..., check=True, stdout=PIPE).stdout</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_output(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)    <span class="comment">#输出为执行结果</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.check_output(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">575</span>, <span class="keyword">in</span> check_output</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd, output=output)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h4><p>python 3.5添加的函数。<br>语法说明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="keyword">None</span>, input=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, cwd=<span class="keyword">None</span>, timeout=<span class="keyword">None</span>, check=<span class="keyword">False</span>, encoding=<span class="keyword">None</span>, errors=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行指定命令，等待命令执行完成后返回一个包含执行结果的<code>CompleteProcess</code>类的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"dir"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 A001<span class="number">-9</span>D89</span><br><span class="line"></span><br><span class="line"> C:\Users\xiaohuihui 的目录</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">19</span>  <span class="number">20</span>:<span class="number">30</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">19</span>  <span class="number">20</span>:<span class="number">30</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2017</span>/<span class="number">11</span>/<span class="number">17</span>  <span class="number">10</span>:<span class="number">16</span>    &lt;DIR&gt;          .android</span><br><span class="line">............................................</span><br><span class="line">...........................................</span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">23</span>  <span class="number">16</span>:<span class="number">23</span>                 <span class="number">0</span> <span class="number">2.</span>txt</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">16</span>  <span class="number">06</span>:<span class="number">45</span>    &lt;DIR&gt;          <span class="number">3</span>D Objects</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">13</span>  <span class="number">20</span>:<span class="number">28</span>                 <span class="number">4</span> bacon.txt</span><br><span class="line">               <span class="number">8</span> 个文件  <span class="number">1</span>,<span class="number">029</span>,<span class="number">964</span>,<span class="number">132</span> 字节</span><br><span class="line">              <span class="number">24</span> 个目录 <span class="number">94</span>,<span class="number">803</span>,<span class="number">804</span>,<span class="number">160</span> 可用字节</span><br><span class="line">CompletedProcess(args=<span class="string">'dir'</span>, returncode=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Users\xiaohuihui\AppData\Local\Programs\Python\Python36\lib\subprocess.py"</span>, line <span class="number">418</span>, <span class="keyword">in</span> run</span><br><span class="line">    output=stdout, stderr=stderr)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"netstat -aon|findstr 0:80"</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">CompletedProcess(args=<span class="string">'netstat -aon|findstr 0:80'</span>, returncode=<span class="number">0</span>, stdout=<span class="string">b'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\r\n'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>subprocess中的<code>call()</code>、<code>check_call()</code>、<code>check_output()</code>以及<code>run()</code>参数列表已经列出，下面是参数的说明</p><ul><li>args<br>要执行的shell命令，默认是一个字符串序列，如<code>[&#39;df&#39;, &#39;-hT&#39;]</code>或<code>(&#39;df&#39;, &#39;-hT&#39;)</code>，也可以是一个字符串，如<code>&#39;df -hT&#39;</code>，但此时需要把shell参数的值设置为<code>True</code>。</li><li>shell<br>如果shell为True，那么指定的命令将通过shell执行。如果需要访问某些shell特性，如管道、文件名通配符等，这将非常有用。  </li><li>check<br>如果check参数的值是True，且执行命令的进程以非0的状态码退出，则会抛出一个<code>CalledProcessError</code>异常，且该异常对象会包含参数、退出状态码以及stdout和stderr(若被捕获)。  </li><li>stdout/stderr<br>程序的标准输出和错误输出。  </li><li>run()函数默认不会捕获命令执行结果的正常输出和错误输出，如果我们想获取这些内容，需要传递<code>subprocess.PIPE</code>然后可以通过返回的<code>CompleteProcess</code>类实例的stddout和stderr属性捕获相应的内容。  </li><li>call()和check_call()函数返回的是命令执行的状态码而不是<code>CompleteProcess</code>类实例，所以它们的stdout和stderr不适合赋值为<code>subprocess.PIPE</code>。</li><li>check_output()函数默认会返回执行结果，所以不用设置stdout的值，如果希望在结果中捕获错误信息，可以设置<code>stderr = subprocess.STDOUT</code>。  </li><li>cwd<br>用于设置子进程的当前目录。当它不为None时，子程序在执行前，它的当前路径会被替换成cwd的值。这个路径并不会被添加到可执行程序的搜索路径，所以cwd不能是相对路径。  </li><li>input<br>该参数是传递给<code>Popen.communicate()</code>，通常该参数的值必须是一个字节序列，如果<code>universal_newline=True</code>，则其值应该是一个字符串。  </li><li>universal_newline<br>该参数影响的是输入输出的数据格式，默认为False，此时stdout和stderr的输出是字节序列，设置为True时stdout和stderr的输出是字符串。  </li></ul><h4 id="CompleteProcess类说明"><a href="#CompleteProcess类说明" class="headerlink" title="CompleteProcess类说明"></a>CompleteProcess类说明</h4><p><code>subprocess.CompleteProcess</code>类在python3.5中才存在，表示一个已经结束进程的状态信息，包含的属性如下</p><ul><li>args:用于加载进程的参数，可能是一个列表或者一个字符串。  </li><li>returncode：子进程的退出状态码，通常情况下状态码为0表示进程成功运行；负值<code>-N</code>表示子进程被信号N终止。  </li><li>stdout：从子进程捕获的stdout。这通常是一个字节序列，如果run()函数被调用时指定<code>universal_newlines=True</code>，则该属性值是一个字符串。如果run()函数被调用时指定<code>stderr=subprocess.STDOUT</code>，那么stdout和stderr将会被整合到这一个属性中，且stderr将会为None</li><li>stderr：从子进程捕获的stderr。它的值与stdout一样，是一个字节序列或一个字符串。如果stderr没有被捕获的话，它的值就为None</li><li>check_returncode()： 如果<code>returncode</code>是一个非0值，则该方法会抛出一个<code>CalledProcessError</code>异常。</li></ul><h4 id="Popen"><a href="#Popen" class="headerlink" title="Popen"></a>Popen</h4><p>该类用于在一个新的进程中执行一个子程序。上面介绍的函数都是基于<code>subprocess.Popen</code>类实现的，通过使用这些被封装后的高级函数可以很方便的完成一些常见的需求。当无法通过上面的高级函数实现一些不太常用的功能时，可以通过<code>subprocess.Popen</code>来完成。<br>示例1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">"netstat -aon|findstr 0:80"</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p.stdout.read())</span><br><span class="line"><span class="string">b'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\r\n'</span></span><br></pre></td></tr></table></figure></p><p>示例2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(1) \n'</span>)    <span class="comment">#返回写入的字符数</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(2) \n'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(3) \n'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out,err = obj.communicate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(out)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(err)</span><br></pre></td></tr></table></figure></p><p>总结</p><ol><li>Python2.4版本引入了subprocess模块用来替换os.system()、os.popen()、os.spawn*()等函数以及commands模块；也就是说如果你使用的是Python 2.4及以上的版本就应该使用subprocess模块了。</li><li>如果你的应用使用的Python 2.4以上，但是是Python 3.5以下的版本，Python官方给出的建议是使用subprocess.call()函数。Python 2.5中新增了一个subprocess.check_call()函数，Python 2.7中新增了一个subprocess.check_output()函数，这两个函数也可以按照需求进行使用。</li><li>如果你的应用使用的是Python 3.5及以上的版本，Python官方给出的建议是尽量使用subprocess.run()函数。</li><li>当subprocess.call()、subprocess.check_call()、subprocess.check_output()和subprocess.run()这些高级函数无法满足需求时，我们可以使用subprocess.Popen类来实现我们需要的复杂功能。  </li></ol><p>更多关于<a href="https://docs.python.org/3.6/library/subprocess.html" target="_blank" rel="noopener">subprocess</a>说明可点击查看官方文档。  </p><h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><p><code>os</code>模块提供对操作系统的文件目录操作、文件路径操作等功能。  </p><h4 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h4><p><code>os.path</code>模块主要用于对文件路径的操作，如：路径分割和拼接、取文件相对路径和绝对路径等。  </p><ul><li><p>os.path.abspath(path)<br>返回指定文件的绝对路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.split(path)<br>将路径名称分割成两部分(head,tail)，tail是路径path名称中最后一部分且不包括斜线，head是tail之前的所有部分。如果path以斜线结尾则tail为空，如果path中没有斜线则head为空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line">(<span class="string">'C:\\Users'</span>, <span class="string">'xiaohuihui'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">'sunny.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"sunny.txt"</span>)</span><br><span class="line">(<span class="string">''</span>, <span class="string">'sunny.txt'</span>)</span><br></pre></td></tr></table></figure></li><li><p>os.path.splitext(path)<br>将路径名称分割成两部分(root,ext)，其中ext为后缀名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui\\sunny'</span>, <span class="string">'.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui\\'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"sunny.text"</span>)</span><br><span class="line">(<span class="string">'sunny'</span>, <span class="string">'.text'</span>)</span><br></pre></td></tr></table></figure></li><li><p>os.path.basename(path)<br>返回path路径名的基名称，也就是os.path.split(path)返回的第二个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.dirname(path)<br>返回path路径的目录名称，也就是os.path.split(path)返回的第一个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'C:\\Users'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join(path, *paths)<br>将一个或多个路径中的非空值通过路径分隔符拼接成一个新的路径名称，如果在拼接过程中遇到绝对路径将会丢弃前面的部分并从该绝对路径重新开始拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users"</span>, <span class="string">"xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users"</span>, <span class="string">"C:\\Users\\xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.exists(path)<br>指定的文件路径存在则返回True，否则返回False。如果是失效的链接文件则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\www.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getatime(path)<br>返回该路径对应文件的最后一次访问时间的时间戳(秒)，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getatime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523624105.3170362</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getatime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1524141055.6605625</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getmtime(path)<br>返回该路径对应文件的最后修改时间的时间戳(秒)，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getmtime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523627463.3876014</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getmtime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1524141055.6605625</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getctime(path)<br>返回该路径对应文件的ctime，在某些系统上(unix)是最后一次元数据更改时间，其他系统上是(如windows)是路径创建时间；，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getctime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523624105.3170362</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getctime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1508831681.0998952</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getsize(path)<br>返回指定路径对应文件的字节大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">68</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="number">20480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">20480</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.relpath(path, start=os.curdir)<br>返回path相对于start的相对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, start=<span class="string">"C:\\Users"</span>)</span><br><span class="line"><span class="string">'xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.realpath(path)<br>获取path的真实、绝对路径(可用于获取软链接文件指向的文件路径)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.realpath(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isabs(path)<br>判断path是否为绝对路径，是则返回True，否则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isabs(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isabs(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile(path)<br>判断path是否是一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir(path)<br>判断path是否是一个目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.islink(path)<br>判断path是否是一个链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.islink(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.ismount(path)<br>判断path是否是一个挂载点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.ismount(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.ismount(<span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.samefile(path1, path2)<br>判断path1和path2是否为同一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.samefile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.samefile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, <span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="os-1"><a href="#os-1" class="headerlink" title="os"></a>os</h4><p>在使用os模块过程中，在一些unix平台的许多文件或目录的操作函数支持下面的特性</p><ol><li>指定一个文件描述符<br>对于某些函数。path参数不仅可以是一个字符串，也可以是文件描述符。该函数会操作这个文件描述符引用的文件。可以通过<code>os.supports_fd</code>来检查当前平台的path参数是否可以指定为一个文件描述符，如果不可用将引发<code>NotImplementedError</code>。如果该函数还支持dir_fd或follow_symlinks参数，当path被以文件描述符的方式提供时，指定dir_fd或follow_symlinks参数是错误的。</li><li>相对于目录描述符的路径<br>如果dir_fd不是None，它应该是一个指向某个目录的文件描述符，并且要操作的path应该是一个相对于该目录的相对路径；如果path是一个绝对路径，dir_fd将会被忽略。  </li><li>不遵循符号链接<br>如果follow_symlinks是False，并且要操作的路径中最后一个元素是一个符号链接时，该函数将会操作这个链接文件，而不是操作这个链接文件指向的文件。</li></ol><ul><li><p>os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)<br>测试当前用户是否对path所指向的文件有某种访问权限。<br>mode可取值为：os.F_OK（文件存在）、os.R_OK（可读）、os.W_OK（可写）、os.X_OK（可执行）中的一个或用逻辑运算符‘|’连接起来的多个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.access(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>,os.F_OK)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.access(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>,os.R_OK|os.W_OK)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.chdir(path)<br>更改当前工作目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">"D:\\rhce"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'D:\\rhce'</span></span><br></pre></td></tr></table></figure></li><li><p>os.getcwd()<br>返回一个表示当前目录的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br></pre></td></tr></table></figure></li><li><p>os.listrdir(path=’.’)<br>返回指定目录中所有的文件列表，顺序不固定，且不包含<code>.</code>和<code>..</code>，python2中path无默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">"D:\Dns"</span>)</span><br><span class="line">[<span class="string">'1.txt'</span>, <span class="string">'DNSTEST'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.mkdir(path, mode=0777, *, dir_fd=None)<br>创建一个名为path的目录并指定目录权限，如果目录已经存在则会引起FileExistsError；dir_fd是Python3.3开始新加的参数。<br>需要说明的是该函数与os.makedirs()、os.mkfifo()函数创建的目或逛到文件的权限会受到umask的影响，比如指定mode为0777，实际目录权限为 0777 - umask = 0755</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)    <span class="comment">#判断test1目录是否存在</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">"test1"</span>)    <span class="comment">#创建目录test1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">"test1"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileExistsError: [WinError <span class="number">183</span>] 当文件已存在时，无法创建该文件。: <span class="string">'test1'</span></span><br></pre></td></tr></table></figure></li><li><p>os.remove(path, *, dir_fd=None)<br>删除指定的文件，如果path是个目录将会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">"C:\\Users\\xiaohuihui\\sunny1.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.rmdir(path, *, dir_fd=None)<br>删除指定的空目录，如果目录不为空会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">"test1"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">"oracle"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">OSError: [WinError <span class="number">145</span>] 目录不是空的。: <span class="string">'oracle'</span></span><br></pre></td></tr></table></figure></li><li><p>os.rename(src, dst, *, src_dir_fd=-None, dst_dir_fd=None)<br>目录或文件重命名，如果dst是一个目录将会引发OSError。在Unix平台上，如果dst存在且是一个文件，那么只要用户有权限就将会被静默替换；而在Windows平台上，如果dst存在，即使它是一个文件也会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">"sunny.txt"</span>, <span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)<br>与os.rename()功能相同，区别在于：对于os.replace()来说，如果dst存在且是一个文件，那么只要用户有权限就将会被静默替换，而没有平台上的差别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.replace(<span class="string">"sunny1.txt"</span>,<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.linesep<br>输出当前平台使用的行终止符。windows下使用的是<code>\r\n</code>，linxu下使用的是<code>\n</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep   <span class="comment">#windows下执行</span></span><br><span class="line"><span class="string">'\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep    <span class="comment">#linux下执行</span></span><br><span class="line"><span class="string">'\n'</span></span><br></pre></td></tr></table></figure></li><li><p>os.name<br>返回当前系统平台，windows则返回<code>nt</code>，unix则返回<code>posix</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name    <span class="comment">#windows下执行</span></span><br><span class="line"><span class="string">'nt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name    <span class="comment">#linux下执行</span></span><br><span class="line"><span class="string">'posix'</span></span><br></pre></td></tr></table></figure></li><li><p>os.system(cmd)<br>执行指定命令并返回执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"netstat -aon|findstr 0:80"</span>)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><p>知识点分享<br>在执行命令的时候，windows和unix的命令不尽相同，可以使用<code>os.name</code>进行区分，保证代码的兼容性。类似下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> os.name == <span class="string">"nt"</span>:</span><br><span class="line">    cmd = <span class="string">"ipconfig"</span></span><br><span class="line"><span class="keyword">elif</span> os.name == <span class="string">"posix"</span>:</span><br><span class="line">    cmd = <span class="string">"ifconfig"</span></span><br><span class="line"></span><br><span class="line">os.system(cmd)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = os.popen(<span class="string">"netstat -aon|findstr 0:80"</span>).read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line">  TCP    <span class="number">10.12</span><span class="number">.5</span><span class="number">.244</span>:<span class="number">57008</span>      <span class="number">140.205</span><span class="number">.34</span><span class="number">.20</span>:<span class="number">80</span>       ESTABLISHED     <span class="number">32052</span></span><br></pre></td></tr></table></figure></p><p>os是一个操作系统接口模块，提供了各种和操作系统相关的功能，上面写到的文件和目录操作等知识其中的一部分。更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/os.html" target="_blank" rel="noopener">Miscellaneous operating system interfaces</a>查看官网介绍。</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>random是随机数操作模块，可以用来生成随机数和完成与随机数相关的功能。  </p><ul><li><p>random.random()<br>用于生成半开区间[0.0, 1.0)内的一个随机浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="number">0.5716693670763958</span></span><br></pre></td></tr></table></figure></li><li><p>random.uniform(a, b)<br>用于生成一个指定范围内[a, b]的随机浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">48.107294751423076</span></span><br></pre></td></tr></table></figure></li><li><p>random.randint(a, b)<br>用于生成一个指定范围内[a, b]的整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>random.randrange(start, stop[, step])<br>用于从指定范围[start, stop)。按指定基数step递增的集合中获取一个随机数，step默认为1。<br>random.randrange(stop)等价于random.randrange(0,stop)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">50</span>)</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">50</span>)</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure></li><li><p>random.choice(seq)<br>从指定序列seq中随机获取一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">"abc1234"</span>)</span><br><span class="line"><span class="string">'2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">"a"</span>])</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p>random.sample(population, k)<br>从指定序列中随机抽取k个不重复的元素，并以列表的形式返回，用于不进行内容替换的随机抽样。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(list, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(list1, <span class="number">5</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>random.shuffle(x[, random])<br>用于随机打乱一个列表中的元素，需要注意的是该函数操作的是列表对象，且没有返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(random.shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))    <span class="comment">#该函数无返回值，直接给列表操作无效</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(list)    <span class="comment">#传递的参数必须是列表对象。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list)</span><br><span class="line">[<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/random.html" target="_blank" rel="noopener">Generate pseudo-random numbers</a>查看官网内容。</p><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><p>sys模块提供访问由解释器使用或维护的变量和在与解释器交互使用到的函数。</p><ul><li>sys.argv()<br>给程序传递参数，其中argv[0]表示脚本名称。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''usage'''</span></span><br><span class="line">    print(<span class="string">'Usage: %s %s %s %s'</span> % (sys.argv[<span class="number">0</span>], <span class="string">'tokenid'</span>, <span class="string">'Subject'</span>, <span class="string">'Content'</span>))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        usage()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(sys.argv[<span class="number">0</span>])</span><br><span class="line">        print(sys.argv[<span class="number">1</span>])</span><br><span class="line">        print(sys.argv[<span class="number">2</span>])</span><br><span class="line">        print(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xiaohuihui&gt;python D:/pythondev/calculate/module/sys1.py <span class="number">12</span> <span class="number">22</span> <span class="number">32</span></span><br><span class="line">D:/pythondev/calculate/module/sys1.py</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><ul><li><p>sys.path<br>获取指定模块模块搜索路径的字符串集合。将写好的模块放在得到的某个路径下，就可以在import的时候正确找到。在import模块名称的时候就是根据<code>sys.path</code>搜索模块。也可以自定义添加模块路径<code>sys.path.append(path)</code>，但只是临时生效，退出当前环境之后失效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">''</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\python36.zip'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\DLLs'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Roaming\\Python\\Python36\\site-packages'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages'</span>]</span><br></pre></td></tr></table></figure></li><li><p>sys.modules<br><code>sys.modules</code>是一个全局字典，该字典在python启动之后就加载在内存中。当导入新模块时，sys.modules将自动记录该模块，第二次导入该模块时python会自动从字典中查找从而加快程序运行速度。它拥有字典的一切方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.keys()    <span class="comment">#返回所有已导入的模块列表</span></span><br><span class="line">dict_keys([<span class="string">'builtins'</span>, <span class="string">'sys'</span>, ...., <span class="string">'os'</span>, <span class="string">'errno'</span>, <span class="string">'stat'</span>, <span class="string">'_stat'</span>, <span class="string">'ntpath'</span>, <span class="string">'genericpath'</span>, <span class="string">'os.path'</span>, <span class="string">'_collections_abc'</span>, <span class="string">'_sitebuiltins'</span>, <span class="string">'sysconfig'</span>, <span class="string">'atexit'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.values()    <span class="comment">#返回模块(含对应路径)</span></span><br><span class="line">dict_values([&lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, ...., &lt;module <span class="string">'atexit'</span> (built-<span class="keyword">in</span>)&gt;])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">"os"</span>]    <span class="comment">#指定key对应的values</span></span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib\\os.py'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>sys.exit([arg])<br>表示退出程序。<br>一般情况下程序执行到末尾解释器自动退出，若需要中途退出，可以调用<code>sys.exit()</code>函数，带有一个可选的整数参数返回给调用它的程序。(0表示正常退出，其他表示异常)也可以使用字符串参数，传递对应的报错信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"This exit test"</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)     <span class="comment"># 退出程序</span></span><br><span class="line">print(<span class="string">"there"</span>)  <span class="comment"># 不会被print</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This exit test</span><br></pre></td></tr></table></figure></p><ul><li>sys.stdin/stdout/stderr<br>stdin/stdout/stderr变量包含与标准I/O流对应流对象。如果需要更好的控制输入输出，而print不能满足要求的情况下可以使用。<br>print其实就是调用<code>stdout.write(obj+&#39;\n&#39;)</code>方法。<br>stdin示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"Please input your name: "</span>)</span><br><span class="line">name = sys.stdin.readline()    <span class="comment">#和input功能类似。</span></span><br><span class="line">print(<span class="string">"name:&#123;0&#125;"</span>.format(name))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please input your name: </span><br><span class="line">xiaohh</span><br><span class="line">name:xiaohh</span><br></pre></td></tr></table></figure></p><p>stdout示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"sunny2.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">sys.stdout = f</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></p><ul><li>sys.platform<br>获取当前系统平台，如win32/linux等。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform    <span class="comment">#windows系统执行</span></span><br><span class="line"><span class="string">'win32'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform    <span class="comment">#linux系统执行</span></span><br><span class="line"><span class="string">'linux'</span></span><br></pre></td></tr></table></figure></li></ul><p>判断系统平台执行不同命令，推荐使用下面方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.platform.startswith(<span class="string">'freebsd'</span>):</span><br><span class="line">    <span class="comment"># FreeBSD-specific code here...</span></span><br><span class="line"><span class="keyword">elif</span> sys.platform.startswith(<span class="string">'linux'</span>):</span><br><span class="line">    <span class="comment"># Linux-specific code here...</span></span><br></pre></td></tr></table></figure></p><p>更多更详细的内容可以点击[System-specific parameters and functions]<a href="https://docs.python.org/3.6/library/sys.html)查看官网内容。" target="_blank" rel="noopener">https://docs.python.org/3.6/library/sys.html)查看官网内容。</a></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string模块主要是对字符串进行处理。</p><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><ul><li><p>string.ascii_lowercase<br>小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br></pre></td></tr></table></figure></li><li><p>string.ascii_uppercase<br>大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase</span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure></li><li><p>string.ascii_letters<br>包含所有大小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_letters</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure></li><li><p>string.digits<br>数字0到9的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits</span><br><span class="line"><span class="string">'0123456789'</span></span><br></pre></td></tr></table></figure></li><li><p>string.hexdigits<br>包含十六进制所有字符的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.hexdigits</span><br><span class="line"><span class="string">'0123456789abcdefABCDEF'</span></span><br></pre></td></tr></table></figure></li><li><p>string.octdigits<br>包含八进制所有字符的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.octdigits</span><br><span class="line"><span class="string">'01234567'</span></span><br></pre></td></tr></table></figure></li><li><p>string.punctuation<br>所有标点符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure></li><li><p>string.printable<br>可打印的字符的字符串，包括数字、字母、标点符号和空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable</span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure></li><li><p>string.whitespace<br>空白字符，包括space, tab, linefeed(换行), return, formfeed(换页), and vertical tab。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.whitespace</span><br><span class="line"><span class="string">' \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ul><li><p>string.capitalize()<br>字符串首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.capitalize())</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.center(width)<br>将原字符串用空格填充成一个长度为<code>width</code>的字符串，原字符串居中。<br>下面原字符串<code>hello world!</code>长度为12，左面填充空格9个，右面填充空格8个。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.center(<span class="number">29</span>))</span><br><span class="line">         hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.strip()<br>去掉字符串两边的空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.center(<span class="number">30</span>).strip())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.count(s)<br>返回字符串s在字符串中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.count(<span class="string">"o"</span>))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>string.isalnum()<br>若字符串至少有一个字符且都是字母或数字则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isalnum())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isalpha()<br>若字符串至少有一个字符并且都是字母则返回<code>True</code>,否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isalpha())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isdigit()<br>若字符串只包含数字则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isdigit())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isspace()<br>若字符串中只包含空格，则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isspace())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.istitle()<br>若字符串是标题化的(单词首字母大写，其余小写)则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.istitle())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.title()<br>返回标题华的字符串，即所有单词都是大写开始，其余字母均为小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.title())</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><p>string.partition(s)<br>用<code>s</code>将字符串分割成三个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.partition(<span class="string">"o"</span>))</span><br><span class="line">(<span class="string">'hell'</span>, <span class="string">'o'</span>, <span class="string">' world!'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串模板Template"><a href="#字符串模板Template" class="headerlink" title="字符串模板Template"></a>字符串模板Template</h4><p>通过<code>string.Template</code>可以为python定制字符串的替换标准。替换规则如下</p><ul><li><code>$$</code>将会被替换成<code>$</code>。</li><li><code>$identifier</code>定义了一个可替换的占位符，用来匹配<code>identifier</code>。默认情况下，<code>identifier</code>只能以下划线或者ASCII字符开头，并且区分大小写(除首字母外，其他部分可以使用数字)。</li><li><code>${identifier}</code>和<code>$identifier</code>是等价的。当有效的标识符紧跟着占位符但不属于占位符时，需要使用<code>{}</code>，例如<code>${noun}ification</code>。</li></ul><p><code>$</code>之后出现非字符数字内容，将会出现<code>ValueError</code>异常信息。<br>Template类定义如下<br><code>class string.Template(template)</code>，参数是模板字符串。<br>提供2个方法  </p><ul><li>substitute(mapping, <strong>kwds)<br>执行模板替换操作，返回一个新的字符串。<br><code>mapping</code>参数是一个类似字典的对象，<code>keys</code>和占位符名称一致。也可以提供关键字参数，其中关键字参数和占位符名称一致。<br>当<code>mapping</code>和`</strong>kwds<code>都提供参数且重复的时候，将会优先选择</code>**kwds`提供的占位符参数。  </li><li><p>safe_substitute(mapping, <strong>kwds)<br>当<code>mapping</code>和`</strong>kwds<code>提供的参数无法替换全部的占位符，使用</code>substitute()<code>会报</code>ValueError<code>错误，使用</code>safe_substitute()<code>，未被替换的占位符将会完整输出(不改变)。同样，在</code>$<code>后的占位符出现非法字符，使用</code>substitute()<code>会报</code>ValueError<code>错误，使用</code>safe_substitute()<code>将会原样输出。  总之，使用</code>safe_substitute()`将会返回一个可用的字符串，而不是抛出异常信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Template(<span class="string">'$who like $what'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.substitute(who=<span class="string">'tim'</span>, what=<span class="string">'kung pao'</span>)</span><br><span class="line"><span class="string">'tim like kung pao'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(who=<span class="string">'tim'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'Give $who $100'</span>).substitute(d)    <span class="comment">#占位符以数字开头</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ..........</span><br><span class="line">ValueError: Invalid placeholder <span class="keyword">in</span> string: line <span class="number">1</span>, col <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$who like $what'</span>).substitute(d)    <span class="comment">#缺少key报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ..........</span><br><span class="line">KeyError: <span class="string">'what'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$who like $what'</span>).safe_substitute(d)    <span class="comment">#缺少key正常输出</span></span><br><span class="line"><span class="string">'tim like $what'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$&#123;who&#125;likePython'</span>).substitute(who=<span class="string">'I'</span>)</span><br><span class="line"><span class="string">'IlikePython'</span></span><br></pre></td></tr></table></figure></li><li><p>Template高级用法<br>通过继承<code>string.Template</code>，重写变量delimiter(定界符)和idpattern(替换格式)，定制不同形式的模板。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">template_text = <span class="string">''' Delimiter : $de \n Replaced : %with_underscore \n Ingored : %notunderscored '''</span></span><br><span class="line">d = &#123;<span class="string">'de'</span>: <span class="string">'not replaced'</span>,</span><br><span class="line">     <span class="string">'with_underscore'</span>: <span class="string">'replaced'</span>,</span><br><span class="line">     <span class="string">'notunderscored'</span>: <span class="string">'not replaced'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTemplate</span><span class="params">(string.Template)</span>:</span>    <span class="comment">#继承自string.Template</span></span><br><span class="line">    delimiter = <span class="string">'%'</span>    <span class="comment">#定界符为%</span></span><br><span class="line">    idpattern = <span class="string">'[a-z]+_[a-z]+'</span>    <span class="comment">#替换模式为含有下划线</span></span><br><span class="line"></span><br><span class="line">print(string.Template(template_text).safe_substitute(d) ) <span class="comment">#使用原有方法，定界符为$ </span></span><br><span class="line"></span><br><span class="line">print(MyTemplate(template_text).safe_substitute(d))  <span class="comment">#使用重写的方法，定界符为%</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Delimiter : <span class="keyword">not</span> replaced </span><br><span class="line"> Replaced : %with_underscore </span><br><span class="line"> Ingored : %notunderscored</span><br><span class="line"></span><br><span class="line"> Delimiter : $de </span><br><span class="line"> Replaced : replaced </span><br><span class="line"> Ingored : %notunderscored</span><br></pre></td></tr></table></figure></p><h4 id="字符串处理技巧"><a href="#字符串处理技巧" class="headerlink" title="字符串处理技巧"></a>字符串处理技巧</h4><ol><li><p>反转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[::<span class="number">-1</span>])</span><br><span class="line"><span class="number">654321</span></span><br></pre></td></tr></table></figure></li><li><p>字符串链接<br>尽量使用<code>join()</code>链接字符串，使用<code>+</code>连接n个字符串需要申请<code>n-1</code>次内存，使用<code>join()</code>需要申请<code>1</code>次内存。  </p></li><li><p>固定长度分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r'.&#123;1,3&#125;'</span>, s)    <span class="comment">#使用正则</span></span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用()生成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sql = (<span class="string">'select count() from table '</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'where id = "10" '</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'group by sex'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sql)</span><br><span class="line">select count() <span class="keyword">from</span> table where id = <span class="string">"10"</span> group by sex</span><br></pre></td></tr></table></figure></li></ol><p>更多更详细的内容可以点击<a href="https://docs.python.org/3/library/string.html" target="_blank" rel="noopener">Common string operations</a>查看官网内容。</p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><ol><li>日志级别</li></ol><p>下面列出的是日志级别及对应的值，当需要自定义日志级别及对应的值时，需要参考已经预先定义的级别及数值。<br>假如自定义的级别的数值和预先定义好的出现冲突，默认将会改写预定义的值，同时对应预定义的级别名称也失效。  </p><table><thead><tr><th>级别</th><th style="text-align:center">数字值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>CRITICAL</td><td style="text-align:center">50</td><td style="text-align:center">发生严重错误，导致应用程序不能继续运行</td></tr><tr><td>ERROR</td><td style="text-align:center">40</td><td style="text-align:center">由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td></tr><tr><td>WARNING</td><td style="text-align:center">30</td><td style="text-align:center">在某些不期望的事情发生时记录的信息，但是此时应用程序可以正常运行</td></tr><tr><td>INFO</td><td style="text-align:center">20</td><td style="text-align:center">信息详细程度仅次于DEBUG，通常只记录关键节点信息，确认程序按照预期运行</td></tr><tr><td>DEBUG</td><td style="text-align:center">10</td><td style="text-align:center">最详细的日志信息，典型应用场景是问题诊断</td></tr><tr><td>NOTSET</td><td style="text-align:center">0</td><td style="text-align:center">等同于DEBUG</td></tr></tbody></table><p>上述对应的级别，从上到下日志输出量是越来越多，越来越详细。<br>当为某个应用程序指定一个日志级别之后，应用程序会记录所有日志级别大于或等于指定日志级别的日志信息，而不是仅仅记录指定级别的日志信息，小于该级别的日志记录将会被丢弃。  </p><ol><li>使用方式<br>logging模块提供两种记录日志的方式</li></ol><ul><li>第一种是使用logging提供的模块级别的函数</li><li>第二种是使用logging日志系统的四大组件</li></ul><p>其中logging提供的模块级别的函数也是对logging日志系统相关类的封装。<br>logging模块定义的模块级别的常用函数<br>函数|说明<br>-|:-:</p><p>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/logging.html" target="_blank" rel="noopener">Logging facility for Python</a>查看官网内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;datetime/time/commands&lt;/code&gt;模块的内容可以点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;subprocess&quot;&gt;&lt;a href=&quot;#subprocess&quot; class=&quot;headerlink&quot; title=&quot;subprocess&quot;&gt;&lt;/a&gt;subprocess&lt;/h3&gt;&lt;p&gt;&lt;code&gt;subprocess&lt;/code&gt;模块用来生成子进程，并可以通过管道连接它们的输入/输出/错误，以及获得它们的返回值。  &lt;/p&gt;
&lt;h4 id=&quot;getoutput-cmd&quot;&gt;&lt;a href=&quot;#getoutput-cmd&quot; class=&quot;headerlink&quot; title=&quot;getoutput(cmd)&quot;&gt;&lt;/a&gt;getoutput(cmd)&lt;/h4&gt;&lt;p&gt;该命令类似&lt;code&gt;commands&lt;/code&gt;模块中的&lt;code&gt;getoutput()&lt;/code&gt;，执行&lt;code&gt;cmd&lt;/code&gt;命令返回执行结果。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="subprocess" scheme="https://rosinelan.github.io/tags/subprocess/"/>
    
      <category term="Popen" scheme="https://rosinelan.github.io/tags/Popen/"/>
    
      <category term="log" scheme="https://rosinelan.github.io/tags/log/"/>
    
      <category term="sys" scheme="https://rosinelan.github.io/tags/sys/"/>
    
      <category term="os" scheme="https://rosinelan.github.io/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块</title>
    <link href="https://rosinelan.github.io/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    <id>https://rosinelan.github.io/2018/04/23/python内置模块/</id>
    <published>2018-04-23T07:05:50.000Z</published>
    <updated>2018-04-25T15:01:19.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><p>在python中内置了很多模块，无须额外配置就可使用。<br>模块和目录的区别:是否有<code>__init__.py</code>文件，若无则是目录，有则是模块。  </p><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>datetime是进行日期和时间处理的标准库。<br><a id="more"></a></p><h5 id="获取当前时间和日期"><a href="#获取当前时间和日期" class="headerlink" title="获取当前时间和日期"></a>获取当前时间和日期</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">nowtime = datetime.now()     <span class="comment">#获取当前日期和时间</span></span><br><span class="line">print(nowtime)    <span class="comment">#输出结果：2018-04-23 22:55:05.386948</span></span><br><span class="line">print(type(nowtime))    <span class="comment">#输出结果：&lt;class 'datetime.datetime'&gt;</span></span><br><span class="line">print(datetime.now().year)    <span class="comment">#输出结果：2018</span></span><br><span class="line">print(datetime.now().month)    <span class="comment">#输出结果：4</span></span><br><span class="line">print(datetime.now().day)    <span class="comment">#输出结果：23</span></span><br></pre></td></tr></table></figure><p><code>datetime</code>是一个模块，其中包含<code>datetime</code>类，我们使用的是<code>datetime.now()</code>中是<code>datetime</code>这个类。<br>通过<code>from datetime import datetime</code>导入的才是<code>datetime</code>类，若仅导入<code>import datetime</code>，则需要使用<code>datetime.datetime.now()</code>方式使用。<br><code>datetime.now()</code>返回的是当前日期和时间，类型为<code>datetime</code>。  </p><h5 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h5><ul><li><p>指定日期和时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">30</span>))    <span class="comment">#输出结果：2018-08-12 11:30:00</span></span><br></pre></td></tr></table></figure></li><li><p>datetime转换为str<br>使用<code>datetime.strftime()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))    <span class="comment">#输出结果：2018-04-23 23:18:10</span></span><br></pre></td></tr></table></figure></li><li><p>str转换为datetime<br>使用<code>datetime.strptime()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.strptime(<span class="string">'2018-04-20 18:30:00'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>))    <span class="comment">#输出结果：2018-04-20 18:30:00</span></span><br></pre></td></tr></table></figure></li><li><p>datetime转换为timestamp<br><code>timestamp</code>也就是常说的时间戳，表示自<code>1970-01-01 00:00:00 UTC+00:00</code>以来的秒数。<br>使用<code>timestamp()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now().timestamp())    <span class="comment">#输出结果：1524497381.170269</span></span><br></pre></td></tr></table></figure></li><li><p>timestamp转换为datetime<br>使用<code>fromtimestamp</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.fromtimestamp(<span class="number">1524497333.38282</span>))    <span class="comment">#输出结果：2018-04-23 23:28:53.382820</span></span><br><span class="line">print(datetime.utcfromtimestamp(<span class="number">1524497333.38282</span>))    <span class="comment">#输出结果：2018-04-23 15:28:53.382820</span></span><br></pre></td></tr></table></figure></li></ul><p>此处<code>fromtimestamp</code>转换之后的datetime默认为本地时间，也就是计算机配置的时区对应的时间(本机为UTC+8:00)。<br>使用<code>utcfromtimestamp</code>转换之后的datetime为UTC标准时区的时间</p><ul><li>datetime加减<br>对日期进行向前或者向后的推算，使用<code>timedelta</code>类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">print(datetime.now())    <span class="comment">#输出结果：2018-04-23 23:41:12.694505</span></span><br><span class="line">print(datetime.now() + timedelta(hours=<span class="number">2</span>))    <span class="comment">#输出结果：2018-04-24 01:41:12.694505</span></span><br><span class="line">print(datetime.now() - timedelta(hours=<span class="number">2</span>))    <span class="comment">#输出结果：2018-04-23 21:41:12.694505</span></span><br><span class="line">print(datetime.now() - timedelta(weeks=<span class="number">1</span>))    <span class="comment">#输出结果：2018-04-16 23:41:12.694505</span></span><br><span class="line">print(datetime.now() + timedelta(days=<span class="number">1</span>))    <span class="comment">#输出结果：2018-04-24 23:41:12.694505</span></span><br></pre></td></tr></table></figure></li></ul><p><code>timedelta</code>后面的参数还有<code>minutes</code>、<code>seconds</code>、<code>microseconds</code>。  </p><p>python中常用的日期时间格式化符号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%y 两位数的年份表示（<span class="number">00</span><span class="number">-99</span>）</span><br><span class="line">%Y 四位数的年份表示（<span class="number">000</span><span class="number">-9999</span>）</span><br><span class="line">%m 月份（<span class="number">01</span><span class="number">-12</span>）</span><br><span class="line">%d 月内中的一天（<span class="number">0</span><span class="number">-31</span>）</span><br><span class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span><span class="number">-23</span>）</span><br><span class="line">%I <span class="number">12</span>小时制小时数（<span class="number">01</span><span class="number">-12</span>）</span><br><span class="line">%M 分钟数（<span class="number">00</span>=<span class="number">59</span>）</span><br><span class="line">%S 秒（<span class="number">00</span><span class="number">-59</span>）</span><br><span class="line">%c 本地相应的日期表示和时间表示</span><br></pre></td></tr></table></figure></p><p>更多的<a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" target="_blank" rel="noopener">格式化符号</a>点击查看。  </p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>在<code>time</code>模块中，函数<code>gmtime()</code>、<code>localtime()</code>和<code>strptime()</code>以时间元组<code>struct_time</code>形式返回。<br>首先介绍时间元组的表示格式</p><h5 id="struct-time"><a href="#struct-time" class="headerlink" title="struct_time"></a>struct_time</h5><p>时间格式<code>time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=9, tm_min=3, tm_sec=26, tm_wday=1, tm_yday=114, tm_isdst=0)</code><br>索引值|属性|值<br>-|:-:|:-:<br>0|tm_year|年(如2015)<br>1|tm_mon|月，1-12<br>2|tm_mday|日，1-31<br>3|tm_hour|时，0-23<br>4|tm_min|分，0-59<br>5|tm_sec|秒，0-61<br>6|tm_wday|星期，0-6(0表示星期一)<br>7|tm_yday|一年中第几天(1-266)<br>8|tm_isdst|是否为夏令时。0,1,-1</p><p>说明<br><code>tm_sec</code>取值范围为0-61是考虑了闰秒和双闰秒的因素。<br><code>tm_isdst</code>中，使用夏令时为1，不使用夏令时为0，当不确定是否使用夏令时为-1。<br>夏令时(DST,Daylight Saving Time)指利用夏天天亮的早，人为的将时间提前一小时，以充分利用光照资源减少照明时间，从而节约照明。  </p><h5 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h5><p>返回当前时间的时间戳。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.time())    <span class="comment">#输出结果：1524531805.2834768</span></span><br></pre></td></tr></table></figure></p><h5 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h5><p>线程推迟指定的时间运行，单位为秒。</p><h5 id="time-clock"><a href="#time-clock" class="headerlink" title="time.clock()"></a>time.clock()</h5><p>在unix系统，返回进程时间，用秒表示的浮点数(时间戳)。<br>在windows系统，第一次调用返回的是进程运行的时间，第二次之后调用均返回自第一次调用以后到现在的运行时间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：4.105467826269739e-07</span></span><br><span class="line">time.sleep(<span class="number">1</span>)    <span class="comment">#线程推迟1秒运行</span></span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：1.0005993983026353</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：1.9998817625266034</span></span><br></pre></td></tr></table></figure></p><h5 id="time-localtime-secs"><a href="#time-localtime-secs" class="headerlink" title="time.localtime([secs)"></a>time.localtime([secs)</h5><p>将一个时间戳转换为当前时区的<code>struct_time</code>，若未提供<code>secs</code>参数，返回当前时间的<code>struct_time</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime())     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=9, tm_min=43, tm_sec=22, tm_wday=1, tm_yday=114, tm_isdst=0)</span></span><br><span class="line">print(time.localtime(<span class="number">1304575584.1361799</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=14, tm_min=6, tm_sec=24, tm_wday=3, tm_yday=125, tm_isdst=0)</span></span><br></pre></td></tr></table></figure></p><h5 id="time-gmtime-secs"><a href="#time-gmtime-secs" class="headerlink" title="time.gmtime([secs])"></a>time.gmtime([secs])</h5><p>将一个时间戳转换为UTC时区的<code>struct_time</code>，若未提供<code>secs</code>参数，返回当前时间的对应的UTC时区<code>struct_time</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.gmtime())</span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=1, tm_min=46, tm_sec=28, tm_wday=1, tm_yday=114, tm_isdst=0)</span></span><br><span class="line">print(time.gmtime(<span class="number">1304575584.1361799</span>))</span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=6, tm_min=6, tm_sec=24, tm_wday=3, tm_yday=125, tm_isdst=0)</span></span><br></pre></td></tr></table></figure></p><h5 id="time-mktime-t"><a href="#time-mktime-t" class="headerlink" title="time.mktime(t)"></a>time.mktime(t)</h5><p>将一个<code>struct_time</code>转换为时间戳。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.mktime(time.localtime()))    <span class="comment">#输出结果：1524534556.0</span></span><br></pre></td></tr></table></figure></p><h5 id="time-asctime-t"><a href="#time-asctime-t" class="headerlink" title="time.asctime([t])"></a>time.asctime([t])</h5><p>把一个表示时间的元组或者<code>struct_time</code>表示为<code>Sun Jun 20 23:21:05 1993</code>形式，若没有参数，将会<code>time.localtime()</code>作为参数传入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.asctime(time.localtime()))    <span class="comment">#输出结果：Tue Apr 24 09:53:03 2018</span></span><br></pre></td></tr></table></figure></p><h5 id="time-ctime-secs"><a href="#time-ctime-secs" class="headerlink" title="time.ctime([secs])"></a>time.ctime([secs])</h5><p>把一个时间戳转换为<code>Sun Jun 20 23:21:05 1993</code>形式，若没有参数或None的时候，默认将<code>time.time()</code>作为参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.ctime())    <span class="comment">#输出结果：Tue Apr 24 09:55:15 2018</span></span><br><span class="line">print(time.ctime(<span class="number">1304575584.1361799</span>))     <span class="comment">#输出结果：Thu May  5 14:06:24 2011</span></span><br></pre></td></tr></table></figure></p><h5 id="time-strftime-format-t"><a href="#time-strftime-format-t" class="headerlink" title="time.strftime(format[,t])"></a>time.strftime(format[,t])</h5><p>把一个表示时间的元组或者<code>struct_time</code>转换为格式化的时间字符串。如果未指定t(也就是表示时间的元组)，传入<code>time.localtime()</code>。如果元组中的任何一个元素越界，<code>ValueError</code>错误将会被抛出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))     <span class="comment">#输出结果：2018-04-24 10:00:14</span></span><br></pre></td></tr></table></figure></p><h5 id="time-strptime-string-format"><a href="#time-strptime-string-format" class="headerlink" title="time.strptime(string[,format])"></a>time.strptime(string[,format])</h5><p>把一个格式化时间字符串转换为<code>struct_time</code>。也就是<code>strftime()</code>的逆操作。<br>当不指定字符串格式时，<code>format</code>默认格式为”%a %b %d %H:%M:%S %Y”(下面第二行的格式)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strptime(<span class="string">"2018-04-24 10:00:14"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=10, tm_min=0, tm_sec=14, tm_wday=1, tm_yday=114, tm_isdst=-1)</span></span><br><span class="line">print(time.strptime(<span class="string">"Tue Apr 24 10:03:14 2018"</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=10, tm_min=3, tm_sec=14, tm_wday=1, tm_yday=114, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure></p><ul><li>总结<br>在time模块中，一共有3种时间表示方式，分别是<code>timstamp</code>(时间戳)、<code>struct_time</code>(元组)和<code>格式化字符串</code>(str)。  </li></ul><ol><li>返回时间戳(timestamp)的方法<br>time()  无参数<br>mktime()  参数为struct_time</li><li>返回元组(struct_time)的方法<br>localtime()  无参数<br>gmtime()  参数为timestamp<br>strptime()  参数为str</li><li>返回字符串(str)的方法<br>asctime()  参数为struct_time<br>ctime()  参数为timestamp<br>strftime()  参数为struct_time</li></ol><p>更多的关于<a href="https://docs.python.org/3/library/time.html" target="_blank" rel="noopener"><code>time</code>模块内容</a>点击查看。</p><h4 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h4><p><code>commands</code>是linux下特有的模块，用来执行linux命令。cmd代表系统命令。<br>注意：在python3.X中该模块已移除，使用<code>subprocess</code>替代。下面均为linux系统中<code>python2.7.5</code>环境执行结果。    </p><h5 id="getoutput-cmd"><a href="#getoutput-cmd" class="headerlink" title="getoutput(cmd)"></a>getoutput(cmd)</h5><p><code>getoutput(cmd)</code>返回结果为cmd命令的执行结果（字符串）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getoutput(<span class="string">"uname -a"</span>)</span><br><span class="line"><span class="string">'Linux localhost.localdomain 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getoutput(<span class="string">"uname -r"</span>)</span><br><span class="line"><span class="string">'3.10.0-693.el7.x86_64'</span></span><br></pre></td></tr></table></figure></p><h5 id="getstatusoutput-cmd"><a href="#getstatusoutput-cmd" class="headerlink" title="getstatusoutput(cmd)"></a>getstatusoutput(cmd)</h5><p><code>getstatusoutput(cmd)</code>返回包含2个元素的元组。<br>第一个元素为命令执行状态(int)，如果执行成功返回0，不成功返回非0。<br>第二个元素为命令执行结果(str)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"uname -r"</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="string">'3.10.0-693.el7.x86_64'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"uname -a"</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="string">'Linux localhost.localdomain 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"ls -l /eee/dd"</span>)</span><br><span class="line">(<span class="number">512</span>, <span class="string">'ls: \xe6\x97\xa0\xe6\xb3\x95\xe8\xae\xbf\xe9\x97\xae/eee/dd: \xe6\xb2\xa1\xe6\x9c\x89\xe9\x82\xa3\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe6\x88\x96\xe7\x9b\xae\xe5\xbd\x95'</span>)</span><br></pre></td></tr></table></figure></p><p>python中更为常用的是<code>status, result = commands.getstatusoutput(&quot;uname -a&quot;)</code>命令，通过一一对一个的方式赋值给status和result。<br>python内置模块相关官方文档<a href="https://docs.python.org/3.6/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a>点击查看。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内置模块&quot;&gt;&lt;a href=&quot;#内置模块&quot; class=&quot;headerlink&quot; title=&quot;内置模块&quot;&gt;&lt;/a&gt;内置模块&lt;/h3&gt;&lt;p&gt;在python中内置了很多模块，无须额外配置就可使用。&lt;br&gt;模块和目录的区别:是否有&lt;code&gt;__init__.py&lt;/code&gt;文件，若无则是目录，有则是模块。  &lt;/p&gt;
&lt;h4 id=&quot;datetime&quot;&gt;&lt;a href=&quot;#datetime&quot; class=&quot;headerlink&quot; title=&quot;datetime&quot;&gt;&lt;/a&gt;datetime&lt;/h4&gt;&lt;p&gt;datetime是进行日期和时间处理的标准库。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="datetime" scheme="https://rosinelan.github.io/tags/datetime/"/>
    
      <category term="times" scheme="https://rosinelan.github.io/tags/times/"/>
    
      <category term="timedelta" scheme="https://rosinelan.github.io/tags/timedelta/"/>
    
      <category term="commands" scheme="https://rosinelan.github.io/tags/commands/"/>
    
  </entry>
  
  <entry>
    <title>python异常处理</title>
    <link href="https://rosinelan.github.io/2018/04/23/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://rosinelan.github.io/2018/04/23/python异常处理/</id>
    <published>2018-04-23T07:05:40.000Z</published>
    <updated>2018-04-23T15:48:14.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>一般情况下在python无法正常处理程序时就会发生一个异常。<br>异常是python对象，表示一个错误。当python程序发生错误时需要捕获处理，否则程序会终止执行。  </p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>捕获异常可以使用<code>try/except</code>语句。<br><a id="more"></a><br>该语句用来检测<code>try</code>语句块中的错误，从而让<code>except</code>语句捕获异常信息并处理。  </p><ul><li><p>语法规则  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了'name'异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了'name'异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#不管如何，最后一定执行的代码</span></span><br></pre></td></tr></table></figure></li><li><p>处理流程<br>当开始一个try语句后，python会在当前程序的上下文中进行标记，这样当异常出现时就可以回到这里，try子句先执行，接下来发生什么依赖于执行时是否出现异常。  </p></li></ul><ol><li>当try后面的语句执行出现异常，python就会调回try并执行第一个匹配该异常的except子句，异常处理完成，然后控制流通过整个try语句。    </li><li>当try后面的语句执行出现异常，却没有匹配的except子句，异常将会被递交到上层的try，或者到程序的最上层(也就是结束程序，并打印出缺省的出错信息)。  </li><li>当try子句执行没有异常，python将执行else后面的语句，然后控制流通过整个try语句。<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></li></ol><ul><li>有异常出现被捕获的情况<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">0</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">除数不能为<span class="number">0</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>根据输出结果可以看到，有异常出现的时候，先执行<code>try</code>语句，遇到异常则停止执行下面的语句(<code>print(&quot;计算结果为:{0}&quot;.format(result))</code>未执行)，跳转至错误处理代码，也就是<code>except</code>语句块，执行完<code>except</code>后执行<code>finally</code>语句块。不执行<code>else</code>语句块。  </p><ul><li>无异常出现情况<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">1</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">计算结果为:<span class="number">2.0</span></span><br><span class="line">无异常出现</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>根据输出结果可以看到，无异常出现的时候先后执行了<code>try</code>、<code>else</code>和<code>finally</code>语句块，未执行<code>except</code>语句块。<br>在异常处理时<code>else</code>和<code>finally</code>语句块可以没有。</p><ul><li>raise抛出错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">0</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e    <span class="comment">#添加raise语句抛出错误</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">除数不能为<span class="number">0</span></span><br><span class="line">done</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>通过添加<code>raise</code>抛出错误，我们可以看到错误类型为<code>ZeroDivisionError</code>。<br>在python中内置了很多的错误类型，我们可以通过针对不同的错误类型，可以使用不同的<code>except</code>语句处理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/int(<span class="string">'a'</span>)</span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"ValueError"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">ValueError</span><br><span class="line">done</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><p>此时执行<code>try</code>语句块时，<code>int()</code>函数抛出<code>ValueError</code>异常，所以执行了第二个<code>except</code>捕获对应异常信息。<br>前面我们在<code>except</code>中直接使用<code>Exception</code>，由于大部分的错误类型都是继承自该类型，所以可直接捕获其子类。<br>python中所有的错误都是从<code>BaseException</code>类派生的，点击查看<a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">常见的错误类型和继承关系</a>。  </p><h3 id="异常信息规范输出"><a href="#异常信息规范输出" class="headerlink" title="异常信息规范输出"></a>异常信息规范输出</h3><p>在常见的前后端分离开发环境中，对于异常信息通常都是按照约定格式，返回json字符串，从而将异常信息记录下来。<br>下面是一个示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">()</span>:</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="number">2</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result[<span class="string">"msg"</span>] = <span class="string">"Division can not be 0"</span></span><br><span class="line">        result[<span class="string">"code"</span>] = <span class="number">250</span></span><br><span class="line">        result[<span class="string">"data"</span>] = [&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;, &#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(result)    <span class="comment">#字典转换为json串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(log())</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"msg"</span>: <span class="string">"Division can not be 0"</span>, <span class="string">"code"</span>: <span class="number">250</span>, <span class="string">"data"</span>: [&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;, &#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;p&gt;一般情况下在python无法正常处理程序时就会发生一个异常。&lt;br&gt;异常是python对象，表示一个错误。当python程序发生错误时需要捕获处理，否则程序会终止执行。  &lt;/p&gt;
&lt;h3 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;p&gt;捕获异常可以使用&lt;code&gt;try/except&lt;/code&gt;语句。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="try" scheme="https://rosinelan.github.io/tags/try/"/>
    
      <category term="except" scheme="https://rosinelan.github.io/tags/except/"/>
    
      <category term="raise" scheme="https://rosinelan.github.io/tags/raise/"/>
    
      <category term="finally" scheme="https://rosinelan.github.io/tags/finally/"/>
    
  </entry>
  
  <entry>
    <title>python面向对象</title>
    <link href="https://rosinelan.github.io/2018/04/20/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://rosinelan.github.io/2018/04/20/python面向对象/</id>
    <published>2018-04-20T11:42:18.000Z</published>
    <updated>2018-04-21T03:07:09.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>与面向对象对应的就是面向过程编程(Procedure Oriented Programming)，简称<code>OPP</code>。<br>就是分析解决问题所需的步骤，然后用函数将这些步骤一步一步实现，使用的时候一个一个一次调用。<br>面向过程最重要的是<code>模块化</code>的思想方法。<br><a id="more"></a></p><h3 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象编程(Object Oriented Programming)，简称<code>OOP</code>。<br>面向对象将对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。<br>面向对象的设计思想是抽象出<code>Class(类)</code>，根据Class创建<code>Instance(实例)</code>。其三个特点是<code>封装</code>、<code>继承</code>和<code>多态</code>。  </p><h2 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>类是用来描述具有相同属性和方法的对象的集合。它定义了集合中每个对象共有的属性和方法。<br>实例是根据类创建出来的一个个具体的对象，每个对象都有相同的方法，但各自的数据可能不同。  </p><ul><li>定义类通过<code>class</code>关键字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>上面代码定义了一个学生类。<br><code>class</code>后面紧接着类名，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的。object类是所有类的<code>源类</code>，也就是所有类都会继承该类。  </p><ul><li>创建实例通过类名+()实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = Student()</span><br></pre></td></tr></table></figure></li></ul><p>变量<code>student</code>指向的就是一个<code>Student</code>的实例。<br>另外可以自由的给实例变量绑定属性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.name = <span class="string">"xiaohh"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.name</span><br><span class="line"><span class="string">'xiaohh'</span></span><br></pre></td></tr></table></figure></p><h3 id="类的构造器"><a href="#类的构造器" class="headerlink" title="类的构造器"></a>类的构造器</h3><p><code>__init__</code>构造函数，在生成对象时调用。<br>类可以起到模板的作用，因此在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，将属性绑上去。<br>例如：学生类中增加学号、姓名、分数属性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, no, name, score)</span>:</span></span><br><span class="line">        self.no = no</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure></p><p><code>__init__</code>方法第一个参数永远是<code>self</code>，表示创建的实例本身。<br>在创建实例的时候必须传入与该方法匹配的参数，<code>self</code>不需要传。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student = Student(<span class="number">1101</span>, <span class="string">"xiaohh"</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.no</span><br><span class="line"><span class="number">1101</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.name</span><br><span class="line"><span class="string">'xiaohh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.score</span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure></p><p>类中定义的函数，第一个参数默认是<code>self</code>，并且在调用时不需要传递。  </p><h3 id="类的私有变量"><a href="#类的私有变量" class="headerlink" title="类的私有变量"></a>类的私有变量</h3><p>在python中，如果实例的变量名以<code>__</code>(双下划线)开头，就变成了一个私有变量，只有内部可以访问，外部不能访问。<br>同样是上面的类，传入相同的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student = Student(<span class="number">1101</span>, <span class="string">"xiaohh"</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.score</span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.score = <span class="number">99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.score</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure></p><p>可见通过外部代码可以自由的修改一个实例的属性。<br>通过私有变量可以限制外部代码的访问。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, no, name, score)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.__no = no</span><br><span class="line"><span class="meta">... </span>        self.__name = name</span><br><span class="line"><span class="meta">... </span>        self.__score = score    <span class="comment">#修改score为私有变量</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student = Student(<span class="number">1101</span>, <span class="string">"xiaohh"</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>student.score    <span class="comment">#外部无法访问</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure></p><p>私有变量的访问和修改可以通过在类中增加方法来实现，通过私有变量，可以提高代码的健壮性。<br>例如：获取分数和修改分数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, no, name, score)</span>:</span></span><br><span class="line">        self.__no = no</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">student = Student(<span class="number">1101</span>, <span class="string">"xiaohh"</span>, <span class="number">88</span>)</span><br><span class="line">print(student.get_score())    <span class="comment">#输出结果：88</span></span><br><span class="line">student.set_score(<span class="number">99</span>)</span><br><span class="line">print(student.get_score())    <span class="comment">#输出结果：99</span></span><br></pre></td></tr></table></figure></p><ul><li>变量名类似<code>__xx__</code>这样双下划线开头和结尾的是特殊变量，可以直接访问，不是私有变量。  </li><li>变量名类似<code>_xx</code>这样一个下划线开头的外部可以访问，但是按照约定俗成的规定，虽然可以被访问，但不要随意访问。  </li><li>私有变量可以通过<code>_类名_变量名</code>方式访问。但是不建议使用。</li></ul><p>关于私有变量的内容，可以参考python3 cookbook中<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p05_encapsulating_names_in_class.html" target="_blank" rel="noopener">在类中封装属性名</a>部分的说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student._Student__score</span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure></p><p>其实外部不能直接访问<code>__score</code>原因是python解释器对外将<code>__score</code>改成了<code>_Student__score</code>。</p><h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p><code>数据封装</code>是面向对象编程的一个重要特点。任何程序，只要封装好，对外只提供接口，使用方便且安全。<br>实例本身拥有数据，那么访问数据可以直接通过在类的内部定义访问数据的函数，而不用从外部的函数访问，这样就实现了数据的封装。封装数据的函数和类本身是关联起来的，我们称之为类的方法。<br>例如：学生类中添加打印学生信息的函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, no, name, score)</span>:</span></span><br><span class="line">        self.no = no</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pr_ifo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"&#123;0&#125;的学号是&#123;1&#125;，分数是&#123;2&#125;"</span>.format(self.name, self.no, self.score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student(<span class="number">1101</span>, <span class="string">"xiaohh"</span>, <span class="number">88</span>)    <span class="comment">#实例化并传入参数</span></span><br><span class="line">student.pr_ifo()    <span class="comment">#通过实例变量调用类的内部函数</span></span><br></pre></td></tr></table></figure></p><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><p>定义一个类的时候，可以从某个现有的类继承，新的类称为子类，被继承的类称为基类、父类或超类。<br>继承使得在设计相似的东西时更加方便。多态使得我们在使用类似东西时不用考虑它们细微的区别。<br>继承可以使得子类获得父类的全部功能。<br>代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Animal run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">animal = Animal()</span><br><span class="line">print(animal.run())    <span class="comment">#输出结果：Animal run。</span></span><br><span class="line">bird = Bird()</span><br><span class="line">print(bird.run())    <span class="comment">#输出结果：Animal run。</span></span><br><span class="line">cat = Cat()</span><br><span class="line">print(cat.run())    <span class="comment">#输出结果：Animal run。</span></span><br></pre></td></tr></table></figure></p><p>对于<code>Bird</code>来说，<code>Animal</code>是它的父类，它是Animal的子类。<code>Cat</code>也类似。<br>此处只有父类<code>Animal</code>实现了<code>run()</code>方法，但是子类<code>Bird</code>和<code>Cat</code>可以使用<code>run()</code>方法。<br>对上述代码修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Animal run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bird run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Cat run。"</span>)</span><br><span class="line"></span><br><span class="line">animal = Animal()</span><br><span class="line">print(animal.run())    <span class="comment">#输出结果：Animal run。</span></span><br><span class="line">bird = Bird()</span><br><span class="line">print(bird.run())    <span class="comment">#输出结果：Bird run。</span></span><br><span class="line">cat = Cat()</span><br><span class="line">print(cat.run())    <span class="comment">#输出结果：Cat run。</span></span><br></pre></td></tr></table></figure></p><p>可见，当子类和父类均有相同的方法时，优先调用子类的方法。<br>也就是说，当父类的方法无法满足子类的需求，子类就需要重构父类的方法。如果子类中有重构的方法，通过实例变量调用的时候优先调用子类的方法，若子类中没有，再去父类中寻找。<br>对于前面定义的Animal类执行命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(isinstance(bird, Bird))    <span class="comment">#输出结果：True</span></span><br><span class="line">print(isinstance(bird, Animal))    <span class="comment">#输出结果：True</span></span><br></pre></td></tr></table></figure></p><p>上面结果说明<code>Bird</code>的实例<code>bird</code>的数据类型是<code>Bird</code>，同时也是<code>Animal</code>。<br>也就是说，在继承关系中如果一个实例的数据类型是某个子类，那么它的数据类型也可以被看做是父类。这就是多态这一特性，实际使用有啥好处呢？<br>继续修改上面的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Animal run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bird run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Cat run。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtwice</span><span class="params">(animal)</span>:</span>    <span class="comment">#增加函数</span></span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line">animal = Animal()</span><br><span class="line">print(runtwice(animal))    <span class="comment">#输出结果：Animal run。</span></span><br><span class="line">bird = Bird()</span><br><span class="line">print(runtwice(bird))    <span class="comment">#输出结果：Bird run。</span></span><br><span class="line">cat = Cat()</span><br><span class="line">print(runtwice(cat))    <span class="comment">#输出结果：Cat run。</span></span><br><span class="line">```  </span><br><span class="line">此处对于不同的实例对象我们使用相同的调用方法，输出结果则是根据其传入的实例的实际类型确定。  </span><br><span class="line">也就是说一样的调用方式，不同的执行效果。这就是多态带来的效果。这样增强了代码的灵活性和可扩展性。</span><br><span class="line">* 灵活性：不论对象怎么变化，使用者都是通过同一种方式调用。</span><br><span class="line">* 可扩展性：即使创建新类，使用者不许修改代码，还是ongoing同一种方式调用。  </span><br><span class="line"></span><br><span class="line">**多继承**</span><br><span class="line">多继承就是类似`C(A, B)`这种表示继承自一个以上的类。  </span><br><span class="line">多继承功能可以使我们选择组合不同的类的功能，从而快速构造出所需的子类，降低继承链的复杂度。  </span><br><span class="line">例如：对于`动物`类的设计，假如分为`哺乳类`和`鸟类`，现在需要增加`会飞类`和`会跑类`。  </span><br><span class="line">使用单继承，只能在哺乳类和鸟类下面分别增加哺乳会飞类、哺乳会跑类、鸟类会飞类、鸟类会跑类。  </span><br><span class="line">使用多继承，只需要新增`会飞类`、`会跑类`，然后让有对应特性的类继承即可。  </span><br><span class="line">``` python</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mamm</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>可以直接通过多继承实现既是<code>Mamm</code>又是<code>runner</code>这样的多个的特性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Mamm, Runner)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spar</span><span class="params">(Bird, Flyer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>多继承中，假如多个父类均定义某个方法，子类调用时候如何确定调用顺序呢？<br>看下面代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Bird can fly。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Flyer can fly。"</span>)</span><br></pre></td></tr></table></figure></p><p>多继承<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spar</span><span class="params">(Flyer, Bird)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">spar = Spar()</span><br><span class="line">print(spar.fly())    <span class="comment">#输出结果：Flyer can fly。</span></span><br></pre></td></tr></table></figure></p><p>修改父类的继承顺序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spar</span><span class="params">(Bird, Flyer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">spar = Spar()</span><br><span class="line">print(spar.fly())    <span class="comment">#输出结果：Bird can fly。</span></span><br></pre></td></tr></table></figure></p><p>根据上面输出结果可见：在多继承中，若父类都有该方法，那么先继承谁，就优先调用谁的方法。  </p><h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p>在类的继承中，子类重定义了某个方法，该方法会覆盖父类的同名方法。但有时我们希望能同时调用父类的方法，此时可以通过<code>super()</code>来实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Animal初始化"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not all Animal can fly。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Bird, self).fly()</span><br><span class="line">        print(<span class="string">"Bird can fly。"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird = Bird()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bird.fly()</span><br><span class="line">Not all Animal can fly。</span><br><span class="line">Bird can fly。</span><br></pre></td></tr></table></figure></p><p><code>super()</code>函数更常见的是用法是在<code>__init__()</code>方法中保证父类被正常初始化。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.y = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b = B()</span><br><span class="line">&gt;&gt;&gt; print(b.x + b.y)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>假如不使用<code>super()</code>方法会出现什么情况呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b.x + b.y)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'B'</span> object has no attribute <span class="string">'x'</span></span><br><span class="line">``` </span><br><span class="line"><span class="comment">## 继承实现原理</span></span><br><span class="line">对于定义的每一个类，python会计算出一个方法解析顺序(MRO)表。这个`MRO`列表就是一个简单的所有基类的线性顺序表。  </span><br><span class="line">对于上面定义的`<span class="class"><span class="keyword">class</span> <span class="title">B</span>`，可以看到其<span class="title">MRO</span>列表内容  </span></span><br><span class="line"><span class="class">``` <span class="title">python</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">B</span>.<span class="title">__mro__</span></span></span><br><span class="line"><span class="class"><span class="params">(&lt;class <span class="string">'__main__.B'</span>&gt;, &lt;class <span class="string">'__main__.A'</span>&gt;, &lt;class <span class="string">'object'</span>&gt;)</span></span></span><br></pre></td></tr></table></figure></p><p>为实现继承，python会在MRO列表从左往右开始查找基类，直到找到第一个匹配这个属性的类为止。<br>其遵循如下三条基本准则</p><ul><li>子类会先于父类被检查</li><li>多个父类会根据它们在列表中的顺序被检查</li><li>如果对下一个类存在两个合法的选择，选择第一个父类</li></ul><p>这也解释了<code>子类重写</code>和<code>多继承</code>中方法调用的顺序问题。<br>另外一个需要注意的问题是：super()可以在没有直接父类的类中使用。但是这种情况下直接使用该类(或单继承方式使用)将会报错，只能通过多继承方式使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>)</span><br><span class="line">        super().spam()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B.spam"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.spam()    <span class="comment">#super调用的是类B中的spam()方法，此处类A和类B无任何关系</span></span><br><span class="line">A.spam</span><br><span class="line">B.spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure></p><p>更多关于python中<code>super()</code>及继承实现部分内容，参考cookbook中<a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p07_calling_method_on_parent_class.html" target="_blank" rel="noopener">调用父类方法</a>的内容。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;面向过程&quot;&gt;&lt;a href=&quot;#面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向过程&quot;&gt;&lt;/a&gt;面向过程&lt;/h3&gt;&lt;p&gt;与面向对象对应的就是面向过程编程(Procedure Oriented Programming)，简称&lt;code&gt;OPP&lt;/code&gt;。&lt;br&gt;就是分析解决问题所需的步骤，然后用函数将这些步骤一步一步实现，使用的时候一个一个一次调用。&lt;br&gt;面向过程最重要的是&lt;code&gt;模块化&lt;/code&gt;的思想方法。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="面向对象" scheme="https://rosinelan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="OOP" scheme="https://rosinelan.github.io/tags/OOP/"/>
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="继承" scheme="https://rosinelan.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="https://rosinelan.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="构造器" scheme="https://rosinelan.github.io/tags/%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python装饰器</title>
    <link href="https://rosinelan.github.io/2018/04/18/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://rosinelan.github.io/2018/04/18/python装饰器/</id>
    <published>2018-04-18T07:36:12.000Z</published>
    <updated>2018-04-18T13:30:19.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提前了解知识"><a href="#提前了解知识" class="headerlink" title="提前了解知识"></a>提前了解知识</h2><h3 id="赋值调用"><a href="#赋值调用" class="headerlink" title="赋值调用"></a>赋值调用</h3><p>函数也是对象，函数对象是可以被赋值给变量，所以变量也可以调用函数。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">a = hello()    <span class="comment">#函数hello()的返回值给a</span></span><br><span class="line">print(a)    <span class="comment">#由于函数hello()无返回值，所以a的结果为None</span></span><br><span class="line">print(<span class="string">"###########"</span>)</span><br><span class="line">b = hello    <span class="comment">#此处将函数hello赋值给b,不是字符串的赋值</span></span><br><span class="line">b()    <span class="comment">#b()相当于hello()</span></span><br></pre></td></tr></table></figure></p><h3 id="开发中的开放封闭原则"><a href="#开发中的开放封闭原则" class="headerlink" title="开发中的开放封闭原则"></a>开发中的开放封闭原则</h3><p>写代码要遵循开放封闭原则，该原则不仅适用于面向对象开发，也适用于函数式编程，简单点说，就是以实现的功能代码不允许被修改，但可以被扩展。  </p><ul><li>封闭：以实现的功能代码</li><li><p>开放：对扩展开放  </p><h2 id="装饰器作用"><a href="#装饰器作用" class="headerlink" title="装饰器作用"></a>装饰器作用</h2><p>装饰器本质上是一个python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。<br>装饰器经常用于如下场景：插入日志、性能测试、事务处理、缓存、权限校验等。通过使用装饰器，可以抽离处大量与函数功能本身无关的雷同代码并继续重用。<br>简单来说，装饰器就是在不改变函数本身的前提下，在函数前面或者后面添加一些额外功能。<br>装饰器通过<code>@</code>调用。 </p><h2 id="装饰器实例"><a href="#装饰器实例" class="headerlink" title="装饰器实例"></a>装饰器实例</h2><h3 id="无参数的装饰器"><a href="#无参数的装饰器" class="headerlink" title="无参数的装饰器"></a>无参数的装饰器</h3><p>对于前面的函数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p>现在需要打印日志，在前后加上时间点，在不改变原有函数<code>hello()</code>的情况下如何做？  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure></li></ul><p>上面的<code>log</code>是一个装饰器(decorator)，接受一个函数为参数(func)，并返回一个函数(wrapper)。使用的时候使用前面说的<code>@</code>语法，把装饰器置于函数的定义处。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></p><p>调用<code>hello()</code>函数的时候，不仅会运行<code>hello()</code>函数本身，还会运行在函数前面和后面加上时间点。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hello()</span><br><span class="line">start_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">30</span>:<span class="number">57.998073</span></span><br><span class="line">hello world</span><br><span class="line">end_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">16</span>:<span class="number">30</span>:<span class="number">58.001074</span></span><br></pre></td></tr></table></figure></p><p>代码分析<br>将<code>@log</code>放在<code>hello()</code>函数的定义处，相当于执行了语句<code>hello = log(hello)</code>。<br>由于<code>log()</code>是一个装饰器，返回一个函数，所以原来的<code>hello()</code>函数仍然存在，但是同名的<code>hello</code>变量指向了新的函数，于是调用<code>hello()</code>将执行新函数，新函数是谁呢？新函数是<code>log()</code>函数的返回值，也就是<code>wrapper()</code>函数。  </p><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>当我们需要传递参数的时候时候怎么处理呢？对于上面的日志处理函数，要传递参数<code>author</code>该怎么处理呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">"author: &#123;0&#125;"</span>.format(name))</span><br><span class="line">            print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">            func()</span><br><span class="line">            print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> author</span><br><span class="line"></span><br><span class="line"><span class="meta">@log("xiaohh")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author: xiaohh</span><br><span class="line">start_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">20</span>:<span class="number">13</span>:<span class="number">44.912610</span></span><br><span class="line">hello world</span><br><span class="line">end_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">20</span>:<span class="number">13</span>:<span class="number">44.912610</span></span><br></pre></td></tr></table></figure></p><p>代码分析<br><code>@log(&quot;xiaohh&quot;)</code>相当于执行了语句<code>hello = log(&quot;xiaohh&quot;)(hello)</code>。<br>首先执行<code>log(&quot;xiaohh&quot;)</code>，返回的是<code>author</code>函数，再调用返回的函数，参数是<code>hello</code>函数，返回值最终是<code>wrapper</code>函数。  </p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>在上述的函数调用之后，最终返回的是<code>wrapper</code>函数，所以它的<code>__name__</code>属性发生了变化。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(hello.__name__)    <span class="comment">#输出结果wrapper</span></span><br></pre></td></tr></table></figure></p><p>此处需要把原始函数的<code>__name__</code>等属性赋值到<code>wrapper()</code>函数中，否则有些依赖函数签名的代码执行会报错。要实现该功能使用<code>functools.wraps</code>就行。  </p><ul><li>对于不带参数的装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  datetime</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><ul><li>对于带参数的装饰器  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  datetime</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">author</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">"author: &#123;0&#125;"</span>.format(name))</span><br><span class="line">            print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">            func()</span><br><span class="line">            print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> author</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(hello.__name__)    <span class="comment">#输出结果hello</span></span><br></pre></td></tr></table></figure></p><p>也就是在定义<code>wrapper</code>函数之前加上<code>@functools.wraps(func)</code>即可。  </p><h2 id="基于类的装饰器"><a href="#基于类的装饰器" class="headerlink" title="基于类的装饰器"></a>基于类的装饰器</h2><p>类的构造函数<strong>init</strong>()接受一个函数，然后重载<strong>call</strong>()并返回一个函数达到装饰器函数的效果。<br>具体的调用和程序执行过程其实和函数实现的装饰器是一致的。  </p><h3 id="无参数的类的装饰器"><a href="#无参数的类的装饰器" class="headerlink" title="无参数的类的装饰器"></a>无参数的类的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        self.func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">05</span>:<span class="number">56.422751</span></span><br><span class="line">hello world</span><br><span class="line">end_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">05</span>:<span class="number">56.422751</span></span><br></pre></td></tr></table></figure></p><p>这是对前面函数实现的不带参数的装饰器采用类方式实现。  </p><h3 id="带参数的类的装饰器"><a href="#带参数的类的装饰器" class="headerlink" title="带参数的类的装饰器"></a>带参数的类的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">"author: &#123;0&#125;"</span>.format(self.name))</span><br><span class="line">            print(<span class="string">"start_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">"end_time: &#123;0&#125;"</span>.format(datetime.datetime.now()))</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log("xiaohh")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author: xiaohh</span><br><span class="line">start_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">27.538287</span></span><br><span class="line">hello world</span><br><span class="line">end_time: <span class="number">2018</span><span class="number">-04</span><span class="number">-18</span> <span class="number">21</span>:<span class="number">13</span>:<span class="number">27.538287</span></span><br></pre></td></tr></table></figure></p><p>这是对前面函数实现的带参数的装饰器采用类方式实现。  </p><h3 id="python内置装饰器"><a href="#python内置装饰器" class="headerlink" title="python内置装饰器"></a>python内置装饰器</h3><p>内置装饰器有3个，分别是<code>staticmethod</code>、<code>classmethod</code>和<code>propety</code>。  </p><ul><li>staticmethod<br>把类中的方法定义为静态方法，使用staticmethod装饰的方法可以使用类或者类的实例对象来调用，不需要传入self。  </li><li>classmethod<br>把类中的方法定义为类方法，使用classmethod装饰的方法可以使用类或者类的实例对象来调用，并将该类对象隐式的作为第一个参数传入。  </li><li>propety<br>把方法变成属性。  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>对于函数和类的装饰器实现，上述只是简单的理解装饰器的概念和用法。<br>具体的需要在实际使用过程中体会，特别是关于类的实现部分和内置装饰器带来的便利，需要在面向对象编程中进一步理解。  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提前了解知识&quot;&gt;&lt;a href=&quot;#提前了解知识&quot; class=&quot;headerlink&quot; title=&quot;提前了解知识&quot;&gt;&lt;/a&gt;提前了解知识&lt;/h2&gt;&lt;h3 id=&quot;赋值调用&quot;&gt;&lt;a href=&quot;#赋值调用&quot; class=&quot;headerlink&quot; title=&quot;赋值调用&quot;&gt;&lt;/a&gt;赋值调用&lt;/h3&gt;&lt;p&gt;函数也是对象，函数对象是可以被赋值给变量，所以变量也可以调用函数。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="装饰器" scheme="https://rosinelan.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="decorator" scheme="https://rosinelan.github.io/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>python生成器练习题目</title>
    <link href="https://rosinelan.github.io/2018/04/15/python%E7%94%9F%E6%88%90%E5%99%A8%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE/"/>
    <id>https://rosinelan.github.io/2018/04/15/python生成器练习题目/</id>
    <published>2018-04-15T03:24:15.000Z</published>
    <updated>2018-04-15T04:54:57.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>F[n]=F[n-1]+F[n-2] (n&gt;2,F[0]=1,F[1]=1)</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>初第一个数和第二个数，其余数字均由前两个数相加得到。  </p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>使用函数实现<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>当然，采用生成器方式也可以实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>此时返回结果为生成器对象，调用时候可以使用<code>next()</code>或者<code>for</code>循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><p>定义见下图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        1   1</span><br><span class="line">       / \ / \</span><br><span class="line">      1   2   1</span><br><span class="line">     / \ / \ / \</span><br><span class="line">    1   3   3   1</span><br><span class="line">   / \ / \ / \ / \</span><br><span class="line">  1   4   6   4   1</span><br><span class="line"> / \ / \ / \ / \ / \</span><br><span class="line">1   5   10  10  5   1</span><br></pre></td></tr></table></figure></p><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>每一行看做一个list</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triagles</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> len(a) &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        c = [<span class="number">0</span>] + a</span><br><span class="line">        d = a + [<span class="number">0</span>]</span><br><span class="line">        a = list(map(operator.add, c, d))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = triagles(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> m:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>输出结果  </p><pre><code class="python">[<span class="number">1</span>][<span class="number">1</span>, <span class="number">1</span>][<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>][<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>][<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h2&gt;&lt;p&gt;F[n]=F[n-1]+F[n-2] (n&amp;gt;2,F[0]=1,F[1]=1)&lt;/p&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;p&gt;初第一个数和第二个数，其余数字均由前两个数相加得到。  &lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;&lt;p&gt;使用函数实现&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="生成器" scheme="https://rosinelan.github.io/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="杨辉三角" scheme="https://rosinelan.github.io/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
      <category term="斐波那契数列" scheme="https://rosinelan.github.io/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>python文章目录链接</title>
    <link href="https://rosinelan.github.io/2018/04/14/python%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E9%93%BE%E6%8E%A5/"/>
    <id>https://rosinelan.github.io/2018/04/14/python文章目录链接/</id>
    <published>2018-04-14T09:22:09.000Z</published>
    <updated>2018-04-14T09:35:54.945Z</updated>
    
    <content type="html"><![CDATA[<p>为了复习方便，整理了下python文章目录链接。  </p><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><p><a href="https://rosinelan.coding.me/2018/03/28/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">开发环境搭建</a><br>包括python安装，pycharm安装配置及常用快捷键。<br><a href="https://rosinelan.coding.me/2018/03/30/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">数据类型</a><br>包括python运算符、整数、字符串、列表、元组的介绍。<br><a href="https://rosinelan.coding.me/2018/04/01/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/" target="_blank" rel="noopener">数据类型(二)</a><br>包括python字典、集合的介绍，还有对数据类型通用方法和不可变对象的解释。<br><a href="https://rosinelan.coding.me/2018/04/04/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/" target="_blank" rel="noopener">条件判断和循环</a><br>包括python条件判断if、循环for和while、break、continue的介绍。<br><a href="https://rosinelan.coding.me/2018/04/11/python%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">编码问题</a><br>包括python编码问题的解释，要遇到乱码问题就点这篇。<br><a href="https://rosinelan.coding.me/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">文件操作</a><br>包括python文件操作的步骤和方法。<br><a href="https://rosinelan.coding.me/2018/04/13/python%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">函数</a><br>包括python函数定义和使用，函数中不同参数的意义及防坑指南，匿名函数，递归函数。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了复习方便，整理了下python文章目录链接。  &lt;/p&gt;
&lt;h2 id=&quot;语法基础&quot;&gt;&lt;a href=&quot;#语法基础&quot; class=&quot;headerlink&quot; title=&quot;语法基础&quot;&gt;&lt;/a&gt;语法基础&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://rosinelan.c
      
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="目录" scheme="https://rosinelan.github.io/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python处理汉诺塔问题</title>
    <link href="https://rosinelan.github.io/2018/04/14/python%E5%A4%84%E7%90%86%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/04/14/python处理汉诺塔问题/</id>
    <published>2018-04-14T08:39:38.000Z</published>
    <updated>2018-04-14T08:53:29.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>不清楚<a href="https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295" target="_blank" rel="noopener">汉诺塔</a>规则可以点击查看。<br>要求：A、B、C 3个柱子，现在要求以C柱子为辅助，将数量为n的圆盘从A柱子移到B柱子(圆盘最大的在最下面)。<br><a id="more"></a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>A柱子为源柱子，B柱子为目标柱子，C柱子为辅助柱子。</li><li>把A柱子的n-1个圆盘移动到C柱子。</li><li>把A柱子剩余的最大圆盘移动到B柱子。</li><li>把C柱子的n-1个圆盘移动到B柱子。</li><li>C柱子的n-1个怎么移动呢？按照上述步骤递归处理。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(a, b, c, n)</span>:</span>    <span class="comment"># n表示圆盘个数，a/b/c分别为源/目标/辅助柱子</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print("&#123;0&#125;--&gt;&#123;1&#125;:&#123;2&#125;".format(a[0], b[0], a[-1]))</span></span><br><span class="line">        b.append(a.pop())</span><br><span class="line">        <span class="comment"># print(x, y, z)</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mov(a, c, b, n<span class="number">-1</span>)</span><br><span class="line">    <span class="comment"># print("&#123;0&#125;--&gt;&#123;1&#125;:&#123;2&#125;".format(a[0], b[0], a[-1]))</span></span><br><span class="line">    b.append(a.pop())</span><br><span class="line">    <span class="comment"># print(x, y, z)</span></span><br><span class="line">    mov(c, b, a, n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [<span class="string">'x'</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">y = [<span class="string">'y'</span>]</span><br><span class="line">z = [<span class="string">'z'</span>]</span><br><span class="line">mov(x, y, z, <span class="number">3</span>)</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure><p>使用3个列表模拟A、B、C柱子。<br>注释部分可打印出具体移动过程。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;不清楚&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汉诺塔&lt;/a&gt;规则可以点击查看。&lt;br&gt;要求：A、B、C 3个柱子，现在要求以C柱子为辅助，将数量为n的圆盘从A柱子移到B柱子(圆盘最大的在最下面)。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="汉诺塔" scheme="https://rosinelan.github.io/tags/%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
    
      <category term="递归" scheme="https://rosinelan.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="https://rosinelan.github.io/2018/04/13/python%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/04/13/python函数/</id>
    <published>2018-04-13T00:51:48.000Z</published>
    <updated>2018-04-15T03:52:07.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>定义函数使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(arg1,arg2,...)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>pass</code>表示什么也不干。一般用作占位符，比如还没想好代码怎么写，可以先写<code>pass</code>让代码可以运行。<br><code>return</code>返回结果。若没有<code>return</code>函数也会返回结果，只是返回结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。<br><code>exit(n)</code>表示强行退出。  </p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>对于下面计算任意数的任意次方的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    s = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n = n - <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        s = s * x</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> s</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><p>其中的参数<code>x</code>和<code>n</code>都是位置参数，也就是调用函数时，传入的参数按照先后顺序依次赋值给<code>x</code>和<code>n</code>。  </p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>对于上面的<code>power(x, n)</code>函数，当调用的时候只输入1个参数会如何呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">'n'</span></span><br></pre></td></tr></table></figure></p><p>可见少参数是不行的。此时可以通过默认参数简化问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span>    <span class="comment">#设置n默认值为2</span></span><br><span class="line"><span class="meta">... </span>    s = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n = n - <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        s = s * x</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> s</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)    <span class="comment">#此时相当于power(5,2)</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>,<span class="number">5</span>)    <span class="comment">#当需要计算n不是2的情况时，可以自己输入。</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><p>设置默认参数时<br>必选参数在前，默认参数在后，否则python编辑器报错。<br>函数有多个参数时，变化大的参数放前面，变化小的参数放后面。变化小的参数可以作为默认参数。<br>有多个默认参数时，调用的时候既可以按照顺序提供默认参数，也可以不按顺序提供部分默认参数。当不按顺序提供默认参数时，需要把参数名写上。<br>默认参数必须指向不变的参数。<br>不可变类型：整数、字符串、元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量赋值a=5 后再赋值a=10，这里实际是新生成一个int值对象10，再让a指向它，而5被丢弃。不是改变a的值，相当于重新生成了a。</span><br></pre></td></tr></table></figure></p><p>可变类型： 列表、字典。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量赋值la=[1,2,3,4]后再赋值la[2]=5 则是修改list la的第三个元素值，本身la没动，只是其内部的部分值被修改了。</span><br></pre></td></tr></table></figure></p><p>使用可变类型作为默认参数的坑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,l=[])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line">        l.append(i*i)</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure></p><p>对于上面的函数，我们看下不同情况下调用的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>)    <span class="comment">#只传入第一个参数，列表使用默认值</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#传入所有参数，不使用默认值</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>)    <span class="comment">#列表使用默认值，此时结果为f(2)得到的列表上追加，而不是在空列表追加</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#列表不适用默认值，结果和预期一致</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">4</span>)    <span class="comment">#列表使用默认值，此时结果为在f(3)结果的列表追加</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">4</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#列表不使用默认值，结果和预期一致</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p><p>原因：python的函数在定义的时候，默认参数<code>L</code>已经被计算出来了，就是<code>[]</code>，也就是变量<code>l</code>指向对象<code>[]</code>。每次调用函数<code>f()</code>的时候，假如改变了<code>l</code>的内容，那么下次调用时默认参数<code>l</code>的内容就变了，不再是默认的<code>[]</code>。  </p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数就是参数个数是可变的，可以是1个、2个到任意个，也可以是0个。<br>如计算传入数字的平方和。由于参数个数不一定，可以通过传入列表或者元组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sum = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line"><span class="meta">... </span>        sum = sum + n * n</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sum</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>但是调用的时候需要生成列表或者元组。此时可以使用可变参数方式简化。<br>定义可变参数就是在参数前添加一个<code>*</code>号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sum = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line"><span class="meta">... </span>        sum = sum + n * n</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sum</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>python允许在列表或者元组前加一个<code>*</code>号，把列表或者元组的元素编程可变参数传进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>上面的<code>*nums</code>表示把列表nums中的所有元素按照可变参数传进去。   </p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>可变函数允许传入任意个参数，这些可变参数在函数调用时自动组装成一个元组。<br>关键字参数允许传入任意个含参数名的参数，这些关键字在函数内部自动组装成一个字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span>    <span class="comment">#kw就是关键字参数</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'xiaohh'</span>, <span class="number">30</span>, city=<span class="string">'beijing'</span>)</span><br><span class="line">name: xiaohh age: <span class="number">30</span> other: &#123;<span class="string">'city'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>对于关键字参数，调用者可以传入任意不受限制的关键字参数。如果要限制关键字参数的名字，就可以用命名关键字参数。<br>命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span>    <span class="comment">#星号前面的name和age属于位置参数</span></span><br><span class="line"><span class="meta">... </span>    print(name, age, city, job)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure></p><p>如果函数定义中已经有一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>。命名关键字参数必须传入参数名，若没有传入参数名调用将报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(name, age, args, city, job)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> () Beijing Engineer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: person() missing <span class="number">2</span> required keyword-only arguments: <span class="string">'city'</span> <span class="keyword">and</span> <span class="string">'job'</span></span><br></pre></td></tr></table></figure></p><h4 id="组合参数"><a href="#组合参数" class="headerlink" title="组合参数"></a>组合参数</h4><p>定义函数时可以选用必选参数、默认参数、关键字参数和命名关键字参数，这5种参数可以组合使用。但是，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。<br>调用函数的时候，python解释器会自动按照参数位置和参数名称把对应的参数传进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure></p><p>通过元组或者列表也可以调用上述函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>默认参数一定要使用不可变对象，若使用可变对象可能出现逻辑错误。<br><code>*args</code>是可变参数，args接受的是一个元组。<br><code>**kw</code>是关键字参数，kw接受的是一个字典。<br>使用<code>*args</code>和<code>**kw</code>是习惯写法，也可以使用其他参数名，但建议使用习惯写法。<br>可变参数既可以直接传入，也可以先组装列表或者元组，再通过<code>*args</code>传入。<br>关键字参数是既可以直接输入，也可以先组装字典，再通过<code>**kw</code>传入。</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数就是没有名字。python使用lambda创建匿名函数。  </p><ul><li>lambda函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。  </li><li>lambda只是一个表达式，函数体比def简单很多。  </li><li>lambda函数拥有自己的命名空间，且不能访问自己参数列表之外的参数。  </li></ul><p>语法格式如下</p><blockquote><p>lambda [arg1 [,arg2,…..argn]]:expression  </p></blockquote><p>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数内部可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。<br>举个例子，计算阶乘<code>n! = 1 x 2 x 3 x...x n</code>，用函数<code>fact(n)</code>表示，那么<br>fact(n) = n! = 1 x 2 x 3 x …x (n-1) x n = (n-1)! x n = fact(n-1) x n<br>所以<code>fact(n)</code>可以表示为<code>n x fact(n-1)</code>，只有 n = 1时需要特殊处理。<br>那么这个函数可以写成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>比较典型的使用递归函数处理的问题，除了阶乘之外还有汉诺塔问题。<br>具体处理及解决办法见<a href="https://rosinelan.coding.me/2018/04/14/python%E5%A4%84%E7%90%86%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">python处理汉诺塔问题</a></p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map(func, *iterables)<br>第一个参数为函数，第二个参数为可迭代对象。返回值为map对象。<br>函数作用是将可迭代对象的每个元素作为参数传递给函数进行计算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span>    <span class="comment">#定义函数</span></span><br><span class="line">    <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line">result = map(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])    <span class="comment">#将列表中的每个参数传入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:    <span class="comment">#由于返回值为map对象，通过循环读出</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>执行结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>使用该函数首先需要<code>from functools import reduce</code>。<br>reduce(function, sequence[, initial])<br>第一个参数为函数，第二个参数为序列，第三个参数可选。<br>函数作用：序列中的元素从左向右传递给函数进行计算，第一次传递序列前2个元素，其通过函数的计算结果和第三个元素作为第二次传递参数，以此类推。要求函数参数个数为2个。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">result = reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print( result)</span><br></pre></td></tr></table></figure></p><p>上述语句和下面语句结果一直，均显示计算结果为<code>6</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure></p><p>其计算方式为先传递1和2至函数，计算<code>(1+2)</code>，得到的结果是<code>3</code>，再和序列下一个值作为参数传递<code>3+3</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x*y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment">#输出结果为6</span></span><br></pre></td></tr></table></figure></p><p>其计算方式为先传递1和2至函数，计算<code>(1*2)</code>，得到的结果是<code>2</code>，再和序列下一个值作为参数传递<code>2*3</code>。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>filter(function or None, iterable)  返回为filter对象<br>第一个参数为函数，也可为空。第二个参数为可迭代对象。<br>函数返回可迭代对象中的满足函数要求的元素。若函数不存在则返回可迭代对象中为True的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(s)    <span class="comment">#输出结果为&lt;filter object at 0x00000202A7D72828&gt;</span></span><br><span class="line">print(list(s))    <span class="comment">#输出结果为[2, 4]</span></span><br></pre></td></tr></table></figure></p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>sorted(iterable, key, reverse) 返回值为新的列表<br>第一个参数是可迭代对象；第二个参数为排序对象，第三个为布尔值，True为反序，False为正序，默认为False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</span><br><span class="line">print(sorted(list1))    <span class="comment">#输出结果为['a', 'b', 'c', 'd']</span></span><br><span class="line">print(sorted(list1,reverse=<span class="keyword">True</span>))    <span class="comment">#输出结果为['d', 'c', 'b', 'a']</span></span><br><span class="line">print(list1)    <span class="comment">#输出结果为['d', 'a', 'c', 'b']</span></span><br></pre></td></tr></table></figure></p><p>可以排序并不改变列表本身，而是返回一个新的列表对象。<br>对于字典，默认会按照<code>key进行排序</code>，若需要指定排序的对象，可以使用下面方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = dict(a=<span class="number">1</span>, d=<span class="number">20</span>, c=<span class="number">10</span>, e=<span class="number">400</span>)</span><br><span class="line">print(sorted(m.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="keyword">True</span>))    <span class="comment">#输出结果为[('e', 400), ('d', 20), ('c', 10), ('a', 1)]</span></span><br></pre></td></tr></table></figure></p><p>练习题目：对/etc/passwd文件按照用户UID进行排序。<br>原始文件内容,其中第三列为UID<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-source.png" alt="python-sort-source" title="python-sort-source"><br>示例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs    <span class="comment">#此处codecs模块为编码自动转换，防止乱码</span></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"passswd.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> result:</span><br><span class="line">    passwd = sorted(result.readlines(), key=<span class="keyword">lambda</span> item : int(item.split(<span class="string">":"</span>)[<span class="number">2</span>]))</span><br><span class="line">    print(passwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"passwd1.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(passwd)</span><br></pre></td></tr></table></figure></p><p><code>print(passwd)</code>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-print.png" alt="python-sort-print" title="python-sort-print"><br>排序后输出的新文件内容<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-sorted.png" alt="python-sorted" title="python-sort-sorted"></p><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式简单强大，用来快速生成满足条件的列表。<br>[exp for val in collection if condition]<br>exp表示表达式，后面跟for循环，还可以有if条按键判断。<br>要生成<code>[1x1, 2x2, 3x3,...,10x10]</code>，使用普通for循环如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">moon = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    moon.append(i*i)</span><br><span class="line">print(moon)    <span class="comment">#输出结果为[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></p><p>使用列表生成式可以一行语句就生成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])    <span class="comment"># 输出结果为[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></p><p>上面结果为1-10的所有数的平方，要是想只输出偶数的平方就可以使用<code>if</code>条件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>])    <span class="comment">#输出结果为[4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure></p><p>列表生成式也可以同时使用2个或者多个变量，例如针对<code>dict</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"x"</span>: <span class="string">"A"</span>, <span class="string">"y"</span>: <span class="string">"B"</span>, <span class="string">"z"</span>: <span class="string">"D"</span>&#125;</span><br><span class="line">print([k + <span class="string">"="</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()])    <span class="comment">#输出结果为['x=A', 'y=B', 'z=D']</span></span><br></pre></td></tr></table></figure></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>列表生成式是根据规则一次性将列表中的元素全部生成。当列表中元素过多但我们又只需要访问列表前几个元素的时候，使用列表生成式就很浪费。这时我们可以使用生成器，也就是按照规则边循环边计算，而不是一次性生成列表。这种一边循环一遍计算的机制，也就是生成器(generator)。  生成方式有2种，分别是列表生成式中的<code>[]</code>改成<code>()</code>和<code>yield</code>。</p><h4 id="exp-for-val-in-collection-if-condition"><a href="#exp-for-val-in-collection-if-condition" class="headerlink" title="(exp for val in collection if condition)"></a>(exp for val in collection if condition)</h4><p>以前面生成<code>[1x1, 2x2, 3x3,...,10x10]</code>为例，改用生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">print(g)    <span class="comment">#输出结果为&lt;generator object &lt;genexpr&gt; at 0x000001FB49446FC0&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时生成的为生成器对象，那么我们如何访问生成器中的元素呢？<br>要是一个接一个访问可以使用<code>next()</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(next(g))    <span class="comment">#输出结果为1</span></span><br><span class="line">print(next(g))    <span class="comment">#输出结果为4</span></span><br><span class="line">print(next(g))    <span class="comment">#输出结果为9</span></span><br></pre></td></tr></table></figure></p><p>另外在遇到<code>next()</code>函数时需要注意，当调用next()之后再次调用生成器对象时，生成器对象将从下一个元素开始。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"####"</span>)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="number">3</span>    <span class="comment">#此处从3开始，而不是从1开始</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>其实生成器也是可迭代对象(iterator)，也可以使用<code>for</code>循环来访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">...(略)</span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>如果一个函数中包含关键字<code>yield</code>，那么这个函数就是一个生成器。<br>普通函数和含有<code>yield</code>关键字的生成器区别在于执行流程不一样。<br>函数是顺序执行，遇到<code>return</code>语句或最后一行函数语句就返回。<br>变成生成器的函数，遇到<code>yield</code>语句时返回，再次执行的时候从上次返回的<code>yield</code>语句的下一行继续执行。<br>对于下面的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"step 1"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">"step 2"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    print(<span class="string">"step 3"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>调用的时候，输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#输出第一步，返回1</span></span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#继续从yield 1下一行开始执行</span></span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#继续从yield 3下一行开始执行</span></span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#当最后一个元素结束时会抛出StopIteration异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p><p>关于生成器的练习题目，点击<a href="https://rosinelan.coding.me/2018/04/15/python%E7%94%9F%E6%88%90%E5%99%A8%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE/" target="_blank" rel="noopener">生成器练习题目</a></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>生成器是在for循环过程中不断计算出下一个元素，并在适当的条件结束for循环。<br>对于函数改成的生成器，遇到return语句或者执行到函数体最后一句，就是结束生成器的指令，for循环也就结束了。<br>普通函数调用直接返回结果。<br>生成器调用返回一个生成器对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h3&gt;&lt;p&gt;定义函数使用&lt;code&gt;def&lt;/code&gt;语句，依次写出函数名、括号、括号中的参数和冒号&lt;code&gt;:&lt;/code&gt;，然后在缩进块中编写函数体，函数的返回值用&lt;code&gt;return&lt;/code&gt;语句返回。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg1,arg2,...)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="函数" scheme="https://rosinelan.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="return" scheme="https://rosinelan.github.io/tags/return/"/>
    
      <category term="参数" scheme="https://rosinelan.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="可变参数" scheme="https://rosinelan.github.io/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
      <category term="args" scheme="https://rosinelan.github.io/tags/args/"/>
    
      <category term="kw" scheme="https://rosinelan.github.io/tags/kw/"/>
    
  </entry>
  
  <entry>
    <title>python文件操作</title>
    <link href="https://rosinelan.github.io/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://rosinelan.github.io/2018/04/13/python文件操作/</id>
    <published>2018-04-13T00:51:35.000Z</published>
    <updated>2018-05-02T06:18:56.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>在python中读写文件有3个步骤  </p><ol><li>调用<code>open()</code>函数，返回一个File对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li><p>调用File对象的<code>read()</code>或<code>write()</code>方法。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.read()</span><br><span class="line"><span class="string">'Hello World!\n这是一个测试文件读写的文档！'</span></span><br></pre></td></tr></table></figure></li><li><p>调用File对象的<code>close()</code>方法关闭该文件。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="open-函数打开文件"><a href="#open-函数打开文件" class="headerlink" title="open()函数打开文件"></a>open()函数打开文件</h3><p><code>open()</code> 函数常用参数<br>第一个参数是文件，使用<code>open()</code>函数打开一个文件，首先要给它传递一个字符串路径表示要打开的文件。这里既可以是绝对路径，也可以是相对路径。<br>第二个参数是文件打开模式，默认为<code>rt</code>。常用模式如下<br><code>r</code> 只读模式打开文件，默认。<br><code>w</code> 读模式打开文件，用于向文件写入。若文件不存在则自动创建，若存在则会覆盖原文件从头开始写。<br><code>x</code> 创建一个新文件然后向文件写入。<br><code>a</code> 追加，用于向文件写入。若文件存在则从文件末尾开始继续添加，不会覆盖原文件。<br><code>b</code> 二进制模式。返回的文件内容为未解码的<code>bytes</code>对象。<br><code>t</code> 文本模式，默认模式。返回的文件内容为<code>stings</code>。也就是<code>bytes</code>对象经过系统默认编码(或指定的编码格式)使用<code>decode()</code>转换之后返回。<br><code>open()</code>函数返回值为<code>File</code>对象。当需要读取或者写入的时候直接调用该对象的方法即可。<br>示例<br>读模式打开文件<br>方法1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br></pre></td></tr></table></figure></p><p>方法2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure></p><p>上面2种方法是一致的，因为默认情况下就是使用<code>r</code>模式打开文件。  </p><h3 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h3><p>上面已经创建了一个<code>File</code>对象，下面可以进行读取。<br>常用读取方法有3种<br><code>read()</code> 读取整个文件，返回内容为<code>strings</code>。<br><code>readline()</code> 按行读取文件，调用一次读取一行。<br><code>readlines()</code> 读取整个文件按行返回到<code>list</code>中。<br>示例<br>使用read()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br><span class="line"><span class="string">'Hello World!\n这是一个测试文件读写的文档！'</span></span><br></pre></td></tr></table></figure></p><p>使用readline()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#读取第一行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="string">'Hello World!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#读取第二行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="string">'这是一个测试文件读写的文档！'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#后面再没有内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></p><p>使用readlines()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readlines()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line">[<span class="string">'Hello World!\n'</span>, <span class="string">'这是一个测试文件读写的文档！'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></p><p>扩展：<code>readlines()</code>方法得到的列表如何操作？如何得到行号？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloContet = helloFile.readlines()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, content <span class="keyword">in</span> enumerate(helloContet):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"第&#123;0&#125;行内容是:&#123;1&#125;"</span>.format(i, content), end=<span class="string">""</span>)</span><br><span class="line">...</span><br><span class="line">第<span class="number">0</span>行内容是:Hello World!</span><br><span class="line">第<span class="number">1</span>行内容是:这是一个测试文件读写的文档！</span><br></pre></td></tr></table></figure></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>要在文件中写入内容，需要以<code>w</code>或<code>a</code>模式打开文件，若<code>open()</code>打开的文件不存在，将会创建新的空白文件。写入之后需要使用<code>close()</code>方法关闭。<br>示例<br>使用<code>w</code>(写)模式写入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'w'</span>)    <span class="comment">#该文件此时不存在</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'Hello World!\n'</span>)    <span class="comment">#写入时若需要换行符需要自己添加</span></span><br><span class="line"><span class="number">13</span>    <span class="comment">#返回的为写入字符的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'正在测试写模式写入!\n'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.read()    <span class="comment">#再次读取，已经正确写入</span></span><br><span class="line"><span class="string">'Hello World!\n正在测试写模式写入!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br></pre></td></tr></table></figure></p><p>使用<code>a</code>(追加)模式写入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'正在测试追加模式写入!\n'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.read()</span><br><span class="line"><span class="string">'Hello World!\n正在测试写模式写入!\n正在测试追加模式写入!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br></pre></td></tr></table></figure></p><p>需要特别注意<code>w</code>模式，假如写入的文件已存在，将会覆盖原文件，从头写入。  </p><h3 id="使用with"><a href="#使用with" class="headerlink" title="使用with"></a>使用with</h3><p>从上面代码看到，每次调用<code>open()</code>打开文件，调用<code>write()</code>写入文件，总是要调用<code>close()</code>关闭文件。这样比较麻烦，python引入<code>with</code>语句自动帮我们调用<code>close()</code>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.read())</span><br><span class="line">...</span><br><span class="line">Hello World!</span><br><span class="line">正在测试写模式写入!</span><br><span class="line">正在测试追加模式写入!</span><br></pre></td></tr></table></figure></p><p>当我们写入文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>后果是数据可能只写了一部分到磁盘造成数据丢失。建议操作文件IO时始终使用<code>with</code>语句。  </p><h3 id="其他文件对象方法"><a href="#其他文件对象方法" class="headerlink" title="其他文件对象方法"></a>其他文件对象方法</h3><p>name 返回该对象对应的文件名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.name)</span><br><span class="line">...</span><br><span class="line">bacon.txt</span><br></pre></td></tr></table></figure></p><p>fileno() 返回文件描述符<br>文件描述符是非负整数，内核访问文件的时候使用文件描述符，以此指定操作的文件。具体的使用办法以后再说。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.fileno())</span><br><span class="line">...</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>encoding()  返回文件编码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.encoding)</span><br><span class="line">...</span><br><span class="line">cp936    <span class="comment">#此处cp936就是GBK编码</span></span><br></pre></td></tr></table></figure></p><p>closed 返回值为布尔值，判断文件是否已经关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.closed    <span class="comment">#打开之后尚未关闭</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.closed    <span class="comment">#已经使用close()方法关闭</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>tell() 返回文件当前位置<br>seek(offset, whence) 设置文件当前位置<br>offset 表示偏移量，正数向后偏移，负数向前偏移<br>whence 0表示文件开头 1表示现在位置 2表示文件末尾<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'sunny.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)    <span class="comment">#文件内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'Hello World!\n正在测试seek功能!\n正在测试truncate功能!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'sunny.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">b'Hello World!\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></p><p>注意：当使用上述方法时建议使用<code>b</code>模式打开文件。<br>truncate(size)<br>从文件首行首字符开始截断，截断文件为<code>size</code>个字符，无size表示从当前位置开始截断。截断之后后面的所有字符均删除。windows下换行符代表2个字符。<br>原始文件内容  </p><blockquote><p>This is 1st line<br>This is 2nd line<br>This is 3rd line<br>This is 4th line  </p></blockquote><p>使用下面语句截取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>, <span class="string">'r+'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">helloFile.truncate(<span class="number">12</span>)</span><br><span class="line">helloFile.close()</span><br></pre></td></tr></table></figure></p><p>输出结果</p><blockquote><p>This is 1st </p></blockquote><p>包括1st后面的空格，一共为12个字符。  </p><h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><p>关于python中文件编码的具体说明可参照前面的文章<a href="https://rosinelan.github.io/2018/04/11/python%E7%BC%96%E7%A0%81/">python编码</a>,此处主要针对<code>open()</code>方法的<code>encoding</code>参数。<br>要写入特定编码的文本文件，给<code>open()</code>函数传入<code>encoding</code>参数，将字符串转换成指定编码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> f:    <span class="comment">#根据上面encoding方法返回结果可知该文件为GBK编码</span></span><br><span class="line"><span class="meta">... </span>    print(f.read())    <span class="comment">#指定使用GBK编码可正常输出</span></span><br><span class="line">...</span><br><span class="line">Hello World!</span><br><span class="line">正在测试写模式写入!</span><br><span class="line">正在测试追加模式写入!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:    <span class="comment">#当使用utf-8编码输出时就会报错</span></span><br><span class="line"><span class="meta">... </span>    print(f.read())</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Users\xiaohuihui\AppData\Local\Programs\Python\Python36\lib\codecs.py"</span>, line <span class="number">321</span>, <span class="keyword">in</span> decode</span><br><span class="line">    (result, consumed) = self._buffer_decode(data, self.errors, final)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xd5 in position 14: invalid continuation byte</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;p&gt;在python中读写文件有3个步骤  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;open()&lt;/code&gt;函数，返回一个File对象。  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;helloFile = open(&lt;span class=&quot;string&quot;&gt;&#39;D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="文件" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="open" scheme="https://rosinelan.github.io/tags/open/"/>
    
      <category term="close" scheme="https://rosinelan.github.io/tags/close/"/>
    
      <category term="read" scheme="https://rosinelan.github.io/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>python编码</title>
    <link href="https://rosinelan.github.io/2018/04/11/python%E7%BC%96%E7%A0%81/"/>
    <id>https://rosinelan.github.io/2018/04/11/python编码/</id>
    <published>2018-04-11T07:38:32.000Z</published>
    <updated>2018-04-11T13:23:51.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>常用字符编码有<code>ASCII</code>,<code>GB2312</code>,<code>Unicode</code>,<code>UTF-8</code>等，为什么需要这么多不同的编码，又是怎么来的呢？<br>计算机能够识别的只有二进制的0和1，要处理字母等类型只能转换为类似<code>01010001</code>的二进制数字才能处理；人要能够正常阅读，也需要计算机将二进制数转换为对应的字母。那么如何转换，转换的规则和标准又是什么？这就是我们常见的编码所规定的。<br><a id="more"></a></p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>计算机是美国人发明的，因此最早只有英语中的127个字符(包括大小写字母、数字、特殊符号等)被编码到计算机里，这个编码表就是<code>ASCII</code>编码。根据前面一个字节(8比特)最多可以表示<code>256</code>个字符，那么对于英文中的100多个字符使用一个字节中的前7位就可以表示。    </p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>英文是可以被计算机识别了，那么中文怎么破？为了解决汉字问题，中国国家标准总局提出了<code>GB2312</code>编码，收录了6763个汉字，后来又在此基础上创建了<code>GBK</code>编码，收录了27484汉字，同时收录了包括藏文、蒙文等在内的主要少数名族文字。  </p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>中文使用<code>GBK</code>编码，那么对于其他国家的文字如何处理，各个国家都有建立了自己的标准。为了统一标准，统一联盟国际组织提出了<code>Unicode</code>编码，该编码将所有语言统一到一套编码。<br>Unicode标准也在不断发展，最常见的是两个字节表示一个字符(生僻字符可能需要4个字节)。<br><code>ASCII</code>和<code>Unicode</code>主要区别：ASCII编码使用1个字节，Unicode编码通常是2个字节。</p><blockquote><p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>;<br>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>;<br>汉字<code>中</code>已经超出ASCII编码范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>;<br>ASCII编码的<code>A</code>用Unicode编码，只要在前面补0就可以，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。  </p></blockquote><p>从上面可以看出，假如对英文使用Unicode编码要比ASCII编码多一倍的存储空间，在存储和传输上不方便。<br>所以本着节约的精神，又出现了把Unicode编码转换为可变长编码的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同数字大小编码成1-6个字节，常用的英文字母编码成1个字节，汉字通常是3个字节。当传输的文本中包含大量的英文字符时，用UTF-8编码可以节省空间。<br>上面内容总结一下就是  </p><ul><li>为处理英文字符，出现了<code>ASCII</code>码。  </li><li>为处理中文字符，出现了<code>GB2312</code>和<code>GBK</code>。  </li><li>为统一处理不同国家不同语言，出现了<code>Unicode</code>编码。  </li><li>为提高Unicode传输和存储的性能，出现了<code>UTF-8</code>,它是Unicode的一种实现方式。  <h2 id="python2的字符编码"><a href="#python2的字符编码" class="headerlink" title="python2的字符编码"></a>python2的字符编码</h2>python2中默认的字符编码是<code>ASCII</code>码，也就是说在处理数据时，若没有指定它的编码类型，默认将会当做ASCII码来处理。当编写的python文件中包含有中文字符时就会报错。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><img src="http://cdn.rosinelan.com/blog/program/python-code-default.png" alt="python-code-default" title="python-code-default"><br>根据上述结果可以看到出错原因是python将整个脚本当做ASCII码处理，但是出现的中文<code>是否乱码</code>ASCII码无法处理。处理方式很简单，在头部添加一行编码声明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br>pycharm执行<br><img src="http://cdn.rosinelan.com/blog/program/python-code-utf8-pycharm.png" alt="python-code-utf8-pycharm" title="python-code-utf8-pycharm"><br>windows命令行执行<br><img src="http://cdn.rosinelan.com/blog/program/python-code-utf8.png" alt="python-code-utf8-cmd" title="python-code-utf8-cmd"><br>声明编码方式之后发现在pycahrm执行输出正确信息，但是在windows命令行输出乱码。<br>windows命令行默认使用的是<code>GBK</code>编码，但是在python脚本中使用的是<code>UTF-8</code>，两边不一致导致出现乱码，只要修改两者一致即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: GBK -*-</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><img src="http://cdn.rosinelan.com/blog/program/python-code-gbk.png" alt="python-code-gbk" title="python-code-gbk"><br>此时可以看到在命令行执行结果显示正确，但是相应的在pycharm执行就会出现乱码的情况。也进一步说明导致乱码就是编码格式不一致。也就是说，当需要操作系统正确输出一个字符时，除了要知道该字符的字符编码，还需要知道自己使用系统的字符编码，两者一致时就不会出现所谓<code>乱码</code>。  </p><h2 id="decode-和encode"><a href="#decode-和encode" class="headerlink" title="decode()和encode()"></a>decode()和encode()</h2><p>decode()方法将其他编码字符转换成Unicode编码字符。<br>encode()方法将Unicode编码字符转换成其他编码字符。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-encode.png" alt="python-code-encode" title="python-code-encode"><br>上述命令在pycharm自带的终端执行，其默认字符编码为<code>UTF-8</code>。<br>直接输入<code>s</code>出现的<code>&#39;\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81&#39;</code>为对应的UTF-8字符串。<br>使用decode()方法将s转换为unicode编码，此时输入<code>unicode_s</code>出现的<code>u&#39;\u662f\u5426\u4e71\u7801&#39;</code>为unicode字符串。<br>使用encode()方法将unicode_s转换为GB2312编码，此时输入<code>gb2312_s</code>出现的<code>&#39;\xca\xc7\xb7\xf1\xc2\xd2\xc2\xeb&#39;</code>为gb2312字符串。由于终端为UTF-8编码，所以使用<code>print gb2312_s</code>会出现乱码情况。<br>在windows终端可以正常输出gb2312编码的字符串。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-decode.png" alt="python-code-decode" title="python-code-decode"><br>总结  </p><ul><li>python2中可以直接查看unicode字符串。  </li><li>python2中对于字符编码的转换通过unicode作为中间人进行转换。  </li><li>decode()方法与在字符串前加u的方法实现的效果相同。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-u.png" alt="python-code-u" title="python-code-u">  <h2 id="python2中的列表"><a href="#python2中的列表" class="headerlink" title="python2中的列表"></a>python2中的列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"哈哈"</span>,<span class="string">"ABC"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">'\xb9\xfe\xb9\xfe'</span>, <span class="string">'ABC'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list1[<span class="number">0</span>]</span><br><span class="line">哈哈</span><br></pre></td></tr></table></figure></li></ul><p>当一个中文的字符出现在列表(或元组或字典)中，它不会被显示为中文而是显示为字符串。但是当该字符窜从列表中取出再使用print时就可以正常显示为中文。<br>字符串是所有字符在python2中的本质形态，该字符串是计算机可以理解的，不是通常所说的乱码。在python3中就不存在这种问题了。  </p><h2 id="python3的字符编码"><a href="#python3的字符编码" class="headerlink" title="python3的字符编码"></a>python3的字符编码</h2><p>在python3中默认编码方式为<code>UTF-8</code>，所以coding声明可以不用写，但为了兼容python2建议添加。<br>python3中字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。当需要传输或者保存到硬盘时，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。<br>以Unicode表示的<code>str</code>通过encode()方法可以编码为指定的<code>bytes</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"ABC"</span>.encode(<span class="string">'ASCII'</span>)</span><br><span class="line"><span class="string">b'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"是否乱码"</span>.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="string">b'\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81'</span></span><br></pre></td></tr></table></figure></p><ul><li><code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或者双引号表示。  </li><li>在<code>bytes</code>中无法显示为ASCII字符的字节，用<code>\x##</code>表示。<br>相反，要将<code>bytes</code>变为<code>str</code>，就需要使用<code>decode()</code>方法。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ASCII'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81'</span>.decode(<span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="string">'是否乱码'</span></span><br></pre></td></tr></table></figure></li></ul><p>上面说到的编码问题主要是python2中，请注意区分版本。<br>即使在python3中，涉及到<code>str</code>和<code>bytes</code>转换时，非特殊情况一定要使用<code>UTF-8</code>编码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;p&gt;常用字符编码有&lt;code&gt;ASCII&lt;/code&gt;,&lt;code&gt;GB2312&lt;/code&gt;,&lt;code&gt;Unicode&lt;/code&gt;,&lt;code&gt;UTF-8&lt;/code&gt;等，为什么需要这么多不同的编码，又是怎么来的呢？&lt;br&gt;计算机能够识别的只有二进制的0和1，要处理字母等类型只能转换为类似&lt;code&gt;01010001&lt;/code&gt;的二进制数字才能处理；人要能够正常阅读，也需要计算机将二进制数转换为对应的字母。那么如何转换，转换的规则和标准又是什么？这就是我们常见的编码所规定的。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="编码" scheme="https://rosinelan.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="decode" scheme="https://rosinelan.github.io/tags/decode/"/>
    
      <category term="encode" scheme="https://rosinelan.github.io/tags/encode/"/>
    
  </entry>
  
  <entry>
    <title>python练习题目(二)</title>
    <link href="https://rosinelan.github.io/2018/04/11/python%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/11/python练习题目-二/</id>
    <published>2018-04-11T06:01:01.000Z</published>
    <updated>2018-04-11T07:02:31.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p>ABCD乘9=DCBA，A=? B=? C=? D=?</p></blockquote><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>A和D肯定不为0，B和C取值范围为0-9</li><li>以A开头的四位数乘9得到四位数，由于判断A肯定为1</li><li>A为1，那么乘以9得到的四位数，D肯定为9<a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1000</span>*A + <span class="number">100</span>*B + <span class="number">10</span>*C + D)*<span class="number">9</span> == (D*<span class="number">1000</span> + C*<span class="number">100</span> + B*<span class="number">10</span> + A):</span><br><span class="line">                    print(<span class="string">"A=&#123;0&#125;,B=&#123;1&#125;,C=&#123;2&#125;,D=&#123;3&#125;"</span>.format(A, B, C, D))</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://cdn.rosinelan.com/blog/program/python-cal-result.png" alt="python-cal-result" title="python-cal-result">  </p><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><blockquote><p>九宫格<br>A B C<br>D E F<br>G H I<br>A-I代表数字，取值范围为1-9，要求横、竖、对角各方向的3个数字不重复，且3个数字之和相等，均为15</p></blockquote><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>数字取值范围为1-9</li><li>A取值范围1-9，那么B取值范围为1-9同时排除A</li><li>C取值范围1-9同时排除A和B，依次类推  <h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="实现方式1"><a href="#实现方式1" class="headerlink" title="实现方式1"></a>实现方式1</h4>使用copy()及remove()方法实现各数字判断<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line">number = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> number:</span><br><span class="line">    a = number.copy()</span><br><span class="line">    a.remove(A)</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> a:</span><br><span class="line">        b = a.copy()</span><br><span class="line">        b.remove(B)</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> b:</span><br><span class="line">            c = b.copy()</span><br><span class="line">            c.remove(C)</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> c:</span><br><span class="line">                d = c.copy()</span><br><span class="line">                d.remove(D)</span><br><span class="line">                <span class="keyword">for</span> E <span class="keyword">in</span> d:</span><br><span class="line">                    e = d.copy()</span><br><span class="line">                    e.remove(E)</span><br><span class="line">                    <span class="keyword">for</span> F <span class="keyword">in</span> e:</span><br><span class="line">                        f = e.copy()</span><br><span class="line">                        f.remove(F)</span><br><span class="line">                        <span class="keyword">for</span> G <span class="keyword">in</span> f:</span><br><span class="line">                            g = f.copy()</span><br><span class="line">                            g.remove(G)</span><br><span class="line">                            <span class="keyword">for</span> H <span class="keyword">in</span> g:</span><br><span class="line">                                h = g.copy()</span><br><span class="line">                                h.remove(H)</span><br><span class="line">                                <span class="keyword">for</span> I <span class="keyword">in</span> h:</span><br><span class="line">                                    <span class="keyword">if</span> A+B+C == D+E+F == G+H+I == A+D+G == B+E+H == C+F+I == A+E+I == C+E+G == <span class="number">15</span>:</span><br><span class="line">                                        print(<span class="string">'''</span></span><br><span class="line"><span class="string">                                        -------------</span></span><br><span class="line"><span class="string">                                        | &#123;0&#125; | &#123;1&#125; | &#123;2&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;3&#125; | &#123;4&#125; | &#123;5&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;6&#125; | &#123;7&#125; | &#123;8&#125; |</span></span><br><span class="line"><span class="string">                                        -------------'''</span>.format(A, B, C, D, E, F, G, H, I))</span><br><span class="line"></span><br><span class="line">end = time.clock()</span><br><span class="line">print(<span class="string">'Running time: %s Seconds'</span>%(end-start))</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现方式2"><a href="#实现方式2" class="headerlink" title="实现方式2"></a>实现方式2</h4><p>使用列表生成式实现各数字判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]:</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != A]:</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                <span class="keyword">for</span> E <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                    <span class="keyword">for</span> F <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                        <span class="keyword">for</span> G <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                            <span class="keyword">for</span> H <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != G <span class="keyword">and</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                                <span class="keyword">for</span> I <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != H <span class="keyword">and</span> x != G <span class="keyword">and</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                                    <span class="keyword">if</span> A+B+C == D+E+F == G+H+I == A+D+G == B+E+H == C+F+I == A+E+I == C+E+G == <span class="number">15</span>:</span><br><span class="line">                                        print(<span class="string">'''</span></span><br><span class="line"><span class="string">                                        -------------</span></span><br><span class="line"><span class="string">                                        | &#123;0&#125; | &#123;1&#125; | &#123;2&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;3&#125; | &#123;4&#125; | &#123;5&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;6&#125; | &#123;7&#125; | &#123;8&#125; |</span></span><br><span class="line"><span class="string">                                        -------------'''</span>.format(A, B, C, D, E, F, G, H, I))</span><br><span class="line">end = time.clock()</span><br><span class="line">print(<span class="string">'Running time: %s Seconds'</span>%(end-start))</span><br></pre></td></tr></table></figure></p><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><h4 id="实现方式1-1"><a href="#实现方式1-1" class="headerlink" title="实现方式1"></a>实现方式1</h4><p><img src="http://cdn.rosinelan.com/blog/program/python-jiucopy-result.png" alt="python-jiucopy-result" title="python-jiucopy-result">  </p><h4 id="实现方式2-1"><a href="#实现方式2-1" class="headerlink" title="实现方式2"></a>实现方式2</h4><p><img src="http://cdn.rosinelan.com/blog/program/python-jiulist-result.png" alt="python-jiulist-result" title="python-jiulist-result"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>根据题目2输出结果中的运行时间可知，方式1运行0.3秒，方式2运行1.4秒，相差5倍。<br>根据代码逻辑，方式1在嵌套循环中直接使用remove()方式删除；方式2需要在嵌套循环中进行比较，这是导致两种算法时间差异的主要原因。<br>同理，题目1中通过对题目分析，确定数字A和D的取值，不需要从1-9进行循环，对程序运行时间肯定也有大幅的提升。<br>好代码好算法，值得关注。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目一&quot;&gt;&lt;a href=&quot;#题目一&quot; class=&quot;headerlink&quot; title=&quot;题目一&quot;&gt;&lt;/a&gt;题目一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ABCD乘9=DCBA，A=? B=? C=? D=?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A和D肯定不为0，B和C取值范围为0-9&lt;/li&gt;
&lt;li&gt;以A开头的四位数乘9得到四位数，由于判断A肯定为1&lt;/li&gt;
&lt;li&gt;A为1，那么乘以9得到的四位数，D肯定为9
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数字" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
      <category term="九宫格" scheme="https://rosinelan.github.io/tags/%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    
      <category term="计算" scheme="https://rosinelan.github.io/tags/%E8%AE%A1%E7%AE%97/"/>
    
      <category term="乘法" scheme="https://rosinelan.github.io/tags/%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python练习题目(一)</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE-%E4%B8%80/"/>
    <id>https://rosinelan.github.io/2018/04/04/python练习题目-一/</id>
    <published>2018-04-04T13:48:43.000Z</published>
    <updated>2018-04-04T14:16:04.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><blockquote><p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。  </p></blockquote><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>利用while语句,条件为输入的字符不为’\n’。  <a id="more"></a></li><li>用isdigit函数判断是否数字。  </li><li>用isalpha判断是否字母。   <h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"Please input a string:"</span>)</span><br><span class="line">digit = <span class="number">0</span></span><br><span class="line">alpha = <span class="number">0</span></span><br><span class="line">space = <span class="number">0</span></span><br><span class="line">other = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'\\n'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit():</span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isalpha():</span><br><span class="line">            alpha += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isspace():</span><br><span class="line">            space += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            other += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"数字个数:&#123;0&#125;;字母个数:&#123;1&#125;;空格个数:&#123;2&#125;;其他字符个数:&#123;3&#125;"</span>.format(digit, alpha, space, other))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise1.png" alt="python-for-excrise1" title="python-for-excrise1"><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise11.png" alt="python-for-excrise11" title="python-for-excrise11"><br><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise12.png" alt="python-for-excrise12" title="python-for-excrise12"></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><blockquote><p>计算0!+1!+….+n!  </p></blockquote><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>0! == 1。1! == 1。</li><li>先计算 n!，然后再循环求和</li><li>根据 n! = n <em> (n-1) </em> (n-2) <em> …. </em> 1，采用循环方式计算n!</li><li>根据 n! = n * (n - 1)!，采用递归方式计算n!<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor1</span><span class="params">(x)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, x + <span class="number">1</span>):</span><br><span class="line">        res *= a</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"应该输入不小于0的数！"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><h4 id="调用普通函数"><a href="#调用普通函数" class="headerlink" title="调用普通函数"></a>调用普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factor1(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p><h4 id="调用递归函数"><a href="#调用递归函数" class="headerlink" title="调用递归函数"></a>调用递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factorial(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; title=&quot;题目1&quot;&gt;&lt;/a&gt;题目1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用while语句,条件为输入的字符不为’\n’。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="阶乘" scheme="https://rosinelan.github.io/tags/%E9%98%B6%E4%B9%98/"/>
    
      <category term="字符" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="数字" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>python条件判断和循环</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>https://rosinelan.github.io/2018/04/04/python条件判断和循环/</id>
    <published>2018-04-04T11:08:55.000Z</published>
    <updated>2018-04-04T13:46:42.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>条件判断使用<code>if</code>，语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>其中<code>elif</code>和<code>else</code>均为可选。<br>下面以实例进行说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br></pre></td></tr></table></figure></p><p>python中条件判断主要根据缩进和冒号进行判断，假如if中的条件为True，则执行if下一行缩进的print语句，否则什么也不做。<br>下面的语句则添加了<code>else</code>条件，当<code>if</code>条件为True时执行后面缩进的print语句，否则执行<code>else</code>后面缩进的语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>下面的语句中添加了<code>elif</code>和<code>else</code>条件。<br>当<code>if</code>条件为True时执行后面缩进的print语句，剩余的<code>elif</code>和<code>else</code>均不执行。<br>当<code>if</code>条件为False时执行<code>elif</code>语句，当<code>elif</code>条件为True时，执行其后面缩进的print语句，剩下的<code>else</code>不执行。<br>当<code>if</code>和<code>elif</code>条件均为False时，执行<code>else</code>后面缩进的print语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"你已经是个少年了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>由此可见<code>if</code>条件判断是从上向下执行，当有条件成立时执行对应的缩进语句，剩余的条件将忽略。<br>判断字符串<code>str</code>是否为空的条件<code>if str.strip():</code><br>判断对象<code>d1</code>是否为字典的条件<code>if isinstance(d1,dict):</code><br>根据键盘输入判断数字是正数、负数还是零。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line"><span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是正数"</span>.format(number))</span><br><span class="line"><span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是零"</span>.format(number))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是负数"</span>.format(number))</span><br></pre></td></tr></table></figure></p><p>python中通过input接受的均为字符串，所以使用强制转换将类型转换为整型<code>int(number)</code>。  </p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环主要是解决重复性的问题，例如类似计算1到1000的和这类问题。<br>python中循环主要有<code>for .. in ..</code>和<code>while</code>循环。   </p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环的语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sequence:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p><code>for i in ..</code>循环是将每个元素代入<code>i</code>中然后执行缩进的语句<br>计算1-10的和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>当我们要计算<code>1-100</code>甚至<code>1-10000</code>的和时候难道要从1写道10000嘛？<br>使用<code>range()</code>函数可以生成整数序列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>根据上面输出可以看到<code>range()</code>函数输出的序列包含左面数字，不包含右面数字。<br>根据<code>for</code>循环和<code>range</code>函数实现乘法口诀。<br>代码思路<br>根据乘法口诀的特点，<code>a</code>表示乘号前的数字，<code>b</code>表示乘号后的数字。<br><code>b</code>总是和它所在的行数相等。<br><code>a</code>是变化的，但变化范围总是从<code>1至b</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, b+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"&#123;0&#125; x &#123;1&#125; = &#123;2&#125;\t"</span>.format(a, b, a*b), end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/python-for-multi.png" alt="python-for-multi" title="python-for-multi"><br>为使输出美观，使用了<code>print()</code>中的<code>end=&quot;&quot;</code>参数，默认情况下print()输出结束之后是换行符，可以自定义。<br>此处内层for循环的缩进语句中print()不换行；使用<code>\t</code>制表符进行对齐。<br>外层循环时换行(即乘法表每一行结束时换行)。   </p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while循环语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p>while循环，只要条件满足就不断循环，直到条件不满足时才退出循环。<br>下面是1-100求和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum += n    <span class="comment">#等价于sum = sum + n</span></span><br><span class="line">    n -= <span class="number">1</span>    <span class="comment">#等价于n = n -1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>针对前面从键盘输入，再判断是正数、负数还是零的代码进行修改<br>增加判断键盘输入是否为数字，若不是数字则要求重新输入，直到输入数字，能够正确判断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> number.strip():</span><br><span class="line">        <span class="keyword">if</span> number.isdigit():</span><br><span class="line">            <span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是正数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是零。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是负数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入的不是数字，请重新输入。"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入的是空格，请重新输入。"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></p><p>其中<code>while 1</code>表示死循环，即除非主动跳出循环，否则将永远循环下去。<br>主动跳出循环使用<code>break</code>实现。<br>当输入的不是数字或者是空格时要求继续输入，该功能实现则是使用<code>continue</code>实现。  </p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break语句可以在循环过程中直接跳出本层循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:    <span class="comment">#在i大于5的时候执行break语句结束循环</span></span><br><span class="line">        <span class="keyword">break</span>    <span class="comment">#执行break之后大于5的数字将全部无法输出</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue语句可以提前结束本轮循环，直接开始下一轮循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:    <span class="comment">#如果i是偶数则执行continue</span></span><br><span class="line">        <span class="keyword">continue</span>    <span class="comment">#执行continue则直接重新开始循环，不输出本次的i</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>需要注意，<code>break</code>和<code>continue</code>语句不可滥用，通常都是配合<code>if</code>语句使用。<br>在大多数情况下可以通过逻辑判断等其它方式实现对应功能，而使用<code>break</code>或<code>continue</code>语句容易造成代码逻辑分叉多，容易出错。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h2&gt;&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;p&gt;条件判断使用&lt;code&gt;if&lt;/code&gt;，语法格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
      <category term="条件判断" scheme="https://rosinelan.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    
      <category term="循环" scheme="https://rosinelan.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
</feed>
