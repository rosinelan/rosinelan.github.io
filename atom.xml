<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-04-04T14:14:55.090Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python练习题目(一)</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE-%E4%B8%80/"/>
    <id>https://rosinelan.github.io/2018/04/04/python练习题目-一/</id>
    <published>2018-04-04T13:48:43.000Z</published>
    <updated>2018-04-04T14:14:55.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><blockquote><p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>利用while语句,条件为输入的字符不为’\n’。  <a id="more"></a></li><li>用isdigit函数判断是否数字。  </li><li>用isalpha判断是否字母。   <h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"Please input a string:"</span>)</span><br><span class="line">digit = <span class="number">0</span></span><br><span class="line">alpha = <span class="number">0</span></span><br><span class="line">space = <span class="number">0</span></span><br><span class="line">other = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'\\n'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit():</span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isalpha():</span><br><span class="line">            alpha += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isspace():</span><br><span class="line">            space += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            other += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"数字个数:&#123;0&#125;;字母个数:&#123;1&#125;;空格个数:&#123;2&#125;;其他字符个数:&#123;3&#125;"</span>.format(digit, alpha, space, other))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise1.png" alt="python-for-excrise1" title="python-for-excrise1"><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise11.png" alt="python-for-excrise11" title="python-for-excrise11"><br><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise12.png" alt="python-for-excrise12" title="python-for-excrise12"></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><blockquote><p>计算0!+1!+….+n!</p><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>0! == 1。1! == 1。</li><li>先计算 n!，然后再循环求和</li><li>根据 n! = n <em> (n-1) </em> (n-2) <em> …. </em> 1，采用循环方式计算n!</li><li>根据 n! = n * (n - 1)!，采用递归方式计算n!<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor1</span><span class="params">(x)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, x + <span class="number">1</span>):</span><br><span class="line">        res *= a</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"应该输入不小于0的数！"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><h4 id="调用普通函数"><a href="#调用普通函数" class="headerlink" title="调用普通函数"></a>调用普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factor1(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p><h4 id="调用递归函数"><a href="#调用递归函数" class="headerlink" title="调用递归函数"></a>调用递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factorial(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; title=&quot;题目1&quot;&gt;&lt;/a&gt;题目1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。&lt;/p&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用while语句,条件为输入的字符不为’\n’。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="阶乘" scheme="https://rosinelan.github.io/tags/%E9%98%B6%E4%B9%98/"/>
    
      <category term="字符" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="数字" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>python条件判断和循环</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>https://rosinelan.github.io/2018/04/04/python条件判断和循环/</id>
    <published>2018-04-04T11:08:55.000Z</published>
    <updated>2018-04-04T13:46:42.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>条件判断使用<code>if</code>，语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>其中<code>elif</code>和<code>else</code>均为可选。<br>下面以实例进行说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br></pre></td></tr></table></figure></p><p>python中条件判断主要根据缩进和冒号进行判断，假如if中的条件为True，则执行if下一行缩进的print语句，否则什么也不做。<br>下面的语句则添加了<code>else</code>条件，当<code>if</code>条件为True时执行后面缩进的print语句，否则执行<code>else</code>后面缩进的语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>下面的语句中添加了<code>elif</code>和<code>else</code>条件。<br>当<code>if</code>条件为True时执行后面缩进的print语句，剩余的<code>elif</code>和<code>else</code>均不执行。<br>当<code>if</code>条件为False时执行<code>elif</code>语句，当<code>elif</code>条件为True时，执行其后面缩进的print语句，剩下的<code>else</code>不执行。<br>当<code>if</code>和<code>elif</code>条件均为False时，执行<code>else</code>后面缩进的print语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"你已经是个少年了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>由此可见<code>if</code>条件判断是从上向下执行，当有条件成立时执行对应的缩进语句，剩余的条件将忽略。<br>判断字符串<code>str</code>是否为空的条件<code>if str.strip():</code><br>判断对象<code>d1</code>是否为字典的条件<code>if isinstance(d1,dict):</code><br>根据键盘输入判断数字是正数、负数还是零。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line"><span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是正数"</span>.format(number))</span><br><span class="line"><span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是零"</span>.format(number))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是负数"</span>.format(number))</span><br></pre></td></tr></table></figure></p><p>python中通过input接受的均为字符串，所以使用强制转换将类型转换为整型<code>int(number)</code>。  </p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环主要是解决重复性的问题，例如类似计算1到1000的和这类问题。<br>python中循环主要有<code>for .. in ..</code>和<code>while</code>循环。   </p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环的语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sequence:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p><code>for i in ..</code>循环是将每个元素代入<code>i</code>中然后执行缩进的语句<br>计算1-10的和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>当我们要计算<code>1-100</code>甚至<code>1-10000</code>的和时候难道要从1写道10000嘛？<br>使用<code>range()</code>函数可以生成整数序列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>根据上面输出可以看到<code>range()</code>函数输出的序列包含左面数字，不包含右面数字。<br>根据<code>for</code>循环和<code>range</code>函数实现乘法口诀。<br>代码思路<br>根据乘法口诀的特点，<code>a</code>表示乘号前的数字，<code>b</code>表示乘号后的数字。<br><code>b</code>总是和它所在的行数相等。<br><code>a</code>是变化的，但变化范围总是从<code>1至b</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, b+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"&#123;0&#125; x &#123;1&#125; = &#123;2&#125;\t"</span>.format(a, b, a*b), end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/python-for-multi.png" alt="python-for-multi" title="python-for-multi"><br>为使输出美观，使用了<code>print()</code>中的<code>end=&quot;&quot;</code>参数，默认情况下print()输出结束之后是换行符，可以自定义。<br>此处内层for循环的缩进语句中print()不换行；使用<code>\t</code>制表符进行对齐。<br>外层循环时换行(即乘法表每一行结束时换行)。   </p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while循环语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p>while循环，只要条件满足就不断循环，直到条件不满足时才退出循环。<br>下面是1-100求和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum += n    <span class="comment">#等价于sum = sum + n</span></span><br><span class="line">    n -= <span class="number">1</span>    <span class="comment">#等价于n = n -1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>针对前面从键盘输入，再判断是正数、负数还是零的代码进行修改<br>增加判断键盘输入是否为数字，若不是数字则要求重新输入，直到输入数字，能够正确判断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> number.strip():</span><br><span class="line">        <span class="keyword">if</span> number.isdigit():</span><br><span class="line">            <span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是正数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是零。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是负数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入的不是数字，请重新输入。"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入的是空格，请重新输入。"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></p><p>其中<code>while 1</code>表示死循环，即除非主动跳出循环，否则将永远循环下去。<br>主动跳出循环使用<code>break</code>实现。<br>当输入的不是数字或者是空格时要求继续输入，该功能实现则是使用<code>continue</code>实现。  </p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break语句可以在循环过程中直接跳出本层循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:    <span class="comment">#在i大于5的时候执行break语句结束循环</span></span><br><span class="line">        <span class="keyword">break</span>    <span class="comment">#执行break之后大于5的数字将全部无法输出</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue语句可以提前结束本轮循环，直接开始下一轮循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:    <span class="comment">#如果i是偶数则执行continue</span></span><br><span class="line">        <span class="keyword">continue</span>    <span class="comment">#执行continue则直接重新开始循环，不输出本次的i</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>需要注意，<code>break</code>和<code>continue</code>语句不可滥用，通常都是配合<code>if</code>语句使用。<br>在大多数情况下可以通过逻辑判断等其它方式实现对应功能，而使用<code>break</code>或<code>continue</code>语句容易造成代码逻辑分叉多，容易出错。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h2&gt;&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;p&gt;条件判断使用&lt;code&gt;if&lt;/code&gt;，语法格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
      <category term="条件判断" scheme="https://rosinelan.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    
      <category term="循环" scheme="https://rosinelan.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译安装openssh</title>
    <link href="https://rosinelan.github.io/2018/04/04/ubuntu%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openssh/"/>
    <id>https://rosinelan.github.io/2018/04/04/ubuntu编译安装openssh/</id>
    <published>2018-04-04T09:45:59.000Z</published>
    <updated>2018-04-04T10:57:30.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>新装的<code>UBUNTU 14.04.5 LTS i686</code>版本，可<code>VNC</code>连接。<br>已安装<code>openssl 1.0.1f</code>版本，未安装zlib和openssl。<br>现需要安装openssh用于远程连接，停用vnc。   </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>安装openssh主要依赖zlib和openssl，出于安全考虑，建议均安装官方发布的最新稳定版本。<br><a id="more"></a><br>openssh 7.5p1要求openssl版本小于1.1.0。<br>下载均建议从官方网站下载，不建议从第三方渠道下载。<br>zlib官方地址<a href="http://www.zlib.net/" target="_blank" rel="noopener">点击访问</a><br>openssl官方地址<a href="https://www.openssl.org/" target="_blank" rel="noopener">点击访问</a><br>openssh官方地址<a href="http://www.openssh.com/" target="_blank" rel="noopener">点击访问</a><br>均选择源码的tar.gz包下载。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装zlib和openssl，最后安装openssh。</p><h3 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openssl-1.0.2n.tar.gz</span><br><span class="line">cd openssl-1.0.2n</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>由于系统原来存在openssl其他版本，备份原版本。<br><code>mv /usr/bin/openssl /usr/bin/openssl.old</code><br>新建软链接(路径根据<code>make install</code>结果可以看到，根据实际情况创建即可)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/local/bin/openssl</span><br><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure></p><p>同时需要更新openssl动态库目录(此处目录路径需根据实际情况调整)<br><code>echo &quot;/usr/local/ssl/lib&quot; &gt;&gt; /etc/ld.so.conf</code><br>更新库目录缓存<br><code>ldconfig -v</code><br>确认openssl版本<br><code>openssl version</code> </p><h3 id="安装openssh"><a href="#安装openssh" class="headerlink" title="安装openssh"></a>安装openssh</h3><p>configure时候需要指定openssl安装目录，防止openssh无法找到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf openssh-7.7p1.tar.gz</span><br><span class="line">cd openssh-7.7p1</span><br><span class="line">./configure --with-ssl-dir=/usr/local/ssl</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>若<code>make install</code>时出现下面错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Privilege separation user sshd does not exist</span><br><span class="line">make: [check-config] Error 255 (ignored)</span><br></pre></td></tr></table></figure></p><p>需要在<code>/etc/passwd</code>中添加<code>sshd</code>用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/passwd</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br></pre></td></tr></table></figure></p><p>然后重新<code>make install</code>即可。<br>此处报错是<code>Privilege separation</code>(特权分离)，是openssh的一种安全机制。  </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="sshd服务启动"><a href="#sshd服务启动" class="headerlink" title="sshd服务启动"></a>sshd服务启动</h3><p><code>/usr/local/sbin/sshd</code></p><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><p>由于编译安装，ssh未添加至系统服务，故为防止重启之后无法连接，添加开机自启动。<br><code>sed -i &#39;$i\/usr/local/sbin/sshd&#39; /etc/rc.local</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;新装的&lt;code&gt;UBUNTU 14.04.5 LTS i686&lt;/code&gt;版本，可&lt;code&gt;VNC&lt;/code&gt;连接。&lt;br&gt;已安装&lt;code&gt;openssl 1.0.1f&lt;/code&gt;版本，未安装zlib和openssl。&lt;br&gt;现需要安装openssh用于远程连接，停用vnc。   &lt;/p&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;安装openssh主要依赖zlib和openssl，出于安全考虑，建议均安装官方发布的最新稳定版本。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="UBUNTU" scheme="https://rosinelan.github.io/tags/UBUNTU/"/>
    
      <category term="OPENSSL" scheme="https://rosinelan.github.io/tags/OPENSSL/"/>
    
      <category term="OPENSSH" scheme="https://rosinelan.github.io/tags/OPENSSH/"/>
    
      <category term="ZLIB" scheme="https://rosinelan.github.io/tags/ZLIB/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡导致的视图状态消息验证代码错误</title>
    <link href="https://rosinelan.github.io/2018/04/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AF%BC%E8%87%B4%E7%9A%84%E8%A7%86%E5%9B%BE%E7%8A%B6%E6%80%81%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81%E4%BB%A3%E7%A0%81%E9%94%99%E8%AF%AF/"/>
    <id>https://rosinelan.github.io/2018/04/03/负载均衡导致的视图状态消息验证代码错误/</id>
    <published>2018-04-03T02:59:58.000Z</published>
    <updated>2018-04-03T03:32:42.088Z</updated>
    
    <content type="html"><![CDATA[<p>windows下<code>.NET V4.0</code>应用程序通过<code>IIS8.0</code>对外提供服务，最近迁移采用<code>F5</code>做<code>负载均衡</code>，通过集群VIP访问出现<code>视图状态 MAC 的验证失败</code>错误提示，详细报错<br><a id="more"></a><br><img src="http://cdn.rosinelan.com/blog/system/windows-mac-error.png" alt="windows-mac-error" title="windows-mac-error"><br>根据错误提示信息可以很容易看到错误原因及如何解决，更详细的解决方案可参考官方的<a href="https://support.microsoft.com/zh-cn/help/2915218/resolving-view-state-message-authentication-code-mac-errors" target="_blank" rel="noopener">解决视图状态消息验证代码 (MAC) 错误</a><br>注意：针对不同版本的.net和IIS解决方法可能不尽相同。  </p><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>当不在config文件中指定<code>machineKey</code>元素，ASP.NET将为应用程序使用自动生成的密钥，但自动生成的密钥是服务器本地密钥，且集群中每台服务器都会自己生成密钥，且在负载均衡层面并未对此进行处理，这样当一个服务器生成的_VIEWSTATE负载被其他服务器使用就会遇到MAC验证失败问题。<br>当采用负载均衡集群提供服务时，ASP.NET要求所有服务器都必须具有相同的<code>machineKey</code>。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在其中一台服务器为应用程序生成machineKey,拷贝至其他服务器。<br>选择集群中的一台服务器<br>IIS管理器&gt;服务器&gt;网站&gt;Default Web Site ，选择需要添加的应用程序，在右面的功能试图中双击“计算机密钥”，进入下面界面。<br><img src="http://cdn.rosinelan.com/blog/system/windows-gen-key.png" alt="windows-gen-key" title="windows-gen-key"><br>选择验证方法和加密方法;<br>验证密钥和解密密钥2个复选框均取消;<br>点击右侧的生成密钥，可以看到验证密钥和解密密钥对应的文本框中生成一串字母+数字的组合，然后点击应用。<br>以该服务器生成的密钥为基准，在其它服务器计算机密钥中选择相同的验证方法和加密方法，同时将验证密钥和解密密钥复制至其它服务器。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows下&lt;code&gt;.NET V4.0&lt;/code&gt;应用程序通过&lt;code&gt;IIS8.0&lt;/code&gt;对外提供服务，最近迁移采用&lt;code&gt;F5&lt;/code&gt;做&lt;code&gt;负载均衡&lt;/code&gt;，通过集群VIP访问出现&lt;code&gt;视图状态 MAC 的验证失败&lt;/code&gt;错误提示，详细报错&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/categories/system/WINDOWS/"/>
    
    
      <category term="windows" scheme="https://rosinelan.github.io/tags/windows/"/>
    
      <category term="负载均衡" scheme="https://rosinelan.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="MAC" scheme="https://rosinelan.github.io/tags/MAC/"/>
    
      <category term="machinekey" scheme="https://rosinelan.github.io/tags/machinekey/"/>
    
      <category term="视图状态" scheme="https://rosinelan.github.io/tags/%E8%A7%86%E5%9B%BE%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型(二)</title>
    <link href="https://rosinelan.github.io/2018/04/01/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/01/python数据类型-二/</id>
    <published>2018-04-01T12:37:46.000Z</published>
    <updated>2018-04-01T15:21:15.823Z</updated>
    
    <content type="html"><![CDATA[<p>继续python数据类型。  </p><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>dict是dictionary的缩写，其存储数据以<code>key:value</code>方式，类似java中的<code>map</code>，javascripts中的<code>jason</code>。字典可以存储任意对象，也可以是不同的数据类型。<br>字典的创建是每个key-value之间使用<code>:</code>(冒号)分隔，每个<code>key:value</code>对之间使用<code>,</code>(逗号)分隔，整个字典使用<code>{}</code>(大括号)括起来，格式为<code>d = {key1: value1, key2: value2 }</code>。字典中的key不能相同，value可以相同。字典中的key必须是不可变的,数字、字符串、元组都可以作为key，但是列表不可以作为key。<br><a id="more"></a><br>字典定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = dict(name = <span class="string">"xiaohh"</span>, age = <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = dict([(<span class="string">"name"</span>,<span class="string">"xiaohh"</span>),(<span class="string">"age"</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d3)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaohh'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p><p>访问字典中的值，直接将对应的key放入[]即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"name"</span>]</span><br><span class="line"><span class="string">'xiahh'</span></span><br></pre></td></tr></table></figure></p><p>当访问的key不存在时将会报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"address"</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'address'</span></span><br></pre></td></tr></table></figure></p><p>修改字典<br>既可以新增<code>key:value</code>键值对，也可以修改已有的内容。<br>新增键值对<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"address"</span>] = <span class="string">"beijing"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>修改已有内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"age"</span>] = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><p>当对同一值进行多次修改时，前面的值将被覆盖。<br>删除字典<br>可以对字典的键值进行删除，也可以直接删除字典。<br>删除键值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d1[<span class="string">"age"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>删除字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'d1'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>下面介绍字典常用方法  </p><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>返回指定键的值，若值在字典中不存在则返回默认值(默认值为None，可自定义)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"name"</span>))</span><br><span class="line">xiahh</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"address"</span>))    <span class="comment">#不存在则返回默认值None</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"address"</span>,<span class="number">-1</span>))    <span class="comment">#此处-1为自定义的默认值，当不存在时则返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault()"></a>setdefault()</h4><p>若查找的键在字典中则返回对应值，若不存在则插入对应的键及默认值(默认值为None，可自定义)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"name"</span>)</span><br><span class="line"><span class="string">'xiahh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"address"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"num"</span>,<span class="number">168</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="keyword">None</span>, <span class="string">'num'</span>: <span class="number">168</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p>以列表形式返回字典中所有键。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.keys()</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br></pre></td></tr></table></figure></p><h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>以列表形式返回字典中所有值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.values()</span><br><span class="line">dict_values([<span class="string">'xiahh'</span>, <span class="number">18</span>])</span><br></pre></td></tr></table></figure></p><h4 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h4><p>以列表的形式返回可遍历的元组数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.items()</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'xiahh'</span>), (<span class="string">'age'</span>, <span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> d1.items(): print(i,j)</span><br><span class="line">...</span><br><span class="line">name xiahh</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>说明：在<code>python2</code>中存在<code>items()</code>和<code>iteritems()</code>2种方法，<code>items()</code>返回一个字典的拷贝列表，占用额外内存；<code>iteritems()</code>返回字典列表操作后的迭代，不占用额外内存。在<code>python3</code>中使用<code>items()</code>方法替代<code>iteritems()</code>方法，可以采用for进行循环遍历。</p><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><p>将参数中的字典更新至原字典中。无返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.update(&#123;<span class="string">"address"</span>: <span class="string">"beijing"</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除字典中指定键对应的值，返回值为被删除的值。其中键必须给出，若指定的键不存在则返回默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"name"</span>)    <span class="comment">#给出的键存在则返回被删除的值</span></span><br><span class="line"><span class="string">'xiahh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"address"</span>)    <span class="comment">#给出的键不存在且不指定默认值，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'address'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"address"</span>,<span class="number">-1</span>)    <span class="comment">#给出的键不存在，指定默认值，返回默认值</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清空字典。无返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><p>返回字典的一个浅拷贝。使用<code>=</code>进行的直接赋值和<code>copy()</code>进行的浅拷贝不一样，赋值只是对原对象的引用；浅拷贝则是对父对象进行拷贝，对象的子对象则是引用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span>, <span class="string">"num"</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = d1    <span class="comment">#d2是赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = d1.copy()    <span class="comment">#d3是浅拷贝，其中num对应的值为元组，对于字典属于子对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"name"</span>]=<span class="string">"superman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"num"</span>].remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'superman'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d2)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'superman'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d3)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure></p><h4 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h4><p>将两个列表组成字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = (<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = (<span class="string">"xiaohh"</span>,<span class="string">"18"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = dict(zip(list1, list2))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaohh'</span>, <span class="string">'age'</span>: <span class="string">'18'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>对字典进行排序，按照键或值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="string">"18"</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(d1.items(),key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>]))    <span class="comment">#按照值进行排序</span></span><br><span class="line">[(<span class="string">'age'</span>, <span class="string">'18'</span>), (<span class="string">'name'</span>, <span class="string">'xiahh'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(d1.items(),key=<span class="keyword">lambda</span> d: d[<span class="number">0</span>]))     <span class="comment">#按照键进行排序</span></span><br><span class="line">[(<span class="string">'age'</span>, <span class="string">'18'</span>), (<span class="string">'name'</span>, <span class="string">'xiahh'</span>)]</span><br></pre></td></tr></table></figure></p><p>需要注意，排序只能针对同一类型，字符串或者数字，不能用于不同类型值。<br>当字典定义为<code>d1 = {&quot;name&quot;: &quot;xiahh&quot;, &quot;age&quot;: 18 }</code>，只能使用键进行排序，不能使用值进行排序，否则报错。<br><code>TypeError: &#39;&lt;&#39; not supported between instances of &#39;int&#39; and &#39;str&#39;</code></p><h3 id="其他通用方法"><a href="#其他通用方法" class="headerlink" title="其他通用方法"></a>其他通用方法</h3><h4 id="help"><a href="#help" class="headerlink" title="help()"></a>help()</h4><p>用于查看帮助信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(d1)</span><br></pre></td></tr></table></figure></p><p>可以查看到字典的定义及内置方法等信息。<br><img src="http://cdn.rosinelan.com/blog/program/python-help-dict.png" alt="python-help-dict" title="python-help-dict"></p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>int()<br>str()<br>list()<br>tuple()<br>dict()</p><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p>返回对象的长度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str)</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;    <span class="comment">#字典返回键的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(d1)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><p>返回对象类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(str)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; d1 = &#123;"name": "xiahh", "age": 18 &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h4><p>判断一个对象是否是已知的类型。如果是返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(d1,dict)    <span class="comment">#第二个参数可以是一种数据类型</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, (int, str, dict))    <span class="comment">#第二个参数是数据类型组成的元组</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h4 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h4><p>将一个可遍历的数据对象(如列表、元组或字符串)组合成一个索引序列，同时列出数据和数据下标。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = [<span class="string">"春"</span>, <span class="string">"夏"</span>, <span class="string">"秋"</span>, <span class="string">"冬"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(t1))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">'春'</span>), (<span class="number">1</span>, <span class="string">'夏'</span>), (<span class="number">2</span>, <span class="string">'秋'</span>), (<span class="number">3</span>, <span class="string">'冬'</span>)]</span><br></pre></td></tr></table></figure></p><p>常用在<code>for</code>循环中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = [<span class="string">"春"</span>, <span class="string">"夏"</span>, <span class="string">"秋"</span>, <span class="string">"冬"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(t1):</span><br><span class="line"><span class="meta">... </span>    print(index, item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 春</span><br><span class="line"><span class="number">1</span> 夏</span><br><span class="line"><span class="number">2</span> 秋</span><br><span class="line"><span class="number">3</span> 冬</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续python数据类型。  &lt;/p&gt;
&lt;h3 id=&quot;字典-dict&quot;&gt;&lt;a href=&quot;#字典-dict&quot; class=&quot;headerlink&quot; title=&quot;字典 dict&quot;&gt;&lt;/a&gt;字典 dict&lt;/h3&gt;&lt;p&gt;dict是dictionary的缩写，其存储数据以&lt;code&gt;key:value&lt;/code&gt;方式，类似java中的&lt;code&gt;map&lt;/code&gt;，javascripts中的&lt;code&gt;jason&lt;/code&gt;。字典可以存储任意对象，也可以是不同的数据类型。&lt;br&gt;字典的创建是每个key-value之间使用&lt;code&gt;:&lt;/code&gt;(冒号)分隔，每个&lt;code&gt;key:value&lt;/code&gt;对之间使用&lt;code&gt;,&lt;/code&gt;(逗号)分隔，整个字典使用&lt;code&gt;{}&lt;/code&gt;(大括号)括起来，格式为&lt;code&gt;d = {key1: value1, key2: value2 }&lt;/code&gt;。字典中的key不能相同，value可以相同。字典中的key必须是不可变的,数字、字符串、元组都可以作为key，但是列表不可以作为key。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数据类型" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="字典" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="https://rosinelan.github.io/2018/03/30/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://rosinelan.github.io/2018/03/30/python数据类型/</id>
    <published>2018-03-30T13:22:06.000Z</published>
    <updated>2018-04-02T03:08:22.075Z</updated>
    
    <content type="html"><![CDATA[<p>python作为一门编程语言，和其他编程语言类似，都是有自己的语法规则，编译器将按照语法规则编写的程序代码转换为计算机可识别的机器码，然后执行。<br>python的基本语法规则  </p><ol><li>代码逻辑通过缩进区分，一般都是使用4个空格进行缩进。缩进不能Tab键和空格混用，否则报错。   </li><li><code>#</code>号之后的语句都是注释，编译器将会忽略;其它每一行为一个语句；以<code>:</code>结尾的语句，其下面的缩进语句识别为代码块。</li><li>python大小写敏感。  <a id="more"></a><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="数字运算符"><a href="#数字运算符" class="headerlink" title="数字运算符"></a>数字运算符</h3>数字运算符有<code>+</code>(加) <code>-</code>(减) <code>*</code>(乘) <code>/</code>(除) <code>//</code>(地板除) <code>%</code>(取余)，其使用方法和数学中的一致。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><p>除法<code>/</code>的结果是浮点数，不论是否是整除。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span>/<span class="number">6</span></span><br><span class="line"><span class="number">1.8333333333333333</span></span><br></pre></td></tr></table></figure></p><p>地板除<code>//</code>的结果是整数，不论是否可以除尽(只取整数部分，不是四舍五入)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>//<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>//<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span>//<span class="number">6</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>取余<code>%</code>结果是两个整数相除的余数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>%<span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符主要有<code>==</code>(等于) <code>!=</code>(不等于) <code>&gt;</code>大于() <code>&lt;</code>(小于) <code>&gt;=</code>(大于等于) <code>&lt;=</code>(小于等于)，其返回的结果是布尔值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> != <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符主要有<code>=</code> <code>+=</code> <code>-=</code> <code>*=</code>。<br>赋值运算符<code>=</code>需要和前面关系运算符<code>==</code>区分，和数学中的表示方法有区别。<br>要对变量<code>a</code>赋值为1，则使用<code>a = 1</code>。<br><code>a += b</code> 等价于<code>a = a + b</code>;<code>a -= b</code> 等价于<code>a = a - b</code>;<code>a *= b</code> 等价于<code>a = a * b</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a -= <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>注意，python中对变量进行赋值不需要事先声明变量的类型，python会根据变量的值进行动态调整，所以python是动态语言，与之对应的就是静态语言，例如JAVA和C就是静态语言。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a = "111"</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>如上表示，变量a首先赋值为数字1，此时它是整型；再次给变量a赋值为字符串”111”，此时它变为字符串类型。<br>但C语言中当声明一个int类型的变量a时，赋值时只能为整型，若有其它类型将报错。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符有<code>and</code>(与)、<code>or</code>(或)、<code>not</code>(非)3种，它们用于布尔运算。<br><code>and</code>表示只有都为True，运算结果才是True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p><code>or</code>表示只要有一个为True，运算结果就是True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p><code>not</code>表示只有取反，True运算结果为False，False运算结果为True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型-int"><a href="#整型-int" class="headerlink" title="整型 int"></a>整型 int</h3><p>整数类型和数学上表示的一样，包括正整数、负整数和零等。<br>例如<code>0</code>,<code>200</code>,<code>-200</code>等都属于整型。</p><h3 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型 float"></a>浮点型 float</h3><p>浮点数类型就是数学中的小数。<br>例如<code>2.11</code>,<code>-2.11</code>,<code>3.1415926</code>等都属于小数。  </p><h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型 bool"></a>布尔型 bool</h3><p>布尔类型的值和布尔代数的一样有2种，分别是<code>Ture</code>,<code>False</code>。<br>布尔值可以通过布尔代数运算得到，也可以使用<code>True</code>和<code>False</code>表示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt; <span class="number">5</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>另外需要注意区分大小写，否则在python中将报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'true'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>false</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'false'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串 str"></a>字符串 str</h3><p>在python中字符串可以使用<code>&#39;</code>或<code>&quot;</code>或<code>&#39;&#39;&#39;</code>括起来表示，但是推荐使用<code>&quot;</code>表示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'zifuchuan'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; c = "zifuchuan"</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(c)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; d = '''zifuchuan'''</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>字符串中可能会包含很多的字符，此时如何处理呢？<br>当字符串中包含<code>&#39;</code>时，使用<code>&quot;</code>表示即可。<br>当字符串中包含特殊字符时，可以使用转义字符<code>\</code>处理，转义字符本身可以使用<code>\\</code>表示，其它的特殊字符有<code>\n</code>(换行符)、<code>\t</code>(制表符)等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"I'm a superman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m a superman</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m a \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m a "superman"</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m \\a \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m \a "superman"</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m \na \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m</span></span><br><span class="line"><span class="string">a "superman"</span></span><br></pre></td></tr></table></figure></p><p>前面有提到可以使用<code>&#39;&#39;&#39;</code>表示字符串，这样有啥好处呢？<br>当字符串有多行时，使用<code>\n</code>换行符表示会比较麻烦，此时可以使用<code>&#39;&#39;&#39;</code>表示多行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''I'm</span></span><br><span class="line"><span class="string"><span class="meta">... </span>a</span></span><br><span class="line"><span class="string"><span class="meta">... </span>superman</span></span><br><span class="line"><span class="string"><span class="meta">... </span>!'''</span>)</span><br><span class="line">I<span class="string">'m</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">superman</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的<code>...</code>和<code>&gt;&gt;&gt;</code>一样属于提示符，表示此时是接着上一行继续进行输入。<br>赋值字符串不仅仅是为了赋值，更多的为了对赋值的内容进行处理，在python中内置了很多的字符串处理函数，要了解具体有哪些可以通过在pycharm中定义一个字符串，然后通过<code>str.</code>方式查看。<br><img src="http://cdn.rosinelan.com/blog/program/str-do-with.png" alt="str-do-with" title="str-do-with"><br>介绍几个常用字符串方法  </p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>检查字符串中是否包含子字符串，如果包含返回索引值(该子字符串在字符串中的起始位置)，如果不包含返回-1。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"qwertq"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'q'</span>))    <span class="comment">#从下标0开始查找第一个出现的子字符串，返回结果0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'a'</span>))    <span class="comment">#查找不到返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'q'</span>,<span class="number">1</span>))    <span class="comment">#从下标1开始查找第一个出现的子字符串，返回结果5</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>把字符串中的旧字符串替换成新字符串，返回生成的新字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"qwertq"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.replace(<span class="string">'q'</span>,<span class="string">'8'</span>))</span><br><span class="line"><span class="number">8</span>wert8</span><br></pre></td></tr></table></figure></p><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>通过指定分隔符对字符串进行分割，返回分割后的字符串列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman !"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split( ))</span><br><span class="line">[<span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split(<span class="string">'a'</span>))</span><br><span class="line">[<span class="string">"I'm "</span>, <span class="string">' superm'</span>, <span class="string">'n !'</span>]</span><br></pre></td></tr></table></figure></p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将序列中的元素以指定的字符连接生成一个新的字符串，返回新生成的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"Iamasuperman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"-"</span>.join(str))</span><br><span class="line">I-a-m-a-s-u-p-e-r-m-a-n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = (<span class="string">"n"</span>,<span class="string">"a"</span>,<span class="string">"m"</span>,<span class="string">"e"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"-"</span>.join(str1))</span><br><span class="line">n-a-m-e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">""</span>.join(str1))</span><br><span class="line">name</span><br></pre></td></tr></table></figure></p><h4 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h4><p>移除字符串头尾的字符(默认为空格)，返回移除之后的新字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"   I'm a superman!  "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.strip())</span><br><span class="line">I<span class="string">'m a superman!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; str1 = "####I'</span>m a superman!<span class="comment">#####"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1.strip(<span class="string">"#"</span>))</span><br><span class="line">I<span class="string">'m a superman!</span></span><br></pre></td></tr></table></figure></p><h4 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h4><p>字符串格式化方法，使用传入的参数依次替换字符串中的{0}、{1}、{2}、{3}……、{n}。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"这是一只&#123;0&#125;,&#123;1&#125;个月大，重&#123;2&#125;千克."</span>.format(<span class="string">"猫"</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">'这是一只猫,5个月大，重2千克.'</span></span><br></pre></td></tr></table></figure></p><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith()"></a>startswith()</h4><p>检查字符串是否以指定的子字符串开头，如果是则返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.startswith(<span class="string">"I'm"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.startswith(<span class="string">"you're"</span>))</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith()"></a>endswith()</h4><p>检查字符串是否以指定的子字符串结尾，如果是则返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"!"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"man!"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"man"</span>))</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>列表是一种有序的集合；可以把字符串、数字、字典等任何东西添加到序列，其中的元素无任何关系；列表中可以随时添加和删除元素；列表自带索引，默认从0开始。<br>列表的创建是将用<code>,</code>(逗号)分隔的不同项使用<code>[]</code>(方括号)括起来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>,<span class="string">"a"</span>,<span class="string">"superman"</span>,<span class="string">"!"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = [<span class="string">"I'm"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">"wu"</span>]</span><br></pre></td></tr></table></figure></p><p>要访问列表中的元素，使用索引即可(索引从0开始)。  当索引超出范围时会报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">4</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></p><p>访问列表中的最后一个元素可以使用<code>-1</code>，倒数第二个则是<code>-2</code>，以此类推。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-1</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-2</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-5</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>下面介绍列表的常用方法  </p><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>列表中查找指定值第一个匹配的索引位置，若找到则返回查找对象的索引，否则抛出异常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.index(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.index(<span class="number">6</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="number">6</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure></p><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><p>添加元素至列表末尾。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除列表中指定位置的元素，默认为末尾。返回删除的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]    <span class="comment">#默认删除末尾元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.pop(<span class="number">1</span>)    <span class="comment">#删除指定位置的元素，该位置为索引位置</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>将指定的对象插入至列表指定的位置。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.insert(<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.insert(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>移除列表中指定值的第一个匹配项。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.remove(<span class="number">3</span>)    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.remove(<span class="string">"a"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">"I'm"</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br></pre></td></tr></table></figure></p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>反向列表中的序列。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>对列表进行排序。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>,<span class="string">"a"</span>,<span class="string">"superman"</span>,<span class="string">"!"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">'!'</span>, <span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p>元组和列表类似，也是一种有序序列的集合，但是元组一旦初始化之后就不能修改。<br>元组的创建是将用<code>,</code>(逗号)分隔的不同项使用<code>()</code>(小括号)括起来。 元组创建的时候元素必须且已经定下来了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">t</span></span></span><br><span class="line"><span class="class"><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>只含有1个元素的元组，创建的是时候需要加上<code>,</code>(逗号)，否则创建的将不是元组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=(<span class="number">1</span>)    <span class="comment">#该情况下，`()`按照小括号计算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; t=("1")    #该情况下，`()`按照小括号计算</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; t=(1,)    #该情况下，`()`表示元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>元组中元素的访问可以按照元素下标访问，也可以按照列表中的<code>-1</code>等访问元组中倒数的元素。<br>下面介绍列表中可用的方法</p><h4 id="index-1"><a href="#index-1" class="headerlink" title="index()"></a>index()</h4><p>查找指定元素在元组中的位置，返回指定元素的索引位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.index(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.index(<span class="number">5</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>统计元组中指定元素出现的个数。返回元素出现个数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="string">'3'</span>)    <span class="comment">#元组中为整型，此处为字符串类型</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="string">'4'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="number">4</span>)    <span class="comment">#元组中整数4出现的次数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python作为一门编程语言，和其他编程语言类似，都是有自己的语法规则，编译器将按照语法规则编写的程序代码转换为计算机可识别的机器码，然后执行。&lt;br&gt;python的基本语法规则  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码逻辑通过缩进区分，一般都是使用4个空格进行缩进。缩进不能Tab键和空格混用，否则报错。   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;号之后的语句都是注释，编译器将会忽略;其它每一行为一个语句；以&lt;code&gt;:&lt;/code&gt;结尾的语句，其下面的缩进语句识别为代码块。&lt;/li&gt;
&lt;li&gt;python大小写敏感。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数据类型" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="字符串" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="元组" scheme="https://rosinelan.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>python开发环境搭建</title>
    <link href="https://rosinelan.github.io/2018/03/28/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://rosinelan.github.io/2018/03/28/python开发环境搭建/</id>
    <published>2018-03-28T01:08:31.000Z</published>
    <updated>2018-04-02T03:01:21.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a>python介绍</h2><p>python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。<br>python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。<br>除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。<br>根据<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a>2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。<br><a id="more"></a>   </p><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>当前python主要使用版本有2种，分别是python2和python3，且python2.7在将来的2020年之后将失去后续支持。<br>包括centos7版本系统默认安装的python依然是2.7版本，且大多数公司依然在使用python2。<br>学习以python3为主，使用最新的语法和类库，同时掌握python2和python3的主要区别，保证代码在2个版本的兼容性。   </p><h3 id="python2和3的区别"><a href="#python2和3的区别" class="headerlink" title="python2和3的区别"></a>python2和3的区别</h3><p>下面是两个版本的简单区别，此处只做简单了解，更多的区别在后续的学习过程中了解和熟悉。   </p><h4 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h4><p>python2中print是语句，python3中print变成了函数，在python3中调用print需要加上括号，否则会报SyntaxError。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print &quot;hello world&quot;</span><br><span class="line">hello world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello world&quot;)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;hello world&quot;)</span><br><span class="line">hello world</span><br><span class="line">&gt;&gt;&gt; print &quot;hello world&quot;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    print &quot;hello world&quot;</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: Missing parentheses in call to &apos;print&apos;.</span><br></pre></td></tr></table></figure></p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>python2中iput()只接受变量作为传入值，非变量内容会报错，所以在python2中使用raw_input()键入内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;python&apos; is not defined</span><br><span class="line">&gt;&gt;&gt; name=&quot;python-1&quot;</span><br><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:name</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br><span class="line">&gt;&gt;&gt; user=raw_input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br></pre></td></tr></table></figure></p><p>python3中input()取代了python2中的raw_input()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br></pre></td></tr></table></figure></p><h4 id="整数相除"><a href="#整数相除" class="headerlink" title="整数相除"></a>整数相除</h4><p>python2中，3/2的结果是整数，在python3中结果是浮点数。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3/2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 3/2.0</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3/2</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3/2.0</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure></p><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><p>python2有2种字符串类型:str和unicode。python3中的字符串默认就是unicode，python3中的str相当于python2中的unicode。<br>在python2中，如果代码包括非英文字符，需要在代码的最开始声明编码。<br><code># -*- coding: utf-8 -*-</code><br>在python3中，默认的字符串就是unicode，不包含编码声明也可以正常运行。   </p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>python2中捕获异常一般使用下面的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    1/0</span><br><span class="line">except ZeroDivisionError, e:</span><br><span class="line">    print str(e)</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    1/0</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print str(e)</span><br></pre></td></tr></table></figure></p><p>python3中不再支持前一种语法，必须使用as关键字。</p><h4 id="xrange"><a href="#xrange" class="headerlink" title="xrange"></a>xrange</h4><p>python2中有range和xrange两个方法。区别在于range返回一个list，在被调用的时候返回整个序列；xrange返回一个iterator，在每次循环中生成序列的下一个数字。<br>python3中不再支持xrange方法，range方法相当于python2中的xrange方法。   </p><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><p>在python2中map函数返回list。python3中map函数返回iterator。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x+1,range(5))</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x+1,range(5))</span><br><span class="line">&lt;map object at 0x00000209ECAF3198&gt;</span><br><span class="line">&gt;&gt;&gt; list(map(lambda x: x+1,range(5)))</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p><h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><p>以最新的python3.6为基础进行安装。   </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>linux系统下载源码编译安装，windows系统下载可执行文件运行安装。<br><a href="https://www.python.org" target="_blank" rel="noopener">点击</a>进入python官方网站<br>选择Downloads –&gt; All releases<br><img src="http://cdn.rosinelan.com/blog/program/python-dowload.png" alt="python-Download" title="python-Download"><br>点击<code>Download Python 3.64</code><br><img src="http://cdn.rosinelan.com/blog/program/python-v364.png" alt="python-v364" title="python-v364"><br>在新的Python 3.6.4页面下拉至Files部分<br><img src="http://cdn.rosinelan.com/blog/program/python-install.png" alt="python-install" title="python-install"><br>其中linux系统使用 <code>Gzipped source tarball</code>,<a href="https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz" target="_blank" rel="noopener">点击下载</a></p><p>64位windows使用 <code>Windows x86-64 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe" target="_blank" rel="noopener">点击下载</a></p><p>32位windwos使用 <code>Windows x86 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="在linux上安装python"><a href="#在linux上安装python" class="headerlink" title="在linux上安装python"></a>在linux上安装python</h3><p>centos系统默认会安装python2.7,现在安装最新版本python3.6。<br>centos下使用源码编译安装，步骤如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Python-3.6.4.tgz   </span><br><span class="line">cd Python-3.6.4   </span><br><span class="line">./configure --prefix=/usr/local/python364   </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>此时发现/usr/bin/python依然是原来的老版本,需要修改/usr/bin/python对应的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python_27</span><br><span class="line">ln -s /usr/local/python364/bin/python /usr/bin/python</span><br></pre></td></tr></table></figure></p><p>此时通过<code>python -v</code>命令可以看到版本为v3.6.4.<br>注意：采用此方法安装后会发现yum不可用，原因是yum使用依赖老版本python，此时需要修改<code>/usr/bin/yum</code>第一行为<code>#!/usr/bin/python_27</code>就可以了。</p><h3 id="在windows上安装python"><a href="#在windows上安装python" class="headerlink" title="在windows上安装python"></a>在windows上安装python</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击<code>python-3.6.4-amd64.exe</code>开始安装<br><img src="http://cdn.rosinelan.com/blog/program/python-win-install.png" alt="python-win-install" title="python-win-install"><br>注意要勾选<code>Add Python 3.6 tp PATH</code>,然后点<code>Install Now</code>即可完成安装。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过<code>win+R</code>打开运行，输入<code>cmd</code>，在弹出的windows命令提示符输入<code>python</code>。<br>若提示信息如下，说明python安装正确。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-test.png" alt="python-win-test" title="python-win-test"><br>若得到如下错误信息，说明安装的时候未勾选<code>Add Python 3.6 tp PATH</code><br><img src="http://cdn.rosinelan.com/blog/program/python-win-wrong.png" alt="python-win-wrong" title="python-win-wrong"><br>此时需要修改环境变量使计算机能找到python所在位置。<br>通过<code>我的电脑--&gt;右键--&gt;属性--&gt;高级系统设置--&gt;环境变量</code>，在弹出的对话框中找到用户变量/系统变量中的<code>Path</code>变量，根据python安装位置添加路径。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-path.png" alt="python-win-path" title="python-win-path"><br><img src="http://cdn.rosinelan.com/blog/program/python-win-add.png" alt="python-win-add" title="python-win-add"><br>win10系统默认安装路径如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\Scripts\   </span><br><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\</span><br></pre></td></tr></table></figure></p><p>此处建议添加到系统变量中的Path变量中，系统变量是全局变量，无论什么用户登录均可生效；用户变量只针对当前用户生效，若更换其他用户登录则不会生效。<br>若认为添加环境变量操作太复杂，建议直接重装python，记得勾选<code>Add Python 3.6 tp PATH</code>。    </p><h2 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h2><h3 id="python开发工具介绍"><a href="#python开发工具介绍" class="headerlink" title="python开发工具介绍"></a>python开发工具介绍</h3><p>安装好python环境之后，简单的使用直接使用文本编辑器即可，比较常用的有Sublime Text、Notepad++等。<br>大型项目建议使用比较专业的集成开发环境，有利于提高效率，推荐PyCharm。<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击访问官方地址</a><br>PyCharm是Python IDE for Professional Developers。高大上的开发工具，工欲善其事必先利其器嘛。专业版为收费工具，请支持正版。<br>windows版本pycharm v2017.3.4<br><a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="PyCharm使用"><a href="#PyCharm使用" class="headerlink" title="PyCharm使用"></a>PyCharm使用</h3><h4 id="设置python版本"><a href="#设置python版本" class="headerlink" title="设置python版本"></a>设置python版本</h4><p>通过File–&gt;Setting–&gt;Project:XXXX–&gt;Project Interpreter下拉框选择相应版本的python。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-version.png" alt="pycharm-set-version" title="pycharm-set-version"><br>注意：当前选择的python版本用于当前Project，这样对于同时维护或开发不同版本的python非常便捷。   </p><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>通过File–&gt;Setting–&gt;Editor–&gt;Font设置合适的字体、大小、行距。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-font.png" alt="pycharm-set-font" title="pycharm-set-font">   </p><h4 id="设置文件模板"><a href="#设置文件模板" class="headerlink" title="设置文件模板"></a>设置文件模板</h4><p>通过File–&gt;setting–&gt;Editor–&gt;Code Style–&gt;File and Code Templates–&gt;Python Script添加文件模板。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-template.png" alt="pycahrm-set-template" title="pycharm-set-template"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"># @Author  : xiaohuihui</span><br><span class="line"># @File    : $&#123;NAME&#125;.py</span><br></pre></td></tr></table></figure></p><p>其中Time为创建时间，Author为作者，File为文件名。   </p><h4 id="pycharm运行"><a href="#pycharm运行" class="headerlink" title="pycharm运行"></a>pycharm运行</h4><p>通过File–&gt;New Project创建新的项目。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-python.png" alt="pycharm-new-python" title="pycharm-new-python"><br>通过项目–&gt;右键–&gt;New Python File创建第一个python文件。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-File.png" alt="pycharm-new-file" title="pycharm-new-file"><br>python文件的运行有3种方式<br>在python文件中右键–&gt;Run ‘input’，或者使用快捷键Ctrl+Shift+F10。<br>点击左下角的绿色<code>运行</code>按钮。<br>点击右上角的绿色<code>运行</code>按钮。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-run-python.png" alt="pycharm-run-python" title="pycharm-run-python"><br>注意：左下角和右上角的<code>运行</code>按钮默认执行的为上次执行过的python文件，也就是当切换到另一个python文件时，直接点击<code>运行</code>按钮，其执行文件不是当前文件。建议使用快捷键或者右键执行的方式。<br>windows下命令行运行python文件<br>在不打开pycharm时可以运行python文件嘛？<br>只要windows安装好python环境，答案自然是肯定的。<br>在命令行中使用<code>python D:\pythondev\calculate\print.py</code>方式运行即可。<br><img src="http://cdn.rosinelan.com/blog/program/python-run-cmd.png" alt="python-run-cmd" title="python-run-cmd">   </p><h4 id="pycharm参数传递"><a href="#pycharm参数传递" class="headerlink" title="pycharm参数传递"></a>pycharm参数传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys   </span><br><span class="line">print(&quot;File name:&#123;0&#125;&quot;.format(sys.argv[0]))  </span><br><span class="line">print(&quot;First argv:&#123;0&#125;&quot;.format(sys.argv[1]))  </span><br><span class="line">print(&quot;Second argv:&#123;0&#125;&quot;.format(sys.argv[2]))</span><br></pre></td></tr></table></figure><p>上述文件位于D:\pythondev\calculate，文件名称为print.py。<br>在命令行中参数传递方式<code>python print.py xiaohh 1000</code>。<br><img src="http://cdn.rosinelan.com/blog/program/python-argv-cmd.png" alt="python-argv-cmd" title="python-argv-cmd"><br>在pycharm中如何传递参数呢？<br>直接右键执行结果如下<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-wrong.png" alt="pycharm-argv-wrong" title="pycharm-argv-wrong"><br>需要传递参数的情况下，点击右上角<code>运行</code>左边下拉框，选择<code>Edit Configurations</code>，弹出的对话框中选择对应python文件–&gt;Configuration–&gt;Parameters，输入参数，空格区分。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-right.png" alt="pycharm-argv-right" title="pycharm-argv-right">    </p><h4 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h4><p><code>Ctrl + c</code> 复制<br><code>Ctrl + x</code> 剪切<br><code>Ctrl + d</code> 复制当前行<br><code>Ctrl + /</code> 注释当前行<br><code>Ctrl + r</code> 替换<br><code>Shift + Enter</code> 换行<br><code>Alt + Enter</code> 导入包(当写出包名时，按快捷键可自动添加<code>import</code>)<br><code>Ctrl + Shift + f</code> 查找(中文输入法冲突，需关闭才能生效)<br><code>Ctrl + Shift + n</code> 查找文件<br><code>Alt + 鼠标左键</code> 块编辑<br><code>光标批量选中 + Tab</code> 整体向右移动<br><code>光标批量选中 + Shift + Tab</code> 整体向左移动<br><code>Ctrl + a,Ctrl + Alt + L</code> 格式化(和QQ锁定快捷键一致，需修改QQ锁定快捷键)<br><code>Ctrl + Alt + 方向键</code> 查找引用和依赖包时，向右方向键为前进至下一个依赖包处，向左方向键为返回上一个依赖包处(此快捷键和Intel核心显卡快捷键冲突，建议禁用intel核心显卡快捷键)   </p><h4 id="pycharm调试"><a href="#pycharm调试" class="headerlink" title="pycharm调试"></a>pycharm调试</h4><p>设置断点<br>在行号和代码中间位置点击鼠标左键即可添加断点。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-dot.png" alt="pycahrm-debug-dot" title="pycharm-debug-dot"><br>调试模式<br>点击右上角的蜘蛛图标进行调试(Debug)模式<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-start.png" alt="pycharm-debug-start" title="pycharm-debug-start"><br><code>F7</code> Step into 跳入代码<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F7.gif" alt="pycharm-debug-F7" title="pycharm-debug-F7"><br><code>F8</code> Step Over 继续下一步<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F8.gif" alt="pycharm-debug-F8" title="pycharm-debug-F8"><br><code>F9</code> Resume Program 执行到下一个断点或恢复程序<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F9.gif" alt="pycharm-debug-F9" title="pycharm-debug-F9"><br>断点是调试时快速查找代码错误最有用的方法，需要熟悉并了解不同快捷键的作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;python介绍&lt;/h2&gt;&lt;p&gt;python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。&lt;br&gt;python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。&lt;br&gt;除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。&lt;br&gt;根据&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TIOBE&lt;/a&gt;2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="pycharm" scheme="https://rosinelan.github.io/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>HBA卡WWN号查看方法</title>
    <link href="https://rosinelan.github.io/2018/03/27/HBA%E5%8D%A1WWN%E5%8F%B7%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/03/27/HBA卡WWN号查看方法/</id>
    <published>2018-03-27T03:07:43.000Z</published>
    <updated>2018-03-27T03:37:12.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HP-UNIX系统"><a href="#HP-UNIX系统" class="headerlink" title="HP-UNIX系统"></a>HP-UNIX系统</h2><h3 id="查询HBA卡名称"><a href="#查询HBA卡名称" class="headerlink" title="查询HBA卡名称"></a>查询HBA卡名称</h3><p><code>ioscan -fnC fc</code><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-name.png" alt="hp-fc-name" title="hp-fc-name"><br><a id="more"></a><br>根据查询结果，该机器有2块HBA卡，设备名称分别为/dev/td1,/dev/td2。</p><h3 id="根据HBA卡名称查询WWW号"><a href="#根据HBA卡名称查询WWW号" class="headerlink" title="根据HBA卡名称查询WWW号"></a>根据HBA卡名称查询WWW号</h3><p><code>fcmsutil /dev/XX</code><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-www1.png" alt="hp-fc-www1" title="hp-fc-www1"><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-www2.png" alt="hp-fc-www2" title="hp-fc-www2"><br>上图分别为/dev/td1和/dev/td2设备的WWN号，注意：WWN号为标红的“N_Port Port World Wide Name”。   </p><h2 id="LINUX-系统"><a href="#LINUX-系统" class="headerlink" title="LINUX 系统"></a>LINUX 系统</h2><p>下面是针对centos的查询方法。<br><code>cat /sys/class/fc_host/host1/port_name</code><br>其中host1为HBA卡的端口号，若1台机器有多张HBA卡，需要修改对应的端口号查看<br><code>cat /sys/class/fc_host/host[1-4]/port_name</code></p><h2 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h2><p>windows下HBA卡WWW号查询介绍2种，分别为fcinfo和脚本。<br>fcinfo查询方式适用于windows server 2003及以上版本；脚本查询仅适用于windwos server 2008及以上版本。   </p><h3 id="fcinfo查询"><a href="#fcinfo查询" class="headerlink" title="fcinfo查询"></a>fcinfo查询</h3><h4 id="下载fcinfo工具"><a href="#下载fcinfo工具" class="headerlink" title="下载fcinfo工具"></a>下载fcinfo工具</h4><p>根据操作系统版本选择对应版本的工具下载并安装。<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=17530" target="_blank" rel="noopener">fcinfo下载</a></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>进入命令行，然后切换至c:\windows\syswow64，输入<code>fcinfo</code>查询。<br><img src="http://cdn.rosinelan.com/blog/system/windows-fcinfo.png" alt="windows-fcinfo" title="windows-fcinfo"></p><h3 id="脚本查询"><a href="#脚本查询" class="headerlink" title="脚本查询"></a>脚本查询</h3><h4 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h4><p>微软TechNet脚本中心提供一个powershell查询脚本，<a href="https://gallery.technet.microsoft.com/scriptcenter/Find-HBA-and-WWPN-53121140" target="_blank" rel="noopener">点击下载</a>。<br>下载之后复制脚本至c:\windows\temp(可自己决定目录)。<br>注意：之后所有操作均在windows powershell中执行。   </p><h4 id="修改powershell设置"><a href="#修改powershell设置" class="headerlink" title="修改powershell设置"></a>修改powershell设置</h4><p>windowpowershell默认执行策略(ExecutionPolicy)为Restricted，为顺利执行脚本，此处修改为RemoteSigned，否则执行脚本会出现“无法加载文件XXXX，因为在此系统中禁止执行脚本”的报错。<br>获取当前默认执行策略<br><code>get-ExecutionPolicy</code><br>设置执行策略为RemoteSigned<br><code>set-ExecutionPolicy RemoteSigned</code>   </p><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><p>切换至脚本所在目录，然后执行命令    </p><pre><code>Import-Module .\Get-HBAWin.ps1Get-HBAWin -ComputerName 192.168.10.6</code></pre><p><img src="http://cdn.rosinelan.com/blog/system/windows-www.png" alt="windows-fc-www" title="windows-fc-www"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HP-UNIX系统&quot;&gt;&lt;a href=&quot;#HP-UNIX系统&quot; class=&quot;headerlink&quot; title=&quot;HP-UNIX系统&quot;&gt;&lt;/a&gt;HP-UNIX系统&lt;/h2&gt;&lt;h3 id=&quot;查询HBA卡名称&quot;&gt;&lt;a href=&quot;#查询HBA卡名称&quot; class=&quot;headerlink&quot; title=&quot;查询HBA卡名称&quot;&gt;&lt;/a&gt;查询HBA卡名称&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ioscan -fnC fc&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://cdn.rosinelan.com/blog/system/hp-fc-name.png&quot; alt=&quot;hp-fc-name&quot; title=&quot;hp-fc-name&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="HBA" scheme="https://rosinelan.github.io/tags/HBA/"/>
    
      <category term="WWW" scheme="https://rosinelan.github.io/tags/WWW/"/>
    
      <category term="HP-UNIX" scheme="https://rosinelan.github.io/tags/HP-UNIX/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/tags/WINDOWS/"/>
    
  </entry>
  
  <entry>
    <title>POWERPATH设备名称修改</title>
    <link href="https://rosinelan.github.io/2018/03/27/POWERPATH%E8%AE%BE%E5%A4%87%E5%90%8D%E7%A7%B0%E4%BF%AE%E6%94%B9/"/>
    <id>https://rosinelan.github.io/2018/03/27/POWERPATH设备名称修改/</id>
    <published>2018-03-27T01:48:39.000Z</published>
    <updated>2018-03-27T02:41:51.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>oracle rac集群搭建，存储使用EMC VMAX，数据库服务器为IBM X3850 X6。存储和服务器之间为4条路径，存储共划分13个LUN，需在数据库服务器安装powerpath实现多路径的聚合。<br>备注：centos自带多路径软件multipath也可实现相同功能。   </p><h3 id="安装powerpath"><a href="#安装powerpath" class="headerlink" title="安装powerpath"></a>安装powerpath</h3><p>根据操作系统版本选择合适的powerpath版本上传至服务器；<br>安装<br><a id="more"></a><br><code>rpm -ivh EMCPower.LINUX-XXX.rpm</code><br>输入license激活<br><code>emcpreg -install XXXX</code>   </p><h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><p><code>reboot</code>   </p><h3 id="查看磁盘"><a href="#查看磁盘" class="headerlink" title="查看磁盘"></a>查看磁盘</h3><p><code>fdisk -l</code><br>可以看到原有磁盘之外，出现类似 Dsik /dev/emcpowerd命名的磁盘，此为聚合之后的磁盘。<br>查看LUN和设备名的对应关系<br><code>powermt display dev=all</code><br><img src="http://cdn.rosinelan.com/blog/system/powermt-lun.png" alt="powermt-lun" title="powermt-lun"><br>设备名emcpowera对应的lun编号为Logical device ID=0341<br>查询之后发现13个LUN同时共享给4台服务器，同一个LUN在不同服务器的设备名称不一样，和安装oracle rac集群要求不一致，需更改。   </p><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><ul><li>统计各服务器设备名和对应的LUN ID，以其中一台服务器为基准，修改其余服务器的设备名。<br>命令示例如下<br><code>emcpadm renamepseudo -s /dev/emcpowerb -t /dev/emcpowerz</code>   </li><li>以其中一台服务器为基准，导出设备名和LUN ID对应关系，然后将该文件分发至其余服务器，导入设备名和LUN ID关系文件并保存。<br>导出命令<br><code>emcpadm export_mappings -f /u01/emcpower.lun</code><br>导入命令<br><code>emcpadm import_mappings -v -f /u01/emcpower.lun</code><br>保存命令<br><code>powermt save</code>   <h3 id="修改实例"><a href="#修改实例" class="headerlink" title="修改实例"></a>修改实例</h3>由于服务器LUN划分较多，采用第二种方案进行修改。   </li></ul><ol><li>以第一台服务器为基准，导出对应的文件<br><code>emcpadm export_mappings -f /u01/emcpower.lun</code>  </li><li>将该文件复制至其它服务器<br><code>scp /u01/emcpower.lun root@192.168.1.6://u01/emcpower.lun</code>   </li><li>登录其它服务器，导入对应文件<br><code>emcpadm import_mappings -v -f /u01/emcpower.lun</code>   </li><li>保存此次更改<br><code>powermt save</code>   </li><li>重启服务器，确认更改是否生效<br><code>reboot</code><br>至此修改完成。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;oracle rac集群搭建，存储使用EMC VMAX，数据库服务器为IBM X3850 X6。存储和服务器之间为4条路径，存储共划分13个LUN，需在数据库服务器安装powerpath实现多路径的聚合。&lt;br&gt;备注：centos自带多路径软件multipath也可实现相同功能。   &lt;/p&gt;
&lt;h3 id=&quot;安装powerpath&quot;&gt;&lt;a href=&quot;#安装powerpath&quot; class=&quot;headerlink&quot; title=&quot;安装powerpath&quot;&gt;&lt;/a&gt;安装powerpath&lt;/h3&gt;&lt;p&gt;根据操作系统版本选择合适的powerpath版本上传至服务器；&lt;br&gt;安装&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="POWERPATH" scheme="https://rosinelan.github.io/tags/POWERPATH/"/>
    
      <category term="EMC" scheme="https://rosinelan.github.io/tags/EMC/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS下的MKLINK和JUNCTION</title>
    <link href="https://rosinelan.github.io/2018/03/23/WINDOWS%E4%B8%8B%E7%9A%84MKLINK%E5%92%8CJUNCTION/"/>
    <id>https://rosinelan.github.io/2018/03/23/WINDOWS下的MKLINK和JUNCTION/</id>
    <published>2018-03-23T01:01:25.000Z</published>
    <updated>2018-03-26T08:52:57.194Z</updated>
    
    <content type="html"><![CDATA[<p>有台windows服务器C盘空间不足，占磁盘空间较大的文件要挪到其他磁盘又会涉及到应用程序的修改等问题，怎么破？<br>LINUX下使用’ln -s’创建软链接是再寻常不过的操作，那么windows下是否也可以进行相应的操作呢？<br>答案是肯定的。<br>可以实现相关功能的工具有2个，分别是mklink和function，均只能用于windwos server 2008+，其中mklink为系统自带，junction需自行下载。<br><a id="more"></a></p><h2 id="mklink"><a href="#mklink" class="headerlink" title="mklink"></a>mklink</h2><h3 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line"></span><br><span class="line">        /D      创建目录符号链接。默认为文件</span><br><span class="line">                符号链接。</span><br><span class="line">        /H      创建硬链接而非符号链接。</span><br><span class="line">        /J      创建目录联接。</span><br><span class="line">        Link    指定新的符号链接名称。</span><br><span class="line">        Target  指定新链接引用的路径</span><br><span class="line">                (相对或绝对)。</span><br></pre></td></tr></table></figure><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>/D是符号链接，/J是目录联接。<br>创建的链接名称都是类似快捷方式的文件夹；都不会占用空间；访问该名称相当于访问指定的目标文件。<br>区别在于符号链接的Target只能使用绝对路径，目录联接的Target可以使用相对路径。<br>/H是硬链接，需要占用空间；删除原文件或新建文件中的一个不会影响文件。<br>针对文件创建符号链接，不添加任何参数。<br>/H创建硬链接只能针对文件，不能对文件夹。<br>/D和/J创建符号链接或目录链接只能针对文件夹，不能对文件。   </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li>为C:\tlab\test\111.txt文件创建符号链接<br><code>mklink C:\tlab\111.txt C:\tlab\test\111.txt</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-file-symlink.png" alt="文件创建符号链接" title="文件创建符号链接">   </li><li>为C:\tlab\test目录创建符号链接<br><code>mklink /d D:\test C:\tlab\test</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-folder-symlink.png" alt="目录创建符号链接" title="目录创建符号链接">   </li><li>为C:\tlab\test目录创建目录链接<br><code>mklink /j D:\test C:\tlab\test</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-folder-j.png" alt="目录创建目录链接" title="目录创建目录链接"></li><li>为D:\Dns\DNSTEST\openFtp.txt文件创建硬链接<br><code>mklink /h D:\Dns\1.txt D:\Dns\DNSTEST\openFtp.txt</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-file-h.png" alt="文件创建硬链接" title="文件创建硬链接"></li><li>相对路径创建<br>命令行切换至C:\talb，该文件夹下有test文件夹，分别利用相对路径进行下面操作<br><code>mklink /d C:\Users\xiaohuihui\test test</code><br>提示为创建成功，当点击创建的符号链接访问时出现错误提示<br><img src="http://cdn.rosinelan.com/blog/system/mklink-relative-d.png" alt="相对路径创建符号链接" title="相对路径创建符号链接"><br><code>mklink /j C:\Users\xiaohuihui\test test</code><br>提示创建成功，当点击创建的目录链接访问时正常<br><img src="http://cdn.rosinelan.com/blog/system/mklink-relative-j.png" alt="相对路径创建目录链接" title="相对路径创建目录链接">   <h2 id="junction"><a href="#junction" class="headerlink" title="junction"></a>junction</h2>Junction用于NTFS文件系统，其作用类似mklink /j参数。<br>junction连接创建只能针对文件夹，不能针对文件   <h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3>下载junction文件后放到C:\WINDOWS目录下，直接在命令行使用。   <h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The first usage is for displaying reparse point information, the</span><br><span class="line">second usage is for creating a junction point, and the last for</span><br><span class="line">deleting a junction point:</span><br><span class="line">usage: junction64 [-s] [-q] &lt;file or directory&gt;</span><br><span class="line">       -q     Don&apos;t print error messages (quiet)</span><br><span class="line">       -s     Recurse subdirectories</span><br><span class="line"></span><br><span class="line">usage: junction64 &lt;junction directory&gt; &lt;junction target&gt;</span><br><span class="line">       example: junction d:\link c:\windows</span><br><span class="line"></span><br><span class="line">usage: junction64 -d &lt;junction directory&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ol><li>创建junction连接，将C:\tlab\test目录连接至D:\test<br><code>junction64 D:\test C:\tlab\test</code></li><li>删除D:\test的junction连接<br><code>junction64 -d D:\test</code><h3 id="下载地址及官方文档"><a href="#下载地址及官方文档" class="headerlink" title="下载地址及官方文档"></a>下载地址及官方文档</h3><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/junction" target="_blank" rel="noopener">Junction v1.07</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有台windows服务器C盘空间不足，占磁盘空间较大的文件要挪到其他磁盘又会涉及到应用程序的修改等问题，怎么破？&lt;br&gt;LINUX下使用’ln -s’创建软链接是再寻常不过的操作，那么windows下是否也可以进行相应的操作呢？&lt;br&gt;答案是肯定的。&lt;br&gt;可以实现相关功能的工具有2个，分别是mklink和function，均只能用于windwos server 2008+，其中mklink为系统自带，junction需自行下载。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/categories/system/WINDOWS/"/>
    
    
      <category term="WINODWS" scheme="https://rosinelan.github.io/tags/WINODWS/"/>
    
      <category term="MKLINK" scheme="https://rosinelan.github.io/tags/MKLINK/"/>
    
      <category term="JUNCTION" scheme="https://rosinelan.github.io/tags/JUNCTION/"/>
    
  </entry>
  
  <entry>
    <title>CENTOS7.2双网卡绑定脚本.md</title>
    <link href="https://rosinelan.github.io/2018/02/24/CENTOS7-2%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E8%84%9A%E6%9C%AC/"/>
    <id>https://rosinelan.github.io/2018/02/24/CENTOS7-2双网卡绑定脚本/</id>
    <published>2018-02-24T07:04:35.000Z</published>
    <updated>2018-02-24T07:22:27.180Z</updated>
    
    <content type="html"><![CDATA[<p>CENTOS 7.2(1511)用于双网卡绑定配置，使用说明<br>1.网卡名称ens1f0和ens1f1根据实际情况修改(全局替换即可)。<br>2.bond0配置IP地址根据实际情况修改。<br>脚本如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/   </span><br><span class="line">mv ifcfg-ens1f0 ifcfg-ens1f0.bak   </span><br><span class="line">mv ifcfg-ens1f1 ifcfg-ens1f1.bak   </span><br><span class="line">#配置ens1f0   </span><br><span class="line">echo &quot;# slave for bond0&quot; &gt;&gt; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=none&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a NAME=ens1f0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a DEVICE=ens1f0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a MASTER=bond0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a SLAVE=yes&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-ens1f0   </span><br><span class="line">#配置ens1f1   </span><br><span class="line">echo &quot;# slave for bond0&quot; &gt;&gt; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=none&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a NAME=ens1f1&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a DEVICE=ens1f1&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a MASTER=bond0&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a SLAVE=yes&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-ens1f1   </span><br><span class="line">#配置bond0   </span><br><span class="line">echo &quot;# bonding for bond0&quot; &gt;&gt; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a DEVICE=bond0&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=static&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a IPADDR=192.168.198.139&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a NETMASK=255.255.255.192&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a GATEWAY=192.168.198.129&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a BONDING_OPTS=&quot;mode=1 miimon=100 primary=ens1f0&quot;&apos; ifcfg-bond0   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /etc/modprobe.d/   </span><br><span class="line">touch dist.conf   </span><br><span class="line">echo &quot;alias bond0 bonding options bond0 miimon=100 mode=1&quot; &gt;&gt; dist.conf   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chkconfig NetworkManager off   </span><br><span class="line">service NetworkManager stop   </span><br><span class="line">systemctl restart network   </span><br><span class="line">#查看当前网络配置   </span><br><span class="line">ip a   </span><br><span class="line">#查看bond0运行状态   </span><br><span class="line">cat /proc/net/bonding/bond0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CENTOS 7.2(1511)用于双网卡绑定配置，使用说明&lt;br&gt;1.网卡名称ens1f0和ens1f1根据实际情况修改(全局替换即可)。&lt;br&gt;2.bond0配置IP地址根据实际情况修改。&lt;br&gt;脚本如下&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="BONDING" scheme="https://rosinelan.github.io/tags/BONDING/"/>
    
      <category term="CENTOS7" scheme="https://rosinelan.github.io/tags/CENTOS7/"/>
    
  </entry>
  
  <entry>
    <title>REDHAT 6.5双网卡绑定步骤</title>
    <link href="https://rosinelan.github.io/2018/02/18/REDHAT-6-5%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E6%AD%A5%E9%AA%A4/"/>
    <id>https://rosinelan.github.io/2018/02/18/REDHAT-6-5双网卡绑定步骤/</id>
    <published>2018-02-18T14:04:46.000Z</published>
    <updated>2018-02-24T07:03:11.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>由于工作需要，搭建4节点oracle rac，为降低网络单点故障影响，数据库服务器生产流量和内部心跳均采用双上连，自然要进行双网卡绑定。绑定采用的是bonding。<br>对具体的操作过程进行记录。</p><h2 id="确认操作系统版本"><a href="#确认操作系统版本" class="headerlink" title="确认操作系统版本"></a>确认操作系统版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">lsb_release -a</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">rpm -q redhat-release</span><br></pre></td></tr></table></figure><h2 id="检查系统配置是否支持bonding"><a href="#检查系统配置是否支持bonding" class="headerlink" title="检查系统配置是否支持bonding"></a>检查系统配置是否支持bonding</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/config-XXXX | grep -i bonding</span><br></pre></td></tr></table></figure><p>只要返回任何匹配记录，说明系统配置支持bonding。     </p><h2 id="备份网卡配置文件"><a href="#备份网卡配置文件" class="headerlink" title="备份网卡配置文件"></a>备份网卡配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">cp ifcfg-eth4 /home/ifcfg-eth4.bak</span><br><span class="line">cp ifcfg-eth5 /home/ifcfg-eth5.bak</span><br></pre></td></tr></table></figure><h2 id="新建ifcfg-bond0文件，配置bond0相关参数"><a href="#新建ifcfg-bond0文件，配置bond0相关参数" class="headerlink" title="新建ifcfg-bond0文件，配置bond0相关参数"></a>新建ifcfg-bond0文件，配置bond0相关参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line">DEVICE=bond0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.6</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">USERCTL=no</span><br><span class="line">BONDING_OPTS=”mode=1 miimon=100 primary=eth4″</span><br></pre></td></tr></table></figure><h3 id="BONDING-OPTS说明"><a href="#BONDING-OPTS说明" class="headerlink" title="BONDING_OPTS说明"></a>BONDING_OPTS说明</h3><p>mode表示网卡工作状态，其中0表示负载均衡，即双网卡同时处于激活状态；<br>1表示主备模式，即根据primary的设置，该网卡为主网卡，另外一个为备份网卡。<br>miimon=100表示系统每100ms监测一次链路状态。   </p><h2 id="修改ifcfg-eth4参数配置"><a href="#修改ifcfg-eth4参数配置" class="headerlink" title="修改ifcfg-eth4参数配置"></a>修改ifcfg-eth4参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth4</span><br><span class="line">DEVICE=eth4</span><br><span class="line">#HWADDR=90:E2:BA:9F:62:54</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">#UUID=bc956186-832b-44a4-927c-8340eeb52eac</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><h2 id="修改ifcfg-eth5参数配置"><a href="#修改ifcfg-eth5参数配置" class="headerlink" title="修改ifcfg-eth5参数配置"></a>修改ifcfg-eth5参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth5</span><br><span class="line">DEVICE=eth4</span><br><span class="line">#HWADDR=90:E2:BA:9F:62:54</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">#UUID=bc956186-832b-44a4-927c-8340eeb52eac</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><h2 id="修改-etc-modprobe-d-dist-conf文件，配置绑定模型"><a href="#修改-etc-modprobe-d-dist-conf文件，配置绑定模型" class="headerlink" title="修改/etc/modprobe.d/dist.conf文件，配置绑定模型"></a>修改/etc/modprobe.d/dist.conf文件，配置绑定模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/modprobe.d/dist.conf</span><br><span class="line">alias bond0 bonding options bond0 miimon=100 mode=1</span><br></pre></td></tr></table></figure><h2 id="关闭NetworkManager服务"><a href="#关闭NetworkManager服务" class="headerlink" title="关闭NetworkManager服务"></a>关闭NetworkManager服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig NetworkManager off</span><br><span class="line">service NetworkManager stop</span><br></pre></td></tr></table></figure><h2 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>查看物理网卡的MAC地址是否与bond0一致(正常情况应该3网卡MAC地址一致)<br><code>ifconfig</code><br>查看bond0运行状态<br><code>cat /proc/net/bonding/bond0</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;由于工作需要，搭建4节点oracle rac，为降低网络单点故障影响，数据库服务器生产流量和内部心跳均采用双上连，自然要进行双网卡绑定。绑定采用的是bonding。&lt;br&gt;对具体的操作过程进行记录。&lt;/p&gt;
&lt;h2 id=&quot;确认操作系统版本&quot;&gt;&lt;a href=&quot;#确认操作系统版本&quot; class=&quot;headerlink&quot; title=&quot;确认操作系统版本&quot;&gt;&lt;/a&gt;确认操作系统版本&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/issue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsb_release -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/redhat-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -q redhat-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;检查系统配置是否支持bonding&quot;&gt;&lt;a href=&quot;#检查系统配置是否支持bonding&quot; class=&quot;headerlink&quot; title=&quot;检查系统配置是否支持bonding&quot;&gt;&lt;/a&gt;检查系统配置是否支持bonding&lt;/h2&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="双网卡" scheme="https://rosinelan.github.io/tags/%E5%8F%8C%E7%BD%91%E5%8D%A1/"/>
    
      <category term="bonding" scheme="https://rosinelan.github.io/tags/bonding/"/>
    
  </entry>
  
  <entry>
    <title>USR/BIN/XTERM:NO SUCH FILE OR DIRECTORY错误解决一例</title>
    <link href="https://rosinelan.github.io/2018/02/18/USR-BIN-XTERM-NO-SUCH-FILE-OR-DIRECTORY%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BE%8B/"/>
    <id>https://rosinelan.github.io/2018/02/18/USR-BIN-XTERM-NO-SUCH-FILE-OR-DIRECTORY错误解决一例/</id>
    <published>2018-02-18T13:52:35.000Z</published>
    <updated>2018-02-18T13:58:46.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>远程SSH连接LINUX服务器，通过图形化界面安装oracle数据库。<br>使用xstart连接redhat v6.5，执行命令选项使用/usr/bin/xterm -ls -display $DISPLAY。</p><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>-bash:usr/bin/xterm: no such file or directory</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><a id="more"></a> <p>在对应的目录查看确实不存在，缺少对应的packages,安装需要的packages<br>libXpm-3.5.10-2.el6.x86_64.rpm<br>libXaw-1.0.11-2.el6.x86_64.rpm<br>xterm-253-1.el6.x86_64.rpm<br>安装之后即可正常连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;远程SSH连接LINUX服务器，通过图形化界面安装oracle数据库。&lt;br&gt;使用xstart连接redhat v6.5，执行命令选项使用/usr/bin/xterm -ls -display $DISPLAY。&lt;/p&gt;
&lt;h3 id=&quot;错误信息&quot;&gt;&lt;a href=&quot;#错误信息&quot; class=&quot;headerlink&quot; title=&quot;错误信息&quot;&gt;&lt;/a&gt;错误信息&lt;/h3&gt;&lt;p&gt;-bash:usr/bin/xterm: no such file or directory&lt;/p&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="XTERM" scheme="https://rosinelan.github.io/tags/XTERM/"/>
    
      <category term="libXpm" scheme="https://rosinelan.github.io/tags/libXpm/"/>
    
      <category term="libXaw" scheme="https://rosinelan.github.io/tags/libXaw/"/>
    
  </entry>
  
  <entry>
    <title>UBUNTU网络配置</title>
    <link href="https://rosinelan.github.io/2018/02/18/UBUNTU%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://rosinelan.github.io/2018/02/18/UBUNTU网络配置/</id>
    <published>2018-02-18T13:35:45.000Z</published>
    <updated>2018-03-23T00:52:43.808Z</updated>
    
    <content type="html"><![CDATA[<p>前两天需要装个Ubuntu，发现网络配置文件和centos不太一样，在此记录。     </p><h2 id="修改配置文件-etc-network-interfaces"><a href="#修改配置文件-etc-network-interfaces" class="headerlink" title="修改配置文件/etc/network/interfaces"></a>修改配置文件/etc/network/interfaces</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.1</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="添加DNS"><a href="#添加DNS" class="headerlink" title="添加DNS"></a>添加DNS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br><span class="line">nameserver 202.99.166.4</span><br></pre></td></tr></table></figure><h2 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>重启网络服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>重启指定网卡，不影响其他网卡正常提供服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ifdown eth0</span><br><span class="line">$ifup eth0</span><br></pre></td></tr></table></figure></p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /home/username/.bash_profile</span><br><span class="line">export http_proxy =</span><br><span class="line">export https_poxy =</span><br><span class="line">export ftp_proxy =</span><br><span class="line">export no_proxy =</span><br></pre></td></tr></table></figure><p>使profile中的新增变量生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天需要装个Ubuntu，发现网络配置文件和centos不太一样，在此记录。     &lt;/p&gt;
&lt;h2 id=&quot;修改配置文件-etc-network-interfaces&quot;&gt;&lt;a href=&quot;#修改配置文件-etc-network-interfaces&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件/etc/network/interfaces&quot;&gt;&lt;/a&gt;修改配置文件/etc/network/interfaces&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/network/interfaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iface eth0 inet static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address 192.168.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netmask 255.255.255.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gateway 192.168.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="UBUNTU" scheme="https://rosinelan.github.io/tags/UBUNTU/"/>
    
      <category term="网络" scheme="https://rosinelan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS下FORFILES命令使用方法</title>
    <link href="https://rosinelan.github.io/2018/02/18/WINDOWS%E4%B8%8BFORFILES%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/02/18/WINDOWS下FORFILES命令使用方法/</id>
    <published>2018-02-18T11:43:12.000Z</published>
    <updated>2018-02-18T13:25:58.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>FORFILES [/P pathname] [/M searchmask] [/S] [/C command] [/D [+ | -] {yyyy/MM/dd | dd}] </p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>选择一个文件(或一组文件)并在那个文件上执行一个命令，有助于批处理作业。    </p><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><a id="more"></a> <pre><code>/P    pathname      表示开始搜索的路径。默认文件夹是当前工作的 目录 (.)。/M    searchmask    根据搜索掩码搜索文件。默认搜索掩码是 &apos;*&apos;。/S                  指导 forfiles 递归到子目录。像 &quot;DIR /S&quot;。/C    command       表示为每个文件执行的命令。命令字符串应该用双引号括起来。    默认命令是 &quot;cmd /c echo @file&quot;。    下列变量可以用在命令字符串中:    @file    – 返回文件名。    @fname   – 返回不带扩展名的文件名。    @ext     – 只返回文件的扩展名。    @path    – 返回文件的完整路径。    @relpath – 返回文件的相对路径。    @isdir   – 如果文件类型是目录，返回 &quot;TRUE&quot;；如果是文件，返回 &quot;FALSE&quot;。    @fsize   – 以字节为单位返回文件大小。    @fdate   – 返回文件上一次修改的日期。    @ftime   – 返回文件上一次修改的时间。    要在命令行包括特殊字符，字符请以 0xHH 形式使用十六进制代码(例如，0x09 为 tab)。 内部 CMD.exe 命令前面应以 &quot;cmd /c&quot; 开始。/D    date          选择文件，其上一次修改日期大于或等于 (+)，或者小于或等于 (-) 用 &quot;yyyy/MM/dd&quot; 格式指定的日期;或选择文件，其上一次修改日期大于或等于 (+)当前日期加 &quot;dd&quot; 天，或者小于或等于 (-) 当前日期减 &quot;dd&quot; 天。有效的 &quot;dd&quot; 天数可以是 0 – 32768 范围内的任何数字。如果没有指定， &quot;+&quot; 被当作默认符号。/?                  显示此帮助消息。    </code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>删除指定目录60天以前文件<br><code>forfiles /p &quot;D:\Dns\DNSTEST\logs&quot; /m * /d -60 /c &quot;cmd /c del @path&quot;</code>   </p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>输出指定目录60天以前文件<br><code>forfiles /p &quot;D:\Dns\DNSTEST\logs&quot; /m * /d -60 /c &quot;cmd /c echo @file&quot;</code></p><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>删除指定目录60天以前文件，并记录删除日志，删除日志格式为”删除时间 删除文件名”<br><code>forfiles /p &quot;D:\Dns\DNSTEST\logs&quot; /m * /d -60 /c &quot;cmd /c echo %date:~0,10% @file &gt;&gt;D:\Dns\DNSTEST\logs\del.txt&quot;</code>   </p><h2 id="应用场景说明"><a href="#应用场景说明" class="headerlink" title="应用场景说明"></a>应用场景说明</h2><p>实例中可用于批处理，对日志或者备份等文件通过批处理结合任务计划进行定期删除，避免硬盘空间被撑爆的情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h2&gt;&lt;p&gt;FORFILES [/P pathname] [/M searchmask] [/S] [/C command] [/D [+ | -] {yyyy/MM/dd | dd}] &lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;选择一个文件(或一组文件)并在那个文件上执行一个命令，有助于批处理作业。    &lt;/p&gt;
&lt;h2 id=&quot;参数列表&quot;&gt;&lt;a href=&quot;#参数列表&quot; class=&quot;headerlink&quot; title=&quot;参数列表&quot;&gt;&lt;/a&gt;参数列表&lt;/h2&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/categories/system/WINDOWS/"/>
    
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/tags/WINDOWS/"/>
    
      <category term="FORFILES" scheme="https://rosinelan.github.io/tags/FORFILES/"/>
    
  </entry>
  
  <entry>
    <title>LINUX下密钥认证免密 SSH 登录服务器</title>
    <link href="https://rosinelan.github.io/2018/02/13/LINUX%E4%B8%8B%E5%AF%86%E9%92%A5%E8%AE%A4%E8%AF%81%E5%85%8D%E5%AF%86SSH%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://rosinelan.github.io/2018/02/13/LINUX下密钥认证免密SSH登录服务器/</id>
    <published>2018-02-13T11:22:03.000Z</published>
    <updated>2018-02-14T02:01:43.246Z</updated>
    
    <content type="html"><![CDATA[<p>windows下使用xshell通过密钥认证方式免密码登录，配置方式参考<a href="https://rosinelan.github.io/2018/02/12/WINDOWS-%E4%B8%8B-XSHELL-%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95-LINUX-%E6%9C%8D%E5%8A%A1%E5%99%A8/">WINDOWS 下 XSHELL 密钥登录 LINUX 服务器</a>。<br>本文是linux服务器之间通过密钥认证方式实现免密码登录。    </p><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p>linux服务器2台，分别为 11.0.1.166(B)/11.0.1.167(C)，要求 C 可以免密码直接使用 ssh username@IP 方式登录到其他2台服务器。    </p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><a id="more"></a><h3 id="在C服务器生成密钥对"><a href="#在C服务器生成密钥对" class="headerlink" title="在C服务器生成密钥对"></a>在C服务器生成密钥对</h3><p><code>ssh-keygen</code><br><img src="http://cdn.rosinelan.com/blog/system/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5%E5%AF%B9-linux.png" alt="生成密钥对" title="生成密钥对">  </p><h3 id="公钥复制至服务器B"><a href="#公钥复制至服务器B" class="headerlink" title="公钥复制至服务器B"></a>公钥复制至服务器B</h3><p>将公钥复制至服务器B的 /root/.ssh/authorized_keys  </p><h4 id="复制方式1"><a href="#复制方式1" class="headerlink" title="复制方式1"></a>复制方式1</h4><p>使用ssh-copy-id方法复制，直接将公钥内容添加至authorized_keys文件<br><code>ssh-copy-id -i /root/.ssh/id_rsa.pub root@11.0.1.166</code><br><img src="http://cdn.rosinelan.com/blog/system/ssh-copy-id.png" alt="ssh-copy-id" title="ssh-copy-id">  </p><h4 id="复制方式2"><a href="#复制方式2" class="headerlink" title="复制方式2"></a>复制方式2</h4><p>scp复制公钥文件至服务器B并重命名为authorized_keys<br><code>scp /root/.ssh/id_rsa.pub root@11.0.1.166://root/.ssh/authorized_keys</code>     </p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>.ssh等不存在的目录可自己创建。    </li><li>确认.ssh文件夹权限为700，若不是，请<code>chmod 700 /home/username/.ssh</code>修改。   </li><li>确认authorized_keys文件权限为600，若不是，请<code>chmod 600 /home/username/.ssh/authorized_keys</code>修改。    </li><li>确认iptables及selinux状态，建议均关闭。  <h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><code>ssh root@11.0.1.166</code><br><img src="http://cdn.rosinelan.com/blog/system/%E6%B5%8B%E8%AF%95ssh.png" alt="测试ssh" title="测试ssh">  <h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2>使用ssh密钥认证方式访问失败，可以通过查看连接过程或日志的方式排查。 </li><li><code>ssh -v root@11.0.1.166</code><br>该方式会打印出连接的详细过程。  </li><li><code>cat /var/log/secure</code><br>在centos 6 中查看该日志文件可以看到连接的错误信息。 <h2 id="多个公钥处理方式"><a href="#多个公钥处理方式" class="headerlink" title="多个公钥处理方式"></a>多个公钥处理方式</h2>有时候会出现同一台服务器同一个用户同时保存多个公钥的情况，此时公钥文件可以都保存在authorized_keys，但是需要添加换行符，格式如下<br><img src="http://cdn.rosinelan.com/blog/system/%E5%A4%9A%E4%B8%AA%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F.png" alt="多个公钥格式" title="多个公钥格式"><br>使用 cat id_rsa.pub &gt; authorized_keys 或者 ssh-copy-id 方式均为直接追加至末尾，不可用。     <h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2></li><li><a href="https://www.ibm.com/developerworks/cn/linux/security/openssh/part1/" target="_blank" rel="noopener">OpenSSH 密钥管理之理解RSA/DSA认证</a>  </li><li><a href="http://www.jinbuguo.com/openssh/ssh-keygen.html" target="_blank" rel="noopener">ssh-keygen 中文手册</a>   </li><li><a href="http://www.361way.com/ssh-public-key/3662.html" target="_blank" rel="noopener">linux配置ssh公钥认证</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows下使用xshell通过密钥认证方式免密码登录，配置方式参考&lt;a href=&quot;https://rosinelan.github.io/2018/02/12/WINDOWS-%E4%B8%8B-XSHELL-%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95-LINUX-%E6%9C%8D%E5%8A%A1%E5%99%A8/&quot;&gt;WINDOWS 下 XSHELL 密钥登录 LINUX 服务器&lt;/a&gt;。&lt;br&gt;本文是linux服务器之间通过密钥认证方式实现免密码登录。    &lt;/p&gt;
&lt;h2 id=&quot;实现目标&quot;&gt;&lt;a href=&quot;#实现目标&quot; class=&quot;headerlink&quot; title=&quot;实现目标&quot;&gt;&lt;/a&gt;实现目标&lt;/h2&gt;&lt;p&gt;linux服务器2台，分别为 11.0.1.166(B)/11.0.1.167(C)，要求 C 可以免密码直接使用 ssh username@IP 方式登录到其他2台服务器。    &lt;/p&gt;
&lt;h2 id=&quot;配置过程&quot;&gt;&lt;a href=&quot;#配置过程&quot; class=&quot;headerlink&quot; title=&quot;配置过程&quot;&gt;&lt;/a&gt;配置过程&lt;/h2&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="SSH" scheme="https://rosinelan.github.io/tags/SSH/"/>
    
      <category term="密钥" scheme="https://rosinelan.github.io/tags/%E5%AF%86%E9%92%A5/"/>
    
      <category term="ssh-copy-id" scheme="https://rosinelan.github.io/tags/ssh-copy-id/"/>
    
      <category term="ssh-keygen" scheme="https://rosinelan.github.io/tags/ssh-keygen/"/>
    
      <category term="多个公钥" scheme="https://rosinelan.github.io/tags/%E5%A4%9A%E4%B8%AA%E5%85%AC%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS 下 XSHELL 密钥登录 LINUX 服务器</title>
    <link href="https://rosinelan.github.io/2018/02/12/WINDOWS%E4%B8%8BXSHELL%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95LINUX%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://rosinelan.github.io/2018/02/12/WINDOWS下XSHELL密钥登录LINUX服务器/</id>
    <published>2018-02-12T12:22:31.000Z</published>
    <updated>2018-02-14T02:01:51.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>客户端:xshell 5<br>服务器:centos 6.7  </p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>利用xshell实现windows远程连接linux服务器免密登录</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><a id="more"></a>   <h3 id="客户端生成密钥对"><a href="#客户端生成密钥对" class="headerlink" title="客户端生成密钥对"></a>客户端生成密钥对</h3><p>选择工具–&gt;新建用户密钥生成向导，然后选择密钥类型和长度<br><img src="http://cdn.rosinelan.com/blog/system/%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E5%90%91%E5%AF%BC.png" alt="向导" title="向导"><br>生成密钥对<br><img src="http://cdn.rosinelan.com//blog/system/%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5%E5%AF%B9.png" alt="生成" title="生成"><br>填写密钥信息，注意：此处设置密码，在使用该密钥时也需要输入密码；留空则不需要输入密码，可直接登录<br><img src="http://cdn.rosinelan.com//blog/system/%E5%AF%86%E9%92%A5%E4%BF%A1%E6%81%AF.png" alt="填写密码" title="填写密码"><br>公钥信息<br><img src="http://cdn.rosinelan.com//blog/system/%E5%85%AC%E9%92%A5%E6%B3%A8%E5%86%8C.png" alt="公钥" title="公钥"><br>点击完成，此时显示xshell已有的私钥<br><img src="http://cdn.rosinelan.com//blog/system/%E7%A7%81%E9%92%A5%E4%BF%A1%E6%81%AF.png" alt="私钥" title="私钥"></p><h3 id="服务器端公钥配置"><a href="#服务器端公钥配置" class="headerlink" title="服务器端公钥配置"></a>服务器端公钥配置</h3><p>上传公钥至linux服务器/root/.ssh目录，重命名为authorized_keys<br>修改件夹.ssh权限为700,修改文件authorized_keys权限为600<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv id_rsa_2048.pub /root/.ssh/authorized_keys   </span><br><span class="line">chmod 700 /root/.ssh    </span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p><p>注意:     </p><ol><li>此处示例用户为root，其他用户对应公钥存放位置在/home/username/.ssh     </li><li>.ssh文件夹为隐藏文件夹，需要使用ls -la查看   </li><li>若用户家目录无.ssh文件夹，自己创建即可<br><img src="http://cdn.rosinelan.com//blog/system/%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE.png" alt="公钥配置" title="公钥配置"><h3 id="xshell配置"><a href="#xshell配置" class="headerlink" title="xshell配置"></a>xshell配置</h3>window客户端使用xshell连接，在用户身份验证中<br>方法:选择Public Key<br>用户名:root(根据实际情况填写)<br>用户密钥:选择公钥对应的用户密钥<br><img src="http://cdn.rosinelan.com//blog/system/xshell%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE.png" alt="客户端配置" title="客户端配置"><br>完成上述步骤即可连接  <h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3>密钥类型选择RSA，密钥长度选择2048，生成的密钥对可正常连接<br>密钥类型选择DSA，密钥长度选择1024，生成的密钥对可正常连接<br>密钥类型选择DSA，密钥长度选择2048，生成的密钥对无法正常连接，提示 SSH 服务器拒绝了用户密钥<br>详细的报错信息如下<br>error: ssh_dss_verify: cannot handle type \220\005\203^l\263\250\375\266W\240\316\230s%\01<br>具体原因可能与openssh版本有关系，在选择密钥类型时注意即可  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;客户端:xshell 5&lt;br&gt;服务器:centos 6.7  &lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;利用xshell实现windows远程连接linux服务器免密登录&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/tags/WINDOWS/"/>
    
      <category term="密钥" scheme="https://rosinelan.github.io/tags/%E5%AF%86%E9%92%A5/"/>
    
      <category term="XSHELL" scheme="https://rosinelan.github.io/tags/XSHELL/"/>
    
  </entry>
  
  <entry>
    <title>您好，Hexo</title>
    <link href="https://rosinelan.github.io/2018/02/11/%E6%82%A8%E5%A5%BD%EF%BC%8CHexo/"/>
    <id>https://rosinelan.github.io/2018/02/11/您好，Hexo/</id>
    <published>2018-02-11T08:16:28.000Z</published>
    <updated>2018-02-11T08:16:28.163Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://rosinelan.github.io/2018/02/11/hello-world/"/>
    <id>https://rosinelan.github.io/2018/02/11/hello-world/</id>
    <published>2018-02-11T07:50:09.707Z</published>
    <updated>2018-02-11T07:50:09.708Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
