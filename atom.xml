<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-12-24T09:51:02.939Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django进阶之ORM单表增删改查</title>
    <link href="https://rosinelan.github.io/2018/12/24/django%E8%BF%9B%E9%98%B6%E4%B9%8BORM%E5%8D%95%E8%A1%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://rosinelan.github.io/2018/12/24/django进阶之ORM单表增删改查/</id>
    <published>2018-12-24T09:01:49.000Z</published>
    <updated>2018-12-24T09:51:02.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认情况下，django 使用 sqlite 作为数据库，相关的配置文件在项目的 <code>settings.py</code>文件 <code>DATABASES</code> 中配置。<br>使用 mysql，配置示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>, </span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'books'</span>,    <span class="comment">#你的数据库名称</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,   <span class="comment">#你的数据库用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>, <span class="comment">#你的数据库密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>, <span class="comment">#你的数据库主机，留空默认为localhost</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>, <span class="comment">#你的数据库端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开项目前需要保证 mysql 数据库已经安装且服务处于运行状态。<br>项目运行之后可能会出现 <code>no module named MySQLdb</code>报错信息  </p><ul><li>原因<br>  默认情况下使用的是 MySQLdb 驱动，但是对 python3 的支持不太好，所以需要改用 PyMySQL</li><li>处理<br>安装 PyMySQL 驱动，然后在项目文件的 <code>__init__.py</code>里面写入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h3><p>建表相关操作在 <code>models.py</code>文件中定义，首先要导入 <code>from django.db import models</code>。<br>默认情况下将会在表中创建字段<code>id</code>  </p><ul><li>字段类型<br><code>CharFileld</code>、<code>IntegerField</code>、<code>URLField</code>、<code>EmailField</code>、<code>BooleanField</code>、<code>DateField</code><br>对于 <code>URLField</code>、<code>EmailField</code>等 数据库不存在的数据类型， django 会对输入的类型进行正则匹配的检查，确保符合相关标准。  </li><li>参数<br>null    表示是否允许为空<br>blank  通过 admin 管理页面<br>verbose_name    字段的显示名称<br>default 默认值<br>max_length 字段最大长度</li><li>表之间关系<br>ForeignKey 外键，将会在<code>to=</code>指定的表中添加一个字段，存放该表的主键。<br>下面的示例，将会在 <code>class</code>表中添加字段<code>sch_id</code>，保存的为 <code>schopl</code>表的<code>id</code>值<br>OneToOneField   一对一，将会在该表中添加一个字段，存放<code>to=</code>指定表的主键<br>下面的示例，将会在<code>number</code>表中添加字段<code>num_id</code>，同时会为<code>num_id</code>添加一个唯一索引<br>ManyToManyField 多对多，将会新建一个表，用于存放该表和<code>to=</code>指定表的主键<br>下面的示例，将会在<code>class</code>和<code>userinfo</code>之外再新建一个表<code>class_user</code><br>字段<code>user_id</code>为 <code>user</code>表主键，字段<code>class_id</code>为<code>class</code>表主键，同时为添加唯一索引<code>uniq(class_id,userinfo_id)</code></li><li><code>__str__</code><br>用于指定默认返回的值，若无默认返回<code>class</code>对象，否则返回该对象对应的值。<br>建表示例  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, verbose_name=<span class="string">'姓名'</span>)</span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># number = models.IntegerField(default=0, verbose_name='学号')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">        <span class="comment"># return self.name+self.username+self.password</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    num = models.OneToOneField(to=<span class="string">'UserInfo'</span>, verbose_name=<span class="string">'学号'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'名字'</span>)</span><br><span class="line">    mac = models.URLField(max_length=<span class="number">128</span>, default=<span class="string">'1'</span>, verbose_name=<span class="string">'地址'</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'邮箱'</span>)</span><br><span class="line">    true_false = models.BooleanField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'是否'</span>)</span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">'日期'</span>)</span><br><span class="line">    models.OneToOneField(to=<span class="string">"Class"</span>, verbose_name=<span class="string">'一对一关系'</span>)</span><br><span class="line">    cal = models.ForeignKey(to=<span class="string">'Class'</span>, default=<span class="number">1</span>)  <span class="comment"># 外键</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    sch = models.ForeignKey(to=<span class="string">'School'</span>, default=<span class="number">1</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">'名字'</span>)</span><br><span class="line">    user = models.ManyToManyField(to=<span class="string">'UserInfo'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>完成建表操作之后在 Terminal 执行命令建表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></p><h3 id="单表数据操作"><a href="#单表数据操作" class="headerlink" title="单表数据操作"></a>单表数据操作</h3><p>下面提到的 <code>School</code> 是在 <code>models.py</code> 中定义的类名称，作为示例  </p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li><p>查询所有数据<br>使用<code>models.School.objects.all()</code>查询所有数据  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">school_li = models.School.objects.all()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> school_li:</span><br><span class="line">    print(item, type(item), item.name)</span><br></pre></td></tr></table></figure></li><li><p>get 方法查询<br>使用 get 方法只适用于返回结果只有一行，不适用于多行  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">school = models.School.objects.get(id=<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter 方法查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(name=<span class="string">'aming_linux'</span>)  <span class="comment"># 结果为QuerySet List</span></span><br><span class="line">obj1 = models.School.objects.filter(name=<span class="string">'aming_linux'</span>).first() <span class="comment">#取第一个结果</span></span><br><span class="line">obj2 = models.School.objects.filter(name=<span class="string">'aming_linux'</span>).last() <span class="comment">#取最后一个结果</span></span><br></pre></td></tr></table></figure></li></ul><p>当查询结果行数不确定，可以使用 <code>filter</code> 方法进行查询，查询结果为 QuerySet List<br>对得到的结果需要循环进行读取，同时特提供了<code>first()</code> 和 <code>last()</code> 方法对结果进行处理，可直接返回查询结果<br>若传入参数为字典，可以使用下面的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'aming_linux'</span>&#125;</span><br><span class="line">obj = models.School.objects.filter(**dic).first()</span><br></pre></td></tr></table></figure></p><p><code>get</code> 和 <code>filter</code> 方法，建议使用 <code>filter</code>  </p><ol><li><code>get</code> 返回结果为 QuerySet,<code>filter</code> 返回结果为 QuerySet List  </li><li><code>get</code> 若无返回结果则报错，<code>filter</code>若无返回结果不会报错，返回空值  <h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4>增加数据使用<code>create</code>方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'name'</span>: <span class="string">'aming_linux'</span>&#125;</span><br><span class="line">obj = models.School.objects.create(**dic)</span><br><span class="line">obj1 = models.School.objects.create(name=<span class="string">'aming_linux2'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>返回结果为 <code>class</code> ，若定义了 <code>__str__</code> 函数，则返回指定的对象</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除数据使用<code>delete</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(**dic).delete()</span><br></pre></td></tr></table></figure></p><p>返回结果示例 <code>(1, {&#39;demo.School&#39;: 1})</code><br>返回结果为元组，元组第一个参数是删除的总行数，第二个参数是字典，字典的 key 表示数据库表， value 表示删除的行数。若是跨表，字典中可能存在多对键值    </p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li><p>方法1 <code>update</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.filter(**dic).update(name=<span class="string">'linux_aming'</span>)</span><br></pre></td></tr></table></figure></li><li><p>方法2 先查询再修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = models.School.objects.get(name=<span class="string">'linux_aming'</span>)</span><br><span class="line">obj.name = <span class="string">'aming_linux'</span></span><br><span class="line">obj.save()</span><br></pre></td></tr></table></figure></li></ul><p>推荐使用<code>方法1</code>进行修改操作。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;默认情况下，django 使用 sqlite 作为数据库，相关的配置文件在项目的 &lt;code&gt;settings.py&lt;/code&gt;文件 &lt;c
      
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django进阶" scheme="https://rosinelan.github.io/tags/django%E8%BF%9B%E9%98%B6/"/>
    
      <category term="ORM" scheme="https://rosinelan.github.io/tags/ORM/"/>
    
      <category term="增删改查" scheme="https://rosinelan.github.io/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>django基础之views基础和admin管理</title>
    <link href="https://rosinelan.github.io/2018/12/21/django%E5%9F%BA%E7%A1%80%E4%B9%8Bviews%E5%9F%BA%E7%A1%80%E5%92%8Cadmin%E7%AE%A1%E7%90%86/"/>
    <id>https://rosinelan.github.io/2018/12/21/django基础之views基础和admin管理/</id>
    <published>2018-12-21T08:47:53.000Z</published>
    <updated>2018-12-21T09:58:18.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="views基础"><a href="#views基础" class="headerlink" title="views基础"></a>views基础</h3><p>views 常用的三个返回方法 <code>render</code> <code>HttpResponse</code> <code>redirect</code></p><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>通过模板语言的渲染，将 html 返回给用户<br><a id="more"></a></p><h4 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h4><p>一般是对页面部分数据的填充，返回部分的字符串数据  </p><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>请求 url 重定向</p><h4 id="应用场景区别"><a href="#应用场景区别" class="headerlink" title="应用场景区别"></a>应用场景区别</h4><ol><li>数据库返回的 queryset list 数据集，通过 render 渲染 templates 直接返回 html 页面</li><li>通过按钮调用 js 代码向 url 发送请求，然后通过 urls 定位到 views 的处理逻辑，得到需要的数据，通过 HttpResponse 返回。若是单个数据，则字符串返回，若多个数据则通过 json返回</li><li>请求重定向 url ，重新通过 urls 定位</li></ol><h3 id="admin管理页面"><a href="#admin管理页面" class="headerlink" title="admin管理页面"></a>admin管理页面</h3><p>admin 页面用于从数读取数据，呈现在页面上进行管理。  </p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>在 Terminal 创建登录用户<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>根据提示信息输入用户名和密码即可。<br>启动 django 项目的服务，访问 <a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a> 登录即可。<br>默认情况下展示 django 默认的数据库表信息<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-default.png" alt="django-admin-default" title="django-admin-default"></p><h4 id="自定义表展示"><a href="#自定义表展示" class="headerlink" title="自定义表展示"></a>自定义表展示</h4><p>首先创建表</p><p><code>demo/models.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    schoolname=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    schooltype=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    classname=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    classno=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>在 Terminal 执行命令建表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></p><p>然后注册</p><p><code>demo/admin.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo)</span><br><span class="line">admin.site.register(models.School)</span><br><span class="line">admin.site.register(models.Class)</span><br></pre></td></tr></table></figure></p><p>重新访问就会显示应用 demo 新建的数据库表<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-demo.png" alt="django-admin-demo" title="django-admin-demo"><br>此时存在一个问题，选择一个表进去显示的都是 <code>object</code>而不是对应的表数据，选择对应的 object 才能看到数据。<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-object.png" alt="django-admin-object" title="django-admin-object"><br>修改如下<br><code>demo/admin.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = (<span class="string">"username"</span>, <span class="string">"password"</span>) <span class="comment"># 显示表格的表头</span></span><br><span class="line">    search_fields = (<span class="string">"username"</span>,)   <span class="comment"># 设置搜索框允许搜索的字段</span></span><br><span class="line">    list_filter = (<span class="string">"username"</span>,) <span class="comment"># 设置过滤器</span></span><br><span class="line">    ordering = (<span class="string">"-username"</span>,)   <span class="comment"># 排序字段， -表示倒序</span></span><br><span class="line"></span><br><span class="line">admin.site.register(models.UserInfo, UserInfoAdmin)</span><br><span class="line">admin.site.register(models.School)</span><br><span class="line">admin.site.register(models.Class)</span><br></pre></td></tr></table></figure></p><p>再次访问效果如下<br><img src="http://cdn.rosinelan.com/blog/system/django-admin-data.png" alt="django-admin-data" title="django-admin-data"></p><ul><li>数据表多对多关系通过页面删除数据，将会删除所有关联数据，属于级联删除</li><li>注册也可以写在其他应用的 admin.py 文件中，只要应用在项目的 settings.py 注册即可。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;views基础&quot;&gt;&lt;a href=&quot;#views基础&quot; class=&quot;headerlink&quot; title=&quot;views基础&quot;&gt;&lt;/a&gt;views基础&lt;/h3&gt;&lt;p&gt;views 常用的三个返回方法 &lt;code&gt;render&lt;/code&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;code&gt;redirect&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h4&gt;&lt;p&gt;通过模板语言的渲染，将 html 返回给用户&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="views" scheme="https://rosinelan.github.io/tags/views/"/>
    
      <category term="admin" scheme="https://rosinelan.github.io/tags/admin/"/>
    
  </entry>
  
  <entry>
    <title>templates基本使用</title>
    <link href="https://rosinelan.github.io/2018/12/20/templates%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/12/20/templates基本使用/</id>
    <published>2018-12-20T09:04:31.000Z</published>
    <updated>2018-12-21T02:28:40.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="templates"><a href="#templates" class="headerlink" title="templates"></a>templates</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; var_name &#125;&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h5 id="变量过滤器-filter"><a href="#变量过滤器-filter" class="headerlink" title="变量过滤器 (filter)"></a>变量过滤器 (filter)</h5><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; obj|filter:param &#125;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="常用的内置过滤器"><a href="#常用的内置过滤器" class="headerlink" title="常用的内置过滤器"></a>常用的内置过滤器</h5><ul><li>add        给变量加上相应的值</li><li>addslashes 给变量中的引号前加上斜线</li><li>capfirst   首字母大写</li><li>cut        从字符串中移除指定的字符</li><li>date       格式化日期字符串</li><li>default    如果值是False,就替换成设置的默认值，否则就是用本来的值</li><li>default_if_none  如果值是None，就替换成设置的默认值，否则就使用本来的值</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p><code>views.py</code>定义日期变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'te st'</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.datetime.now()</span><br></pre></td></tr></table></figure></p><p><code>login.html</code> 使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; test | cut:<span class="string">' '</span> &#125;&#125;</span><br><span class="line">&#123;&#123; d|date:<span class="string">'Y-m-d'</span> &#125;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%tags%&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>%&#125;&#123;%endif%&#125;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="keyword">for</span>%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> item <span class="keyword">in</span> obj_li %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;% <span class="keyword">if</span> item.username == <span class="string">'test'</span> %&#125;</span><br><span class="line">            &lt;span&gt;&#123;&#123; item.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; item.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>其实现的效果和 python 中的 <code>if</code> 和 <code>for</code> 效果类似。   </p><h5 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h5><p>内置方法无法满足需求，可以通过自定义过滤器和标签方式满足需求。  </p><ol><li>应用 demo 中新建 <code>package</code> ，名称为 <code>templatetags</code>。</li><li><p>新建 python 文件，可任意命名(my_tag.py 示例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> library</span><br><span class="line"></span><br><span class="line">register = library()    <span class="comment"># 必须实例化，对象名称为 register</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_tag</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'2018-08-18'</span></span><br></pre></td></tr></table></figure></li><li><p>在项目 settings.py 的 INSTALL_APPS 添加对应的应用名称(已注册不需要添加)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'demo.apps.DemoConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在 login.html 文件中引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load my_tag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; test | filter_func:'666' &#125;&#125;&lt;/p&gt;   # 自定义过滤器</span><br><span class="line"></span><br><span class="line">&#123;% filter_tag <span class="string">'a'</span> <span class="string">'b'</span> <span class="string">'c'</span> <span class="string">'d'</span> %&#125;    <span class="comment"># 自定义标签</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="引入静态文件"><a href="#引入静态文件" class="headerlink" title="引入静态文件"></a>引入静态文件</h5><p>引入 <code>jquery</code> 为示例  </p><ol><li>在应用 demo 中新建 static/js 文件夹，放入对应的文件</li><li><p>在项目的 settings.py 文件中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"demo/static/"</span>), <span class="comment"># 注意逗号</span></span><br><span class="line">    <span class="comment"># [os.path.join(BASE_DIR, "static/")]   </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>在 demo/login.html 文件中添加</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br></pre></td></tr></table></figure><p>注意：添加在 html 页面顶部<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.8.3.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：<code>&lt;script&gt;</code> 标签在 <code>&lt;head&gt;&lt;/head&gt;</code>标签中间</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>所有页面风格比较一致，例如导航栏、侧面栏等都一致，只有其他部分不一致。可以将导航栏和侧面栏作为模板页，其他页面继承。  </p><h5 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h5><p>语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block %&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li>模板页使用 block 标识需要载入子页面的位置</li><li>子页面使用 extends 继承模板页，然后在 block 标识内添加子页面的内容<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5>模板页 <code>base.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;% static 'js/jquery-1.8.3.min.js' %&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是顶部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>子页面<code>login.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; a.0 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% for item in obj_li %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                &#123;% if item.username == 'test' %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;&#123; test &#125;&#125;</span><br><span class="line">        &#123;&#123; test | cut:' ' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; d &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; d|date:'Y-m-d' &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% load my_tag %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; test | filter_func:'666' &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% filter_tag 'a' 'b' 'c' 'd' %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用最佳实践"><a href="#使用最佳实践" class="headerlink" title="使用最佳实践"></a>使用最佳实践</h5><ul><li>如果在模板中使用 <code>{% extends %}</code> ，必须保证其为模板中的第一个模板标记。 否则，模板继承将不起作用。</li><li>一般来说，基础模板中的 <code>{% block %}</code> 标签越多越好。 记住，子模板不必定义父模板中所有的代码块，因此你可以用合理的缺省值对一些代码块进行填充，然后只对子模板所需的代码块进行（重）定义。 俗话说，钩子越多越好。</li><li>如果发觉自己在多个模板之间拷贝代码，你应该考虑将该代码段放置到父模板的某个 <code>{% block %}</code> 中。如果你需要访问父模板中的块的内容，使用 <code>{{ block.super }}</code>这个标签吧，这一个魔法变量将会表现出父模板中的内容。如果只想在上级代码块基础上添加内容，而不是全部重载，该变量就显得非常有用了。</li><li>不允许在同一个模板中定义多个同名的 <code>{% block %}</code> 。存在这样的限制是因为block 标签的工作方式是双向的。也就是说，block 标签不仅挖了一个要填的坑，也定义了在父模板中这个坑所填充的内容。如果模板中出现了两个相同名称的 <code>{% block %}</code> 标签，父模板将无从得知要使用哪个块的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;templates&quot;&gt;&lt;a href=&quot;#templates&quot; class=&quot;headerlink&quot; title=&quot;templates&quot;&gt;&lt;/a&gt;templates&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;p&gt;语法格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; var_name &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="templates" scheme="https://rosinelan.github.io/tags/templates/"/>
    
      <category term="simple_tag" scheme="https://rosinelan.github.io/tags/simple-tag/"/>
    
  </entry>
  
  <entry>
    <title>django基础之urls详解</title>
    <link href="https://rosinelan.github.io/2018/12/19/django%E5%9F%BA%E7%A1%80%E4%B9%8Burls%E8%AF%A6%E8%A7%A3/"/>
    <id>https://rosinelan.github.io/2018/12/19/django基础之urls详解/</id>
    <published>2018-12-19T01:51:43.000Z</published>
    <updated>2018-12-19T10:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="urls基本配置"><a href="#urls基本配置" class="headerlink" title="urls基本配置"></a>urls基本配置</h3><p><code>urls</code> 配置类似于网站的目录，通过 urls 的配置，告诉 Django 对于该 url 调用哪段代码。基本的语法格式<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> urlpatterns = [</span><br><span class="line">         url(正则表达式, views视图函数，参数，别名),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><ul><li>正则表达式 正则表达式字符串</li><li>视图函数 可调用的对象，通常是视图函数或一个指定视图函数路径的字符串</li><li>参数 可选的要传递给视图函数的默认参数</li><li>别名 可选的name参数</li></ul><h4 id="正则字符串参数"><a href="#正则字符串参数" class="headerlink" title="正则字符串参数"></a>正则字符串参数</h4><h4 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^articles/2003/$'</span>, views.special_case_2003),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    url(<span class="string">r'^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/([0-9]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li>一旦匹配成功，则不再继续</li><li>若要从 url 中捕获一个值，只需要在它的周围放一对圆括号</li><li>不需要添加一个前置的反斜杠，例如，应该是 <code>^articles</code> 而不是 <code>^/articles</code>，因为每一个都会有  </li><li>每个表达式前面的 <code>r</code> 建议都添加，正则表达式的用法</li><li>是否开启 url 访问地址后面不带 / 跳转为带有 / 的路径，<code>APPEND_SLASH=True</code></li></ol><h4 id="include-其他urls"><a href="#include-其他urls" class="headerlink" title="include 其他urls"></a>include 其他urls</h4><p>当主 urls 中有很多匹配路由时，会比较杂乱，建议根据项目中的应用，使用 include 参数，分配到各项目的 urls 文件中。<br>对于 Djangotest 项目， demo01 应用<br><code>Djangotest/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, views.login),</span><br><span class="line">    url(<span class="string">r'^api/'</span>, include(<span class="string">'demo01.urls'</span>)),  <span class="comment"># include使用方法</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>demo01/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^list.html'</span>, views.list),</span><br><span class="line">    url(<span class="string">r'^add.html'</span>, views.add),</span><br><span class="line">    url(<span class="string">r'^update.html'</span>, views.update),</span><br><span class="line">    url(<span class="string">r'^delete.html'</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>此时访问地址为 <code>http://127.0.0.1:8000/api/list.html</code>，将会匹配到 demo01 的 urls 文件。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>当需要捕获 url 中传递的参数时候，可以采用如下的方式<br><code>demo01/urls.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> demo01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^list.html'</span>, views.list),</span><br><span class="line">    url(<span class="string">r'^add.html'</span>, views.add),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;num&gt;[0-9]+)/update.html'</span>, views.update), <span class="comment"># 正则匹配，参数num</span></span><br><span class="line">    url(<span class="string">r'^delete.html'</span>, views.delete),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>/demo01/views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(requests, num)</span>:</span></span><br><span class="line">    print(num)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'this update'</span>)</span><br></pre></td></tr></table></figure></p><p>此处使用 <code>num</code>就可以直接接受到参数。<br>另外，此处传递的参数都是字符串，不论传递的是数字还是字符串。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;urls基本配置&quot;&gt;&lt;a href=&quot;#urls基本配置&quot; class=&quot;headerlink&quot; title=&quot;urls基本配置&quot;&gt;&lt;/a&gt;urls基本配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;urls&lt;/code&gt; 配置类似于网站的目录，通过 urls 的配置，告诉 Django 对于该 url 调用哪段代码。基本的语法格式&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="urls" scheme="https://rosinelan.github.io/tags/urls/"/>
    
  </entry>
  
  <entry>
    <title>django从基础之models的基础使用和命令</title>
    <link href="https://rosinelan.github.io/2018/12/18/django%E4%BB%8E%E5%9F%BA%E7%A1%80%E4%B9%8Bmodels%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
    <id>https://rosinelan.github.io/2018/12/18/django从基础之models的基础使用和命令/</id>
    <published>2018-12-18T02:43:37.000Z</published>
    <updated>2018-12-19T10:17:05.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="models的基本使用"><a href="#models的基本使用" class="headerlink" title="models的基本使用"></a>models的基本使用</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>models</code>是数据操作的API。不需要直接使用SQL语句进行对应表的创建等操作。<br><a id="more"></a></p><ol><li>在<code>settings.py</code>中配置数据库连接相关信息，如驱动、IP地址、用户名、密码等。  </li><li>在<code>models.py</code>中定义数据库表名称及字段信息。  </li><li><p>在Terminal中执行下面命令执行<code>models.py</code>中定义的语句，在数据库中建表。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></li><li><p>此时在数据库可以查看到创建的表信息。  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>django 自带 sqlite 数据库，已经在 settings.py 中配置好了，可直接使用，以使用 sqlite 为例子。  </p></li></ol><ul><li>在 models.py 中定义表及字段信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInof</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br><span class="line">    password=models.CharField(max_length=<span class="number">32</span>, null=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li></ul><p>此处类名为表名，类中定义的为各个字段名及属性。  </p><ul><li><p>在 Terminal 中执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.y migrate</span><br></pre></td></tr></table></figure></li><li><p>此时在左侧将会出现 <code>db.sqlite3</code>文件，将其拖至右侧边栏的 Database ，即可看到 sqlite 数据库信息<br><img src="http://cdn.rosinelan.com/blog/system/django-models-sqlite.png" alt="django-models-sqlite" title="django-models-sqlite"></p></li></ul><p>以<code>demo_*</code>开头的为新建的表，<code>auth_*</code>和<code>django_*</code>为 django 自带的表。  </p><ul><li>数据查询及绑定<br><code>sqlite</code>数据插入<br>在右侧展示的数据库中双击对应的<code>demo_userinof</code>，即可打开对应的数据库表<br><img src="http://cdn.rosinelan.com/django-sqlite-insert.png" alt="django-sqlite-insert" title="django-sqlite-insert"></li></ul><p>此处 <code>id</code> 列会自动生成并自增，不需要手动输入。<br><code>views.py</code> 定义数据查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        a = [<span class="number">1</span>,]</span><br><span class="line">        <span class="comment"># obj_li = models.UserInof.objects.all()    # 查询所有</span></span><br><span class="line">        obj_li = models.UserInof.objects.filter(username=<span class="string">'test'</span>)  <span class="comment"># 条件查询</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> obj_li:</span><br><span class="line">            print(<span class="string">'username---&gt;'</span>, item.username)</span><br><span class="line">            print(<span class="string">'password---&gt;'</span>, item.password)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, locals())</span><br></pre></td></tr></table></figure></p><p><code>/templates/login.html</code> 数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; a.0 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% for item in obj_li %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此处数据绑定展示，效果如下<br><img src="http://cdn.rosinelan.com/blog/system/django-login-test.png" alt="django-login-test" title="django-login-test"><br> <code>1</code> 是通过定义变量列表直接传入。<br>用户名和密码通过 <code>for</code> 循环绑定。  </p><h3 id="django基础命令"><a href="#django基础命令" class="headerlink" title="django基础命令"></a>django基础命令</h3><ul><li><p>创建 django project，名称为<code>mysite</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure></li><li><p>在 mysite 目录下创建应用，名称为 <code>blog</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure></li><li><p>启动 django 项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></table></figure></li><li><p>更改数据库表或字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><p>django 1.7.1 以下版本使用<code>python manage.py syncdb</code>命令。</p><ul><li><p>清空数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py flush</span><br></pre></td></tr></table></figure></li><li><p>创建超级管理员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser  <span class="comment"># 按提示输入用户名和密码，邮箱可不输入</span></span><br><span class="line">python manage.py changepassword username  <span class="comment"># 修改用户密码</span></span><br></pre></td></tr></table></figure></li><li><p>Django 项目环境终端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure></li><li><p>显示数据库版本信息并在命令行下启动数据库的命令行工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py dbshell</span><br></pre></td></tr></table></figure></li></ul><p>通过 <code>python manage.py</code> 可以看到更多的用法。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;models的基本使用&quot;&gt;&lt;a href=&quot;#models的基本使用&quot; class=&quot;headerlink&quot; title=&quot;models的基本使用&quot;&gt;&lt;/a&gt;models的基本使用&lt;/h3&gt;&lt;h4 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h4&gt;&lt;p&gt;&lt;code&gt;models&lt;/code&gt;是数据操作的API。不需要直接使用SQL语句进行对应表的创建等操作。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="models" scheme="https://rosinelan.github.io/tags/models/"/>
    
      <category term="命令" scheme="https://rosinelan.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>django基础之urls及view</title>
    <link href="https://rosinelan.github.io/2018/12/18/django%E5%9F%BA%E7%A1%80%E4%B9%8Burls%E5%8F%8Aview/"/>
    <id>https://rosinelan.github.io/2018/12/18/django基础之urls及view/</id>
    <published>2018-12-17T23:17:53.000Z</published>
    <updated>2018-12-18T02:29:53.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境为 python 3.X + Django 1.11，若安装的 Django 版本不一致，可先卸载然后指定版本安装。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">pip uninstall Django</span><br><span class="line"><span class="comment"># 指定版本安装</span></span><br><span class="line">pip install Django==<span class="number">1.11</span></span><br></pre></td></tr></table></figure></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Django 使用 MVC/MTV 模式，其本质是为了保持各组件之间松耦合关系。  </p><ul><li>Model(模型)：负责业务对象与数据库的对象(ORM)</li><li>Template(模版)：负责如何把页面展示给用户</li><li>View(视图)：负责业务逻辑，并在适当的时候调用 Model 和 Template  </li></ul><p>此外，Django 还有一个 <code>url</code> 分发器，它的作用是将一个个的 URL 页面请求分发给不同的 view 请求， view 再调用相应的 Model 和 Template 。</p><h3 id="Django流程"><a href="#Django流程" class="headerlink" title="Django流程"></a>Django流程</h3><p>Django 包括 MTV 和 url 分发器，那么具体的处理流程如何呢？<br><img src="http://cdn.rosinelan.com/blog/system/django-process.png" alt="django-process" title="diango-process">  </p><p>用户访问，首先通过<code>urls</code>进行访问路径的匹配，然后转到匹配到的方法或函数，转到 <code>views</code> 进行逻辑处理。<br>若需要访问数据库，则通过 <code>models</code> 访问数据库，获取需要的数据，返回给 <code>views</code>。<br><code>views</code> 处理完成后，若是API调用方式，直接返回数据给用户；否则通过 <code>template</code> 对指定的模板进行渲染，然后将对应的 html 返回给页面。  </p><h3 id="urls及view基础"><a href="#urls及view基础" class="headerlink" title="urls及view基础"></a>urls及view基础</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>使用 pycharm 创建对应的 django 项目，具体步骤如下<br>文件 –&gt; New Project ,然后选择 Diango<br><img src="http://cdn.rosinelan.com/blog/system/django-create.png" alt="django-create" title="django-create"><br>Location 选择对应位置，Djangotest 是对应的 project 名称。<br>Application name 填写具体的应用名称，不填写则不创建。<br>创建完成后对应的目录结构如下<br><img src="http://cdn.rosinelan.com/blog/system/django-ceontent.png" alt="django-content" title="diango-ceontent"></p><h4 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h4><p>在 urls 中添加一个 login 登录<br>/demo/Djangotest/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> views  <span class="comment"># 此处需要import</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, views.login),  <span class="comment"># 此处第一个参数是正则匹配，第二个参数是对应的方法或者函数</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>此处 views.login 无此方法，需要在 views 中添加<br>/demo/views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        data = <span class="string">'helo demo'</span></span><br><span class="line">        msg = <span class="string">'aming pythono'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, &#123;<span class="string">'data'</span>:data,<span class="string">'msg'</span>:msg&#125;)</span><br><span class="line">    <span class="comment"># return render(request, 'login.html', locals())</span></span><br><span class="line">    <span class="comment"># return HttpResponse('hello demo')</span></span><br></pre></td></tr></table></figure></p><ol><li>views 中的方法要求必须返回数据。  </li><li>返回数据常用的是render/HttpResponse/redirect 3个方法。  </li><li><p>locals()方法等价于上面的通过字典传参数，更常用locals()。<br>上面代码跳转至 login.html 页面，在 /demo/templates 添加 login.html 页面  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2个大括号是django使用的参数绑定的方法。  </p></li><li>此处的 data 和前面 views 中 return 返回的字典中的 <code>key</code> 是一致的。  </li></ol><p>然后运行该项目，默认访问 <a href="http://127.0.0.1:8000/login/" target="_blank" rel="noopener">http://127.0.0.1:8000/login/</a> 即可得到对应页面。<br><img src="http://cdn.rosinelan.com/blog/system/django-result.png" alt="django-result" title="django-result"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h4><p>在不涉及 models (数据库交互)的情况下，一般的处理流程  </p><ol><li>在 urls 中匹配并跳转至对应的方法</li><li>在 views 中根据方法或函数的逻辑进行数据处理  </li><li>根据 views 结果，跳转至 templates 中进行渲染  </li></ol><h4 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h4><p>创建流程和新建流程其实是一致的  </p><ol><li>根据应用实际情况，在 urls 添加路径匹配，并指定 views 对应的函数或方法 </li><li>在 views 中创建对应的方法或函数，进行响应的逻辑处理，最后返回数据  </li><li>在 templates 中创建 html 页面，并根据 views 中返回的数据进行数据绑定  </li></ol><p>更复杂的包含 models 的涉及数据库交互的内容后面学习。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Django&quot;&gt;&lt;a href=&quot;#Django&quot; class=&quot;headerlink&quot; title=&quot;Django&quot;&gt;&lt;/a&gt;Django&lt;/h3&gt;&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;p&gt;环境为 python 3.X + Django 1.11，若安装的 Django 版本不一致，可先卸载然后指定版本安装。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="django" scheme="https://rosinelan.github.io/tags/django/"/>
    
      <category term="urls" scheme="https://rosinelan.github.io/tags/urls/"/>
    
      <category term="install" scheme="https://rosinelan.github.io/tags/install/"/>
    
      <category term="流程" scheme="https://rosinelan.github.io/tags/%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python rc脚本实例续</title>
    <link href="https://rosinelan.github.io/2018/12/07/python-rc%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B%E7%BB%AD/"/>
    <id>https://rosinelan.github.io/2018/12/07/python-rc脚本实例续/</id>
    <published>2018-12-07T08:39:32.000Z</published>
    <updated>2018-12-18T01:58:40.388Z</updated>
    
    <content type="html"><![CDATA[<p>##<br>脚本功能：使用python写一个memcached的start/stop/restart/status脚本。<br>前面构造了脚本的基础结构，下面是具体方法的实现。<br><a id="more"></a></p><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, args, workdir)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.program = program</span><br><span class="line">        self.args = args</span><br><span class="line">        self.workdir = workdir</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached'''</span>    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.workdir):</span><br><span class="line">            os.mkdir(self.workdir)</span><br><span class="line">            os.chdir(self.workdir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pidFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached/memcached.pid'''</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(self.workdir, <span class="string">"%s.pid"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_writePid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.pid:</span><br><span class="line">            <span class="keyword">with</span> open(self._pidFile(), <span class="string">'w'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                fd.write(str(self.pid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is running..."</span> % self.name</span><br><span class="line">            sys.exit()</span><br><span class="line">        self._init()</span><br><span class="line">        cmd = self.program + <span class="string">' '</span> +self.args</span><br><span class="line">        p = Popen(cmd, stdout=PIPE, shell=<span class="keyword">True</span>) </span><br><span class="line">        self.pid = p.pid</span><br><span class="line">        self._writePid()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s start Sucessful"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPid</span><span class="params">(self)</span>:</span></span><br><span class="line">        p = Popen([<span class="string">'pidof'</span>,self.name], stdout=PIPE)</span><br><span class="line">        pid = p.stdout.read().strip()</span><br><span class="line">        <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            os.kill(int(pid), <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(self._pidFile()):</span><br><span class="line">                os.remove(self._pidFile())</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is stopped"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stop()</span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()        </span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is already running"</span> % self.name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is not running"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s &#123;start|stop|status|restart&#125;"</span> % __file__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">    prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">    args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">    wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">    </span><br><span class="line">    pm = Process(name = name,</span><br><span class="line">                 program = prog,</span><br><span class="line">                 args = args,</span><br><span class="line">                 workdir = wd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Option Error"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">        pm.start()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">        pm.stop()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">        pm.restart()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">        pm.status()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用命令行启动，父进程为当前bash的<code>PID</code>,当前shell关闭之后，该子进程由<code>init</code>接受，即父进程变更为1。<br>查询当前bash的<code>PID</code>  </p><ul><li><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># echo $$</span></span><br><span class="line"><span class="number">98509</span></span><br></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># tty</span></span><br><span class="line">/dev/pts/<span class="number">0</span></span><br><span class="line"> [root@linux02 advance]<span class="comment"># ps -ef|grep pts/0</span></span><br><span class="line">root      98501   1666  0 Jun20 ?        00:00:10 sshd: root@pts/0 </span><br><span class="line">root      <span class="number">98509</span>  <span class="number">98501</span>  <span class="number">0</span> Jun20 pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> -bash</span><br><span class="line">root     <span class="number">109237</span>  <span class="number">98509</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">35</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps -ef</span><br><span class="line">root     <span class="number">109238</span>  <span class="number">98509</span>  <span class="number">0</span> <span class="number">11</span>:<span class="number">35</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep pts/<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="守护进程启动"><a href="#守护进程启动" class="headerlink" title="守护进程启动"></a>守护进程启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line">    args = &#123;<span class="string">'USER'</span>:<span class="string">'memcached'</span>, </span><br><span class="line">            <span class="string">'PORT'</span>:<span class="number">11211</span>,</span><br><span class="line">            <span class="string">'MAXCONN'</span>:<span class="number">1024</span>,</span><br><span class="line">            <span class="string">'CACHESIZE'</span>:<span class="number">64</span>,</span><br><span class="line">            <span class="string">'OPTIONS'</span>:<span class="string">''</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, workdir)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.program = program</span><br><span class="line">        self.workdir = workdir</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached'''</span>    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.workdir):</span><br><span class="line">            os.mkdir(self.workdir)</span><br><span class="line">            os.chdir(self.workdir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pidFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''/var/tmp/memcached/memcached.pid'''</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(self.workdir, <span class="string">"%s.pid"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_writePid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.pid:</span><br><span class="line">            <span class="keyword">with</span> open(self._pidFile(), <span class="string">'w'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                fd.write(str(self.pid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_readConf</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(f) <span class="keyword">as</span> fd:</span><br><span class="line">            lines = fd.readlines()</span><br><span class="line">            <span class="keyword">return</span> dict([i.strip().replace(<span class="string">'"'</span>,<span class="string">''</span>).split(<span class="string">'='</span>) <span class="keyword">for</span> i <span class="keyword">in</span> lines])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parseArgs</span><span class="params">(self)</span>:</span></span><br><span class="line">        conf = self._readConf(<span class="string">'/etc/sysconfig/memcached'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'USER'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'USER'</span>] = conf[<span class="string">'USER'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'PORT'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'PORT'</span>] = conf[<span class="string">'PORT'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'MAXCONN'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'MAXCONN'</span>] = conf[<span class="string">'MAXCONN'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'CACHESIZE'</span> <span class="keyword">in</span> conf:</span><br><span class="line">            self.args[<span class="string">'CACHESIZE'</span>] = conf[<span class="string">'CACHESIZE'</span>]</span><br><span class="line">        options = [<span class="string">'-u'</span>, self.args[<span class="string">'USER'</span>],</span><br><span class="line">                   <span class="string">'-p'</span>, self.args[<span class="string">'PORT'</span>],</span><br><span class="line">                   <span class="string">'-m'</span>, self.args[<span class="string">'CACHESIZE'</span>],</span><br><span class="line">                   <span class="string">'-c'</span>, self.args[<span class="string">'MAXCONN'</span>]]</span><br><span class="line">        os.system(<span class="string">"chown %s %s"</span> % (self.args[<span class="string">'USER'</span>],self.workdir))</span><br><span class="line">        <span class="keyword">return</span> options</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is running..."</span> % self.name</span><br><span class="line">            sys.exit()</span><br><span class="line">        self._init()</span><br><span class="line">        cmd = [self.program] + self._parseArgs() + [<span class="string">'-d'</span>,<span class="string">'-P'</span>, self._pidFile()]</span><br><span class="line">        <span class="keyword">print</span> cmd</span><br><span class="line">        p = Popen(cmd, stdout=PIPE) </span><br><span class="line">        <span class="comment">#self.pid = p.pid</span></span><br><span class="line">        <span class="comment">#self._writePid()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s start Sucessful"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPid</span><span class="params">(self)</span>:</span></span><br><span class="line">        p = Popen([<span class="string">'pidof'</span>,self.name], stdout=PIPE)</span><br><span class="line">        pid = p.stdout.read().strip()</span><br><span class="line">        <span class="keyword">return</span> pid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            os.kill(int(pid), <span class="number">15</span>)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(self._pidFile()):</span><br><span class="line">                os.remove(self._pidFile())</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is stopped"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stop()</span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = self._getPid()        </span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is already running"</span> % self.name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is not running"</span> % self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s &#123;start|stop|status|restart&#125;"</span> % __file__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">    prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">    args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">    wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">    </span><br><span class="line">    pm = Process(name = name,</span><br><span class="line">                 program = prog,</span><br><span class="line">                 workdir = wd)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Option Error"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">        pm.start()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">        pm.stop()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">        pm.restart()</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">        pm.status()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意点  </p><ol><li>以<code>-d</code>方式启动，需添加<code>-P</code>参数，不需要自己写入pid文件。  </li><li>守护进程启动方式在命令行启动脚本基础上进行了改进，主要是针对配置文件。  </li><li>守护进程方式启动，会出现二次fork，最后结果就是其父进程PID为1。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;br&gt;脚本功能：使用python写一个memcached的start/stop/restart/status脚本。&lt;br&gt;前面构造了脚本的基础结构，下面是具体方法的实现。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="rc脚本" scheme="https://rosinelan.github.io/tags/rc%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>python类的属性和方法总结及rc脚本实例</title>
    <link href="https://rosinelan.github.io/2018/12/06/python%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E5%8F%8Arc%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B/"/>
    <id>https://rosinelan.github.io/2018/12/06/python类的属性和方法总结及rc脚本实例/</id>
    <published>2018-12-06T08:36:15.000Z</published>
    <updated>2018-12-06T09:04:05.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的属性总结"><a href="#类的属性总结" class="headerlink" title="类的属性总结"></a>类的属性总结</h2><p>类属性相关内容如下  </p><ul><li>类的公有属性  </li><li>类的私有属性  <a id="more"></a></li><li>对象的公有属性  </li><li>对象的私有属性  </li><li>对象的内置属性  </li><li>函数的局部变量  </li><li>函数的全局变量  </li></ul><p>是否可通过对象访问？  </p><ul><li>类的公有属性可以实例化之后，通过对象直接访问。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc.var1</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br></pre></td></tr></table></figure></p><ul><li>类的私有属性实例化之后通过对象不可直接访问，可使用<code>instance._classname__attribute</code>方式访问。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc._MyClass__var2</span><br><span class="line"><span class="keyword">print</span> mc.__var2</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类的私有属性 __var2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_6_3.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> mc.__var2</span><br><span class="line">AttributeError: <span class="string">'MyClass'</span> object has no attribute <span class="string">'__var2'</span></span><br></pre></td></tr></table></figure></p><ul><li>对象的公有属性需要调用对应的方法之后，才可以通过对象访问。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line"><span class="keyword">print</span> mc.var3</span><br><span class="line">mc1 = MyClass()</span><br><span class="line"><span class="keyword">print</span> mc1.var3</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象的公有属性 var3</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_6_3.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> mc1.var3</span><br><span class="line">AttributeError: <span class="string">'MyClass'</span> object has no attribute <span class="string">'var3'</span></span><br></pre></td></tr></table></figure></p><ul><li>对象的私有属性，通过对象不可访问。  </li><li>函数的局部变量，通过对象不可访问。  </li></ul><p>是否可以通过类访问？  </p><ul><li>公有属性可以直接通过类访问  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> MyClass.var1</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br></pre></td></tr></table></figure></p><ul><li>私有属性不可通过类直接访问。  </li><li>方法的公有属性和私有属性不可通过类直接访问。  </li><li>方法的公有属性只能通过对象来访问。  </li></ul><p>方法内部是否可以调用呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.var1</span><br><span class="line">        <span class="keyword">print</span> self.__var2</span><br><span class="line">        <span class="keyword">print</span> self.var3</span><br><span class="line">        <span class="keyword">print</span> self.__var4</span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line">mc.func2()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类属性，类的公有属性 var1</span><br><span class="line">类的私有属性 __var2</span><br><span class="line">对象的共有属性 var3</span><br><span class="line">对象的私有属性 __var4</span><br></pre></td></tr></table></figure></p><ul><li>方法内部可以直接调用类的公有属性和私有属性。  </li><li>方法内部调用其它方法的公有属性和私有属性，需要先执行该方法再调用，否则无法调用。  </li><li>方法内部无法调用其它方法的局部变量。  </li><li>内置属性可以通过对象或类调用。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line">var5 = <span class="string">'全局变量 var5'</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    var1 = <span class="string">'类属性，类的公有属性 var1'</span></span><br><span class="line">    __var2 = <span class="string">'类的私有属性 __var2'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.var3 = <span class="string">'对象的共有属性 var3'</span></span><br><span class="line">        self.__var4 = <span class="string">'对象的私有属性 __var4'</span></span><br><span class="line">        var5 = <span class="string">'函数的局部变量 var5'</span></span><br><span class="line">        <span class="keyword">print</span> var5</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.var1</span><br><span class="line">        <span class="keyword">print</span> self.__var2</span><br><span class="line">        <span class="keyword">print</span> self.var3</span><br><span class="line">        <span class="keyword">print</span> self.__var4</span><br><span class="line">        <span class="keyword">print</span> var5</span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line">mc.func2()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line"><span class="keyword">print</span> mc.__dict__</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span>*<span class="number">50</span></span><br><span class="line"><span class="keyword">print</span> MyClass.__dict__</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">函数的局部变量 var5</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">类属性，类的公有属性 var1</span><br><span class="line">类的私有属性 __var2</span><br><span class="line">对象的共有属性 var3</span><br><span class="line">对象的私有属性 __var4</span><br><span class="line">全局变量 var5</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">&#123;<span class="string">'_MyClass__var4'</span>: <span class="string">'\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe7\xa7\x81\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 __var4'</span>, <span class="string">'var3'</span>: <span class="string">'\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe5\x85\xb1\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 var3'</span>&#125;</span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line">&#123;<span class="string">'func2'</span>: &lt;function func2 at <span class="number">0x7fbeac51a8c0</span>&gt;, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'var1'</span>: <span class="string">'\xe7\xb1\xbb\xe5\xb1\x9e\xe6\x80\xa7\xef\xbc\x8c\xe7\xb1\xbb\xe7\x9a\x84\xe5\x85\xac\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 var1'</span>, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'func1'</span>: &lt;function func1 at <span class="number">0x7fbeac51a230</span>&gt;, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'MyClass'</span> objects&gt;, <span class="string">'_MyClass__var2'</span>: <span class="string">'\xe7\xb1\xbb\xe7\x9a\x84\xe7\xa7\x81\xe6\x9c\x89\xe5\xb1\x9e\xe6\x80\xa7 __var2'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类的方法总结"><a href="#类的方法总结" class="headerlink" title="类的方法总结"></a>类的方法总结</h2><ul><li>公有方法</li><li>私有方法</li><li>类方法</li><li>静态方法</li><li>内置方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是公有方法"</span></span><br><span class="line">        self.__func2()  <span class="comment">## 类的内部调用私有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是私有方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classFun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是类方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticFun</span><span class="params">()</span>:</span>    <span class="comment">## 不可添加self</span></span><br><span class="line">        <span class="keyword">print</span> MyClass.name,    <span class="comment">## 通过类名调用</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是静态方法"</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br><span class="line">mc.func1()</span><br><span class="line">MyClass.classFun()</span><br><span class="line">MyClass.staticFun()</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test 我是公有方法</span><br><span class="line">Test 我是私有方法</span><br><span class="line">Test 我是类方法</span><br><span class="line">Test 我是静态方法</span><br></pre></td></tr></table></figure></p><ul><li>公有方法可以在类的内部和外部调用；</li><li>私有方法只能在类的内部调用；</li><li>类方法添加装饰器，通过类调用</li></ul><p>内置方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.func1() </span><br><span class="line">        self.__func2()</span><br><span class="line">        self.classFun()</span><br><span class="line">        self.staticFun()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是公有方法"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__func2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是私有方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classFun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> self.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是类方法"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticFun</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> MyClass.name,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我是静态方法"</span></span><br><span class="line"></span><br><span class="line">mc = MyClass()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test 我是公有方法</span><br><span class="line">Test 我是私有方法</span><br><span class="line">Test 我是类方法</span><br><span class="line">Test 我是静态方法</span><br></pre></td></tr></table></figure></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用python写一个memcached的启动脚本，可以参照<code>/etc/init.d/memcached</code>脚本。<br>下面是启动脚本的大体结构，下一章节详细介绍类中方法的实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''memcached rc script'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, program, args, workdir)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">self.program = program</span><br><span class="line">self.args = args</span><br><span class="line">self.workdir = workdir</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.stop()</span><br><span class="line">self.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'memcached'</span></span><br><span class="line">prog = <span class="string">'/usr/bin/memcached'</span></span><br><span class="line">args = <span class="string">'-u nobody -p 11211 -c 1024 -m 64'</span></span><br><span class="line">wd = <span class="string">'/var/tmp/memcached'</span></span><br><span class="line">pm = Process(name = name,</span><br><span class="line"> program = prog,</span><br><span class="line"> args = args,</span><br><span class="line"> workdir = wd)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">cmd = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span> IndexError, e:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Option error"</span></span><br><span class="line">sys.exit()</span><br><span class="line"><span class="keyword">if</span> cmd == <span class="string">'start'</span>:</span><br><span class="line">pm.start()</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'stop'</span>:</span><br><span class="line">pm.stop()</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'restart'</span>:</span><br><span class="line">pm.restart</span><br><span class="line"><span class="keyword">elif</span> cmd == <span class="string">'status'</span>:</span><br><span class="line">pm.status()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pm.help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'main'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的属性总结&quot;&gt;&lt;a href=&quot;#类的属性总结&quot; class=&quot;headerlink&quot; title=&quot;类的属性总结&quot;&gt;&lt;/a&gt;类的属性总结&lt;/h2&gt;&lt;p&gt;类属性相关内容如下  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类的公有属性  &lt;/li&gt;
&lt;li&gt;类的私有属性
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="rc脚本" scheme="https://rosinelan.github.io/tags/rc%E8%84%9A%E6%9C%AC/"/>
    
      <category term="属性" scheme="https://rosinelan.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="方法" scheme="https://rosinelan.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python类的内置方法和继承</title>
    <link href="https://rosinelan.github.io/2018/12/05/python%E7%B1%BB%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>https://rosinelan.github.io/2018/12/05/python类的内置方法和继承/</id>
    <published>2018-12-05T08:44:47.000Z</published>
    <updated>2018-12-05T09:10:08.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python内部类"><a href="#python内部类" class="headerlink" title="python内部类"></a>python内部类</h2><p>内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界。  </p><h3 id="内部类的实例化方法"><a href="#内部类的实例化方法" class="headerlink" title="内部类的实例化方法"></a>内部类的实例化方法</h3><ul><li>方法1 <a id="more"></a>直接使用外部类调用内部类<br><code>object_name = outclass_name.inclass_name()</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line">jack = People.Chinese()</span><br><span class="line"><span class="keyword">print</span> jack.name</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am chinese</span><br></pre></td></tr></table></figure></p><p>访问方法可以有多种<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> People.Chinese.name</span><br><span class="line"><span class="keyword">print</span> People.Chinese().name</span><br></pre></td></tr></table></figure></p><p>通过类的方法访问<br><code>People.Chinese.name</code><br>通过对象的方法访问<br><code>People.Chinese().name</code><br>对于公有属性，可以通过上述两种方式都可以。  </p><ul><li>方法2<br>先对外部类进行实例化，然后再实例化内部类。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out_name = outclass_name()</span><br><span class="line">in_name = out_name.inclass_name()</span><br><span class="line">in_name.method()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(object)</span>:</span></span><br><span class="line">        name = <span class="string">"I am chinese"</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line">jack = ren.Chinese()</span><br><span class="line"><span class="keyword">print</span> jack.name</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am chinese</span><br></pre></td></tr></table></figure></p><h3 id="类的内置方法-魔术方法"><a href="#类的内置方法-魔术方法" class="headerlink" title="类的内置方法(魔术方法)"></a>类的内置方法(魔术方法)</h3><p><code>__str__(self)</code>默认在类实例化过程中就会执行，不需要调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.People object at <span class="number">0x7f40dfcbbd90</span>&gt;</span><br></pre></td></tr></table></figure></p><p>当添加<code>__str__</code>后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is a people class'</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a people <span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure></p><ul><li>构造函数<br><code>__init__()</code><br>用于初始化类的内部状态，如果不提供，python会给出一个默认的<code>__init__</code>方法。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c=<span class="string">'white'</span>)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line"><span class="keyword">print</span> People.color</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">white</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure></p><p>使用类访问不会发生变化。<br>使用对象访问，值会根据传入的参数发生变化。  </p><ul><li>析构函数<br><code>__del__()</code><br>用于释放对象占用的资源，如果不提供，python会在后台提供默认析构函数。<br>析构函数在执行完成的最后再执行。  <h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3>python采用垃圾回收机制清理不再使用的对象：python提供gc模块释放不再使用的对象。<br>python采用“引用计数”的算法方式来处理回收，即当某个对象在其作用域内不再被其他对象引用的时候，python就自动清除对象。<br>gc模块的<code>collect()</code>可以一次性收集所有待处理的对象(gc.collect)。<h2 id="python类的继承"><a href="#python类的继承" class="headerlink" title="python类的继承"></a>python类的继承</h2><h3 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h3>继承可以重用已经存在的数据和行为，减少代码的重复编写。<br>python在类名后使用一堆括号来表示继承关系，括号中的类即为父类。<br><code>class Myclass(ParentClass)</code><br>如果父类定义了<code>__init__</code>方法，子类必须显式调用父类的<code>__init__</code>方法(父类的<strong>init</strong>参数&gt;=2的时候)。<br><code>ParentClass.__init__(self,[args...])</code><br>如果子类需要扩展父类的行为，可以添加<strong>init</strong>方法的参数。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        People.__init__(self,<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line"><span class="keyword">print</span> cn.color</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">I am a red</span><br><span class="line">I am a thinker</span><br></pre></td></tr></table></figure></p><ul><li>使用super继承父类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,c)</span>:</span></span><br><span class="line">        self.color = c      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Chinese, self).__init__(<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line"><span class="keyword">print</span> cn.color</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">I am a red</span><br></pre></td></tr></table></figure></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>python支持多重继承，即一个类可以继承多个父类。<br><code>class class_name(Parent_c1,Parent_c2,...)</code><br>注意：当父类中出现多个自定义的<code>__init__</code>方法时，多重继承只执行第一个类的<code>__int__</code>方法，其他不执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"init..."</span></span><br><span class="line">        self.dwell =<span class="string">'Earth'</span>       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"My home is %s"</span> % self.dwell</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Martian</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'red'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dwell =<span class="string">'Martian'</span>       </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(Martian,People)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cn = Chinese()</span><br><span class="line">cn.think()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I am a red</span><br><span class="line">My home <span class="keyword">is</span> Martian</span><br></pre></td></tr></table></figure></p><p>当继承更换顺序时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span><span class="params">(People,Martian)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init...</span><br><span class="line">I am a yellow</span><br><span class="line">My home <span class="keyword">is</span> Earth</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python内部类&quot;&gt;&lt;a href=&quot;#python内部类&quot; class=&quot;headerlink&quot; title=&quot;python内部类&quot;&gt;&lt;/a&gt;python内部类&lt;/h2&gt;&lt;p&gt;内部类，就是在类的内部定义的类，主要目的是为了更好的抽象现实世界。  &lt;/p&gt;
&lt;h3 id=&quot;内部类的实例化方法&quot;&gt;&lt;a href=&quot;#内部类的实例化方法&quot; class=&quot;headerlink&quot; title=&quot;内部类的实例化方法&quot;&gt;&lt;/a&gt;内部类的实例化方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方法1
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="内置方法" scheme="https://rosinelan.github.io/tags/%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    
      <category term="继承" scheme="https://rosinelan.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>python面向对象及类的属性和方法</title>
    <link href="https://rosinelan.github.io/2018/12/04/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8F%8A%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/12/04/python面向对象及类的属性和方法/</id>
    <published>2018-12-04T06:47:44.000Z</published>
    <updated>2018-12-04T07:51:45.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h2><p>面向过程：函数式编程，C程序。<br>面向对象：C++,Java,Python等。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.+TAB键    查看字符串的方法</span><br><span class="line">list. +TAB键    查看列表的方法</span><br><span class="line">tuple. +TAB键    查看元组的方法</span><br><span class="line">dict. +TAB键    查看字典的方法</span><br></pre></td></tr></table></figure></p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>类：对事物的抽象，比如：人类，球类。<br>对象：类的一个实例，比如：篮球，足球。<br>实例的说明：<br>球类可以对球的特征和行为进行抽象，然后可以实例化一个真实的球实体出来。<br>面向对象的思想：封装、继承、多态。  </p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>类把需要的变量和函数组合在一起，这种包含称为封装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br></pre></td></tr></table></figure></p><p>命名：1个单词首字母大写，多个单词首字母都大写。<br>创建对象的过程称之为实例化；当一个对象被创建之后，包含3方面的特性：对象句柄、属性和方法。<br>句柄用于区分不同的对象。<br>对象的属性和方法与类中的成员变量和成员函数对应。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = MyClass()  //创建类的一个实例(对象)，通过对象调用方法和属性</span><br></pre></td></tr></table></figure></p><h4 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">成员变量 – 属性</span><br><span class="line">成员函数 – 方法</span><br></pre></td></tr></table></figure><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> “I am function”</span><br></pre></td></tr></table></figure><p>类的方法至少有一个参数self。  </p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yellow</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br></pre></td></tr></table></figure></p><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>按使用范围：私有属性和公有属性。<br>公有属性：在类中和类外都能调用的属性。<br>私有属性：不能再类外及被类以外的函数调用。<br>定义方式：以”<strong>”双下划线开始的成员变量就是私有属性，可以通过instance._classname_attribute方式访问(不建议使用，仅用于测试)。<br>内置属性：由系统在定义类的时候默认添加的，由前后双下划线构成，`</strong>dict<strong><code>、</code></strong>module__`。<br>支持中文的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment">#encoding:utf8</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br></pre></td></tr></table></figure></p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.color = <span class="string">'black'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">ren = People()</span><br><span class="line">ren.color = <span class="string">'白色人'</span></span><br><span class="line"><span class="keyword">print</span> ren.color</span><br><span class="line">ren.think()</span><br><span class="line"><span class="comment">#print ren.__age</span></span><br><span class="line"><span class="keyword">print</span> ren._People__age</span><br><span class="line"><span class="keyword">print</span> ren.__dict__</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> * <span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.color</span><br><span class="line"><span class="keyword">print</span> <span class="string">'#'</span> *<span class="number">30</span></span><br><span class="line"><span class="keyword">print</span> People.__dict__</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">白色人</span><br><span class="line">I am a black</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'black'</span>&#125;</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">yellow</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'_People__age'</span>: <span class="number">30</span>, <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'People'</span> objects&gt;, <span class="string">'think'</span>: &lt;function think at <span class="number">0x7f95deb1bc08</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>方法的定义和函数一样，但是需要self作为第一个参数。  </p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>公有方法：在类中和类外都可以调用的。<br>私有方法：不能被类的外部调用，在方法前面加上”__”双下划线。<br>self参数：用于分区函数和类方法(必须有一个self)，self参数表示执行对象本身。<br>类方法：被classmethod()函数处理过的函数，能被类所调用，也能被对象所调用(是继承的关系)。<br>静态方法：相当于全局函数，可以被类直接调用，可以被所有实例化对象共享，通过staticmethod()定义，静态方法没有self参数。  </p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>公有方法调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.think()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am a yellow</span><br><span class="line">I am a thinker</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><ul><li>私有方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">think</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a %s"</span> % self.color</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am a thinker"</span></span><br><span class="line">        <span class="keyword">print</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"I am talking with Tom"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__talk()</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">jack.test()</span><br><span class="line">jack.__talk()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am talking <span class="keyword">with</span> Tom</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    jack.__talk()</span><br><span class="line">AttributeError: <span class="string">'People'</span> object has no attribute <span class="string">'__talk'</span></span><br></pre></td></tr></table></figure></p><ul><li>类方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Testing..."</span></span><br><span class="line"></span><br><span class="line">    cm = classmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.cm()</span><br><span class="line">People.test()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果(类方法必须经过classmethod方法处理，否则会报错如下)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Testing...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1_9_4_1.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    People.test()</span><br><span class="line">TypeError: unbound method test() must be called <span class="keyword">with</span> People instance <span class="keyword">as</span> first argument (got nothing instead)</span><br></pre></td></tr></table></figure></p><ul><li>静态方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a func"</span></span><br><span class="line"></span><br><span class="line">    sm = staticmethod(test)</span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.sm()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a func</span><br></pre></td></tr></table></figure></p><ul><li>装饰器(仅对相邻的第一个函数起作用,类方法和静态方法的简化)<br>@classmethod<br>@statucmethod<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    color = <span class="string">'yellow'</span></span><br><span class="line">    __age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a class method"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"this is a static method"</span></span><br><span class="line"></span><br><span class="line">jack = People()</span><br><span class="line">People.test()</span><br><span class="line">People.test1()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> a <span class="class"><span class="keyword">class</span> <span class="title">method</span></span></span><br><span class="line"><span class="class"><span class="title">this</span> <span class="title">is</span> <span class="title">a</span> <span class="title">static</span> <span class="title">method</span></span></span><br></pre></td></tr></table></figure></p><p>说明<br>静态方法：将类的所有属性和方法提前加载到内存。<br>动态方法：只加载调用的属性和方法至内存，未调用的不加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python面向对象&quot;&gt;&lt;a href=&quot;#python面向对象&quot; class=&quot;headerlink&quot; title=&quot;python面向对象&quot;&gt;&lt;/a&gt;python面向对象&lt;/h2&gt;&lt;p&gt;面向过程：函数式编程，C程序。&lt;br&gt;面向对象：C++,Java,Python等。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="属性" scheme="https://rosinelan.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="方法" scheme="https://rosinelan.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="类" scheme="https://rosinelan.github.io/tags/%E7%B1%BB/"/>
    
      <category term="面向对象" scheme="https://rosinelan.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python模块</title>
    <link href="https://rosinelan.github.io/2018/12/03/python%E6%A8%A1%E5%9D%97/"/>
    <id>https://rosinelan.github.io/2018/12/03/python模块/</id>
    <published>2018-12-03T09:46:23.000Z</published>
    <updated>2018-12-03T10:28:24.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>模块是python组织代码的基本方式。<br>一个python脚本可以单独运行，也可以导入到另外一个脚本中运行，当脚本被导入运行时，我们称之为模块。<br><a id="more"></a><br>所有的.py文件都可以作为一个模块导入。<br>模块名与脚本的文件名相同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.py    <span class="keyword">import</span> hello</span><br></pre></td></tr></table></figure></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>python模块可以按照目录组织为包。</p><h3 id="创建包的步骤"><a href="#创建包的步骤" class="headerlink" title="创建包的步骤"></a>创建包的步骤</h3><ol><li>创建一个名字为包的目录。</li><li>在该目录下创建一个<strong>init</strong>.py文件。</li><li>根据需要在该目录下存放脚本文件或已编译的扩展及子包。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pack.m1,pack.m2,pack.m3</span><br></pre></td></tr></table></figure></li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>当前目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># ls</span></span><br><span class="line"><span class="number">1</span>_1_1.py  <span class="number">1</span>_2_1.py  <span class="number">1</span>_3_1.py  <span class="number">1</span>_4_2.py  <span class="number">1</span>_5_1_1.py  <span class="number">1</span>_5_2_1.py  <span class="number">1</span>_8_3_1.py  wordCount.py</span><br><span class="line"><span class="number">1</span>_1_3.py  <span class="number">1</span>_2_2.py  <span class="number">1</span>_4_1.py  <span class="number">1</span>_4_4.py  <span class="number">1</span>_5_1.py    <span class="number">1</span>_5_2.py    <span class="number">1</span>_8_3.py    wordCount.pyc</span><br><span class="line">[root@linux02 advance]<span class="comment"># pwd</span></span><br><span class="line">/root/aming/advance</span><br></pre></td></tr></table></figure></p><p>首先创建<strong>init</strong>.py文件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># touch __init__.py</span></span><br></pre></td></tr></table></figure></p><p>包的名称就是上级目录的名称，此处为advance。<br>下面的第一个wordCount表示wordCount.py文件，第二个wordCount表示wordCount.py中的函数名。<br>使用方法如下</p><ul><li><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="keyword">from</span> advance <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> advance.wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: advance.wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="keyword">from</span> advance.wordCount <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="keyword">from</span> advance <span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: wordCount.wordCount(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li><li><p>方法5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">from</span> advance.wordCount <span class="keyword">import</span> wordCount <span class="keyword">as</span> wc</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: wc(<span class="string">'hello Word\n'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">11</span></span><br></pre></td></tr></table></figure></li></ul><p>备注：使用前需要将当前路径引入python中的sys.path，具体操作方法将下面的路径修改。</p><h2 id="模块位置"><a href="#模块位置" class="headerlink" title="模块位置"></a>模块位置</h2><p>sys.path<br>修改python的路径</p><ul><li><p>方法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(‘/root/aming’)</span><br></pre></td></tr></table></figure></li><li><p>方法2：编辑/root/.bashrc，新增</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=/root/aming</span><br></pre></td></tr></table></figure></li></ul><p>执行使之生效<br><code>./root/.bashrc</code>或者<code>source /root/.bashrc</code>。<br>确认sys.path是否正确被引入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: sys.path</span><br><span class="line">Out[<span class="number">2</span>]: </span><br><span class="line">[<span class="string">''</span>,</span><br><span class="line"> <span class="string">'/usr/bin'</span>,</span><br><span class="line"> <span class="string">'/root/aming'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python26.zip'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-tk'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-old'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/site-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib64/python2.6/site-packages/gtk-2.0'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python2.6/site-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python2.6/site-packages/IPython/extensions'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>统计文件字符数、单词数、行数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordCount</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = len(s)</span><br><span class="line">    words = len(s.split())</span><br><span class="line">    lines = s.count(<span class="string">'\n'</span>) </span><br><span class="line">    <span class="keyword">print</span> lines,words,chars</span><br><span class="line"></span><br><span class="line">s = open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>当引用模块时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat 1_8_3_1.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wordCount</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py </span></span><br><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>备注</p><ol><li>使用import引用模块时，模块名称不能为纯数字，建议使用有意义的名称；</li><li>使用import引用模块时，被引用模块会出现.pyc，编译之后的文件；目的是为了加快执行速度和效率；</li><li>统计行数时，假如字符串结尾有换行符\n，可能出现统计不准确的情况；<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">165</span>]: s = open(<span class="string">'/etc/hosts'</span>).read()</span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: s</span><br><span class="line">Out[<span class="number">170</span>]: <span class="string">'127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n127.0.0.1   linux02\n'</span></span><br></pre></td></tr></table></figure></li></ol><p>结尾有换行符\n，最后一个字符为空，统计行数不准确。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">169</span>]: s.split(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">169</span>]: </span><br><span class="line">[<span class="string">'127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4'</span>,</span><br><span class="line"> <span class="string">'::1         localhost localhost.localdomain localhost6 localhost6.localdomain6'</span>,</span><br><span class="line"> <span class="string">'127.0.0.1   linux02'</span>,</span><br><span class="line"> <span class="string">''</span>]</span><br></pre></td></tr></table></figure></p><p>建议使用方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">172</span>]: s.count(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">172</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p><code>wordCount.py</code>被引用之后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat 1_8_3_1.py</span></span><br><span class="line"><span class="keyword">import</span> wordCount</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""hello World</span></span><br><span class="line"><span class="string">superman"""</span></span><br><span class="line">wordCount.wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>如何在不改变wordCount.py的执行结果情况下，在1_8_3_1.py中只输出第二行结果呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># cat wordCount.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordCount</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = len(s)</span><br><span class="line">    words = len(s.split())</span><br><span class="line">    lines = s.count(<span class="string">'\n'</span>) </span><br><span class="line">    <span class="keyword">print</span> lines,words,chars</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = open(<span class="string">'/etc/passwd'</span>).read()</span><br><span class="line">    wordCount(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>备注：<code>__name__</code>为python内置变量，特点为当自身脚本执行时，输出结果为<code>__main__</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python wordCount.py</span></span><br><span class="line">__main__</span><br><span class="line"><span class="number">28</span> <span class="number">46</span> <span class="number">1322</span></span><br></pre></td></tr></table></figure></p><p>当被引用执行时，输出结果为脚本名称<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_8_3_1.py</span></span><br><span class="line">wordCount</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块说明&quot;&gt;&lt;a href=&quot;#模块说明&quot; class=&quot;headerlink&quot; title=&quot;模块说明&quot;&gt;&lt;/a&gt;模块说明&lt;/h2&gt;&lt;p&gt;模块是python组织代码的基本方式。&lt;br&gt;一个python脚本可以单独运行，也可以导入到另外一个脚本中运行，当脚本被导入运行时，我们称之为模块。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="模块" scheme="https://rosinelan.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>python内置函数</title>
    <link href="https://rosinelan.github.io/2018/11/30/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/30/python内置函数/</id>
    <published>2018-11-30T08:40:34.000Z</published>
    <updated>2018-11-30T09:14:17.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><code>_builtin_</code>表示内置函数，可直接使用。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li>abs()    返回数字的绝对值。<a id="more"></a></li><li>max()    返回数字或序列最大值。</li><li>min()    返回数字或序列最小值。</li><li>len()    返回序列长度。</li><li><p>divmod(x,y)    返回一个元组，元组第一个元素为x/y的商，第二个元素为x%y。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: divmod(<span class="number">8</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">34</span>]: (<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: divmod(<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">35</span>]: (<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>pow(x,y)    返回一个数字，x**y。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: pow(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">37</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>power(x,y,z)    返回一个数字，(x**y)%z。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">38</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: pow(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">39</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>round(x[,y])    返回一个浮点数，其中x为需转换的数字，y为精度，默认为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: <span class="keyword">print</span> round(<span class="number">12</span>)</span><br><span class="line"><span class="number">12.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: <span class="keyword">print</span> round(<span class="number">12.445</span>)</span><br><span class="line"><span class="number">12.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>)</span><br><span class="line"><span class="number">13.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">12.545</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: <span class="keyword">print</span> round(<span class="number">12.545</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">12.55</span></span><br></pre></td></tr></table></figure></li><li><p>callable()    判断一个对象是否可调用，返回布尔值。函数和类都是可被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: a = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: callable(a)</span><br><span class="line">Out[<span class="number">49</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: callable(a)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: <span class="class"><span class="keyword">class</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: callable(a)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>type()    返回对象的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">55</span>]: s = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: type(s)</span><br><span class="line">Out[<span class="number">56</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: <span class="keyword">print</span> type([])</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: <span class="keyword">print</span> type(&#123;&#125;)</span><br><span class="line">&lt;type <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>isinstance()    返回布尔值，判断对象是否为指定的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">59</span>]: s = <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: isinstance(s,list)</span><br><span class="line">Out[<span class="number">60</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: isinstance(s,str)</span><br><span class="line">Out[<span class="number">61</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: isinstance(s,(list,str,dict,tuple))</span><br><span class="line">Out[<span class="number">65</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li></ul><p>对于class的判断较为方便<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">66</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">   ....:     <span class="keyword">pass</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: a = A()</span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: isinstance(a,A)</span><br><span class="line">Out[<span class="number">68</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><ul><li>cmp(x,y)    返回数字，x &gt; y返回正数，x=y返回0，x &lt; y返回负数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: cmp(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">70</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: cmp(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">71</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: cmp(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">72</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: cmp(<span class="string">'zll'</span>,<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>字符串比较，比较字符，而不是字符串长度</p><ul><li><p>range()    返回一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">74</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>xrange()    返回一个对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: xrange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">75</span>]: xrange(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><p>xrange()结果保存在对象中，必须遍历才能读取至内存；range直接返回保存至内存，故xrange更节省资源。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: a = xrange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:<span class="keyword">print</span> i</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><ul><li>int()    转换为int类型。</li><li><p>long()    转换为long类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">80</span>]: long(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">80</span>]: <span class="number">123L</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: long(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">81</span>]: <span class="number">123L</span></span><br></pre></td></tr></table></figure></li><li><p>float()    转换为float类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">82</span>]: float(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">82</span>]: <span class="number">123.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: float(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">83</span>]: <span class="number">123.0</span></span><br></pre></td></tr></table></figure></li><li><p>complex()    转换为复数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: complex(<span class="number">123</span>)</span><br><span class="line">Out[<span class="number">84</span>]: (<span class="number">123</span>+<span class="number">0j</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: complex(<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">85</span>]: (<span class="number">123</span>+<span class="number">0j</span>)</span><br></pre></td></tr></table></figure></li><li><p>str()    转换为字符串。</p></li><li><p>list()    转换为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">89</span>]: list(<span class="string">'23444'</span>)</span><br><span class="line">Out[<span class="number">89</span>]: [<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure></li><li><p>tuple()    转换为元组。</p></li><li><p>hex()    转换为16进制，返回字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">91</span>]: hex(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">91</span>]: <span class="string">'0xa'</span></span><br></pre></td></tr></table></figure></li><li><p>oct()    转换为8进制，返回字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: oct(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">92</span>]: <span class="string">'012'</span></span><br></pre></td></tr></table></figure></li><li><p>chr()    返回当前字符对应的ANSCII码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">99</span>]: chr(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">99</span>]: <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: chr(<span class="number">65</span>)</span><br><span class="line">Out[<span class="number">100</span>]: <span class="string">'A'</span></span><br></pre></td></tr></table></figure></li><li><p>ord()    返回ANSCII码对应的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: ord(<span class="string">'\n'</span>)</span><br><span class="line">Out[<span class="number">101</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: ord(<span class="string">'A'</span>)</span><br><span class="line">Out[<span class="number">102</span>]: <span class="number">65</span></span><br></pre></td></tr></table></figure></li><li><p>eval()    字符串当做有效表达式求值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">94</span>]: eval(<span class="string">'0xa'</span>)</span><br><span class="line">Out[<span class="number">94</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: eval(<span class="string">'012'</span>)</span><br><span class="line">Out[<span class="number">95</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: eval(<span class="string">"['a','b',1]"</span>)</span><br><span class="line">Out[<span class="number">96</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><ul><li><p>str.capitalize()    字符串首字母大写并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">106</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: s.capitalize()</span><br><span class="line">Out[<span class="number">107</span>]: <span class="string">'Abc'</span></span><br></pre></td></tr></table></figure></li><li><p>str.replace(old,new[,count])    字符串中old字符串替换为new字符串，count为替换次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">113</span>]: s = <span class="string">'HexH'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>)</span><br><span class="line">Out[<span class="number">114</span>]: <span class="string">'hexh'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">115</span>]: <span class="string">'hexH'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">116</span>]: s.replace(<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">116</span>]: <span class="string">'hexh'</span></span><br></pre></td></tr></table></figure></li><li><p>str.split()    字符串拆分，默认为空格拆分，也可以自定义分隔符，返回列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">118</span>]: s = <span class="string">'hello a\tb\nc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: s.split()</span><br><span class="line">Out[<span class="number">119</span>]: [<span class="string">'hello'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">In [<span class="number">120</span>]: s = <span class="string">'192.168.1.1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: s.split()</span><br><span class="line">Out[<span class="number">121</span>]: [<span class="string">'192.168.1.1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: s.split(<span class="string">'.'</span>,<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">122</span>]: [<span class="string">'192'</span>, <span class="string">'168.1.1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">123</span>]: s.split(<span class="string">'.'</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">123</span>]: [<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>]</span><br></pre></td></tr></table></figure></li><li><p>str.join()    返回字符串，该字符串使用str连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">125</span>]: <span class="string">''</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">Out[<span class="number">125</span>]: <span class="string">'0123456789'</span></span><br><span class="line">In [<span class="number">128</span>]: <span class="string">'-'</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">Out[<span class="number">128</span>]: <span class="string">'0-1-2-3-4-5-6-7-8-9'</span></span><br></pre></td></tr></table></figure></li></ul><p>string模块<br>方法同上，但是使用方式不同，使用时需要import string。</p><h3 id="序列处理函数"><a href="#序列处理函数" class="headerlink" title="序列处理函数"></a>序列处理函数</h3><ul><li>len()</li><li>max()</li><li>min()</li><li>filter()    根据条件判断是否处理，True则返回处理后序列，False返回原序列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">131</span>]: filter(<span class="keyword">None</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,])</span><br><span class="line">Out[<span class="number">131</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">In [<span class="number">134</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   .....:     <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">   .....:         <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">   .....:     </span><br><span class="line">In [<span class="number">136</span>]: filter(f,range(<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">136</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></li></ul><p>使用匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">152</span>]: filter(<span class="keyword">lambda</span>  x: x%<span class="number">2</span> ==<span class="number">0</span> ,range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">152</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><ul><li>zip()    多个序列返回一个列表，列表包含多个序列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: l2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: zip(l1, l2)</span><br><span class="line">Out[<span class="number">139</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</span><br></pre></td></tr></table></figure></li></ul><p>用此方法可以创建字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">142</span>]: dict(zip(l1, l2))</span><br><span class="line">Out[<span class="number">142</span>]: &#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>当序列长度不一致时，取最小的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: l2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: l3 = [<span class="string">'I'</span>,<span class="string">'II'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: zip(l1, l2, l3)</span><br><span class="line">Out[<span class="number">141</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'I'</span>), (<span class="number">2</span>, <span class="string">'b'</span>, <span class="string">'II'</span>)]</span><br></pre></td></tr></table></figure></p><ul><li>map()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">143</span>]: map(<span class="keyword">None</span>, l1, l2, l3)</span><br><span class="line">Out[<span class="number">143</span>]: [(<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'I'</span>), (<span class="number">2</span>, <span class="string">'b'</span>, <span class="string">'II'</span>), (<span class="number">3</span>, <span class="string">'c'</span>, <span class="keyword">None</span>)]</span><br></pre></td></tr></table></figure></li></ul><p>使用多个序列的情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">146</span>]: <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">   .....:     <span class="keyword">return</span> x * y</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: l3 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: map(f, l1, l3)</span><br><span class="line">Out[<span class="number">149</span>]: [<span class="number">4</span>, <span class="number">10</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure></p><p>使用匿名函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">153</span>]: map(<span class="keyword">lambda</span> x, y: x * y, range(<span class="number">1</span>,<span class="number">10</span>), range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">Out[<span class="number">153</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure></p><ul><li>reduce():    根据传入reduce的函数，对序列中的元素进行处理。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">155</span>]: reduce(<span class="keyword">lambda</span> x, y: x + y,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">Out[<span class="number">155</span>]: <span class="number">21</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h3><p>相比较于for循环，列表表达式更加高效。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">156</span>]: [i*<span class="number">2</span>+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">Out[<span class="number">156</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: [i*<span class="number">2</span>+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">Out[<span class="number">157</span>]: [<span class="number">1</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内置函数&quot;&gt;&lt;a href=&quot;#内置函数&quot; class=&quot;headerlink&quot; title=&quot;内置函数&quot;&gt;&lt;/a&gt;内置函数&lt;/h2&gt;&lt;p&gt;&lt;code&gt;_builtin_&lt;/code&gt;表示内置函数，可直接使用。&lt;/p&gt;
&lt;h3 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;abs()    返回数字的绝对值。
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类型转换" scheme="https://rosinelan.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="字符串处理" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
      <category term="序列" scheme="https://rosinelan.github.io/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="列表表达式" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python匿名函数</title>
    <link href="https://rosinelan.github.io/2018/11/29/python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/29/python匿名函数/</id>
    <published>2018-11-29T09:03:34.000Z</published>
    <updated>2018-11-29T09:16:45.132Z</updated>
    
    <content type="html"><![CDATA[<h3 id="递归列出目录中的文件"><a href="#递归列出目录中的文件" class="headerlink" title="递归列出目录中的文件"></a>递归列出目录中的文件</h3><h4 id="函数讲解"><a href="#函数讲解" class="headerlink" title="函数讲解"></a>函数讲解</h4><ul><li><p>os .listdir()    列出当前目录下的内容。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: os.listdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'advance'</span>, <span class="string">'basic'</span>, <span class="string">'tmp.txt'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir()    判断是否为目录，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: os.path.isdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: os.path.isdir(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile()    判断是否为文件，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: os.path.isfile(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: os.path.isfile(<span class="string">'/root/aming/222'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: os.path.isfile(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join()    将字符连接为目录，不判断该路径是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: os.path.join(<span class="string">'root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'/root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'/root/aming/123'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="递归输出"><a href="#递归输出" class="headerlink" title="递归输出"></a>递归输出</h4><p>列出目录下所有文件，包括子目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printFiles</span><span class="params">(path)</span>:</span></span><br><span class="line">    lsdir = os.listdir(path)</span><br><span class="line">    dirs = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isdir(os.path.join(path,i))]</span><br><span class="line">    files = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isfile(os.path.join(path,i))]</span><br><span class="line">    <span class="keyword">if</span> files:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">print</span> os.path.join(path,f)</span><br><span class="line">    <span class="keyword">if</span> dirs:</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            printFiles(os.path.join(path,d))</span><br><span class="line"></span><br><span class="line">printFiles(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/root/aming/tmp.txt</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_5_1.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_4_4.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_1_3.py</span><br><span class="line">......................</span><br><span class="line">/root/aming/basic/<span class="number">2</span>_3_2.py</span><br></pre></td></tr></table></figure></p><p>注意：当上述文件中if files:和if dirs:判断调换位置，输出结果将会发生变化，可自行尝试。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>关键字<code>lambda</code>表示匿名函数。<br>lambda函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。<br>匿名函数只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><h3 id="实例对比"><a href="#实例对比" class="headerlink" title="实例对比"></a>实例对比</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line">fun(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>更改为lambda函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="keyword">lambda</span> x, y:x * y</span><br><span class="line">r(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>lambda语句中，冒号前是参数，可以有多个，逗号隔开；冒号后是返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: r = <span class="keyword">lambda</span> x, y:x*y</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: r(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>lambda语句构建的其实是一个函数对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: r</span><br><span class="line">Out[<span class="number">28</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>带有&lt; &gt;这种都是对象。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用lambda可以省去定义函数的过程，让代码更精简。<br>对于一些抽象的，不会被别的地方重复使用的函数，使用lambda不需要考虑命名的问题。<br>使用lambda有些时候让代码更容易理解。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li>reduce()函数<br>对序列进行操作，具体操作由lambda函数定义，定义的函数必须为2元计算。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: reduce(<span class="keyword">lambda</span> x, y:x + y, range(<span class="number">1</span>,<span class="number">101</span>))</span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">5050</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;递归列出目录中的文件&quot;&gt;&lt;a href=&quot;#递归列出目录中的文件&quot; class=&quot;headerlink&quot; title=&quot;递归列出目录中的文件&quot;&gt;&lt;/a&gt;递归列出目录中的文件&lt;/h3&gt;&lt;h4 id=&quot;函数讲解&quot;&gt;&lt;a href=&quot;#函数讲解&quot; class=&quot;headerlink&quot; title=&quot;函数讲解&quot;&gt;&lt;/a&gt;函数讲解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;os .listdir()    列出当前目录下的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="匿名函数" scheme="https://rosinelan.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python函数递归调用</title>
    <link href="https://rosinelan.github.io/2018/11/28/python%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
    <id>https://rosinelan.github.io/2018/11/28/python函数递归调用/</id>
    <published>2018-11-28T10:10:12.000Z</published>
    <updated>2018-11-28T10:18:01.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数递归调用"><a href="#函数递归调用" class="headerlink" title="函数递归调用"></a>函数递归调用</h2><p>函数自己调用自己。<br>递归必须有最后的默认结果，如下例中的if n == 0。<br>递归参数必须向默认结果收敛，如下例中的factorial(n-1)。<br><a id="more"></a></p><h2 id="递归调用实例"><a href="#递归调用实例" class="headerlink" title="递归调用实例"></a>递归调用实例</h2><h3 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h3><p>输入数字，得到该数字的阶乘</p><h4 id="循环方式"><a href="#循环方式" class="headerlink" title="循环方式"></a>循环方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    sum = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        sum *= i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">x = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(x)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input a number:<span class="number">5</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure></p><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">x = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(x)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input a number:<span class="number">5</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure></p><h3 id="递归列出目录中的文件"><a href="#递归列出目录中的文件" class="headerlink" title="递归列出目录中的文件"></a>递归列出目录中的文件</h3><h4 id="函数讲解"><a href="#函数讲解" class="headerlink" title="函数讲解"></a>函数讲解</h4><ul><li><p>os .listdir()    列出当前目录下的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: os.listdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'advance'</span>, <span class="string">'basic'</span>, <span class="string">'tmp.txt'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir()    判断是否为目录，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: os.path.isdir(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: os.path.isdir(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile()    判断是否为文件，是，返回True；不是或不存在，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: os.path.isfile(<span class="string">'/root/aming'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: os.path.isfile(<span class="string">'/root/aming/222'</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: os.path.isfile(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join()    将字符连接为目录，不判断该路径是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: os.path.join(<span class="string">'root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'tmp.txt'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'/root/aming/tmp.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.path.join(<span class="string">'/root'</span>,<span class="string">'aming'</span>,<span class="string">'123'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'/root/aming/123'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="递归输出"><a href="#递归输出" class="headerlink" title="递归输出"></a>递归输出</h4><p>列出目录下所有文件，包括子目录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printFiles</span><span class="params">(path)</span>:</span></span><br><span class="line">    lsdir = os.listdir(path)</span><br><span class="line">    dirs = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isdir(os.path.join(path,i))]</span><br><span class="line">    files = [i <span class="keyword">for</span> i <span class="keyword">in</span> lsdir <span class="keyword">if</span> os.path.isfile(os.path.join(path,i))]</span><br><span class="line">    <span class="keyword">if</span> files:</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">print</span> os.path.join(path,f)</span><br><span class="line">    <span class="keyword">if</span> dirs:</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            printFiles(os.path.join(path,d))</span><br><span class="line"></span><br><span class="line">printFiles(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/root/aming/tmp.txt</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_5_1.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_4_4.py</span><br><span class="line">/root/aming/advance/<span class="number">1</span>_1_3.py</span><br><span class="line">......................</span><br><span class="line">/root/aming/basic/<span class="number">2</span>_3_2.py</span><br></pre></td></tr></table></figure></p><p>注意：当上述文件中if files:和if dirs:判断调换位置，输出结果将会发生变化，可自行尝试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数递归调用&quot;&gt;&lt;a href=&quot;#函数递归调用&quot; class=&quot;headerlink&quot; title=&quot;函数递归调用&quot;&gt;&lt;/a&gt;函数递归调用&lt;/h2&gt;&lt;p&gt;函数自己调用自己。&lt;br&gt;递归必须有最后的默认结果，如下例中的if n == 0。&lt;br&gt;递归参数必须向默认结果收敛，如下例中的factorial(n-1)。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="递归" scheme="https://rosinelan.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>python函数变量和返回值</title>
    <link href="https://rosinelan.github.io/2018/11/27/python%E5%87%BD%E6%95%B0%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>https://rosinelan.github.io/2018/11/27/python函数变量和返回值/</id>
    <published>2018-11-27T09:16:00.000Z</published>
    <updated>2018-11-27T09:37:58.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h2><p>函数变量分为局部变量和全局变量。任何变量都有特定作用域。<br>在函数中定义的变量一般只能在该函数内部使用，属于局部变量。<br><a id="more"></a><br>在一个文件顶部定义的变量可以供文件中的任何函数调用，属于全局变量。</p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>全局变量在函数内部只能print，不可进行操作；局部变量在函数外部不可见；使用global关键字声明为全局变量，则可以进行操作或者外部使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">global</span> y</span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fun()</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"><span class="keyword">print</span> y</span><br></pre></td></tr></table></figure></p><p>此处x为全局变量，若不进行global声明，x += 1报错；y为局部变量，若不进行global声明，print y报错。</p><h3 id="locals-函数"><a href="#locals-函数" class="headerlink" title="locals()函数"></a>locals()函数</h3><p>返回一个字典，字典内容为当前可见的变量。</p><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>函数被调用后会返回一个特定的值；函数调用后默认返回<code>None</code>。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>返回值可以是任何类型。<br>return执行后，函数终止。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello world!"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> fun()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">abc</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><h3 id="return和print的区别"><a href="#return和print的区别" class="headerlink" title="return和print的区别"></a>return和print的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s.isdigit():</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'/proc'</span>):</span><br><span class="line">    <span class="keyword">if</span> isNum(i):</span><br><span class="line">        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><h3 id="多类型传值"><a href="#多类型传值" class="headerlink" title="多类型传值"></a>多类型传值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br></pre></td></tr></table></figure><p>传入元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fun(*t)</span><br><span class="line">fun(<span class="number">2</span>,*t)</span><br></pre></td></tr></table></figure></p><p>传入字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;‘x’:<span class="number">1</span>,.’y’:<span class="number">3</span>,’z’:<span class="number">5</span>&#125;</span><br><span class="line">fun(**dic)</span><br></pre></td></tr></table></figure></p><h3 id="冗余参数"><a href="#冗余参数" class="headerlink" title="冗余参数"></a>冗余参数</h3><p>命名参数<br>多余参数存到元组<br>默认参数存到字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">'c'</span>,<span class="string">'d'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="keyword">print</span> args</span><br><span class="line">    <span class="keyword">print</span> kwargs</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>,[<span class="number">1</span>,<span class="number">2</span>,],*t,a=<span class="number">3</span>,**&#123;<span class="string">'b'</span>:<span class="number">11</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>], <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">11</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数变量&quot;&gt;&lt;a href=&quot;#函数变量&quot; class=&quot;headerlink&quot; title=&quot;函数变量&quot;&gt;&lt;/a&gt;函数变量&lt;/h2&gt;&lt;p&gt;函数变量分为局部变量和全局变量。任何变量都有特定作用域。&lt;br&gt;在函数中定义的变量一般只能在该函数内部使用，属于局部变量。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="变量" scheme="https://rosinelan.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="返回值" scheme="https://rosinelan.github.io/tags/%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>python函数定义及默认参数</title>
    <link href="https://rosinelan.github.io/2018/11/26/python%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%8F%8A%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/11/26/python函数定义及默认参数/</id>
    <published>2018-11-26T10:11:44.000Z</published>
    <updated>2018-11-26T10:24:12.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><p>函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。<br>函数调用就是通过函数名在程序的不同地方多次执行。<br>函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。<br><a id="more"></a><br>使用函数可以降低编程难度(将大问题划分为多个小问题)；可以实现代码重用，提高效率。</p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><p>def 函数名([参数列表]):</p><p>函数名首字母小写，其余单词首字母大写</p><h3 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h3><p>函数名([参数])</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>判断键盘输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_Is_Num</span><span class="params">()</span>:</span></span><br><span class="line">    sth = raw_input(<span class="string">"Please input something:"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> type(int(sth)) == type(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s is a number"</span> %sth</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is not a number"</span> %sth</span><br><span class="line"></span><br><span class="line">fun_Is_Num()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:www</span><br><span class="line">www <span class="keyword">is</span> <span class="keyword">not</span> a number</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_3.py </span></span><br><span class="line">Please input something:<span class="number">12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number</span><br></pre></td></tr></table></figure></p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>参数分为形式参数和实际参数。<br>在定义函数时，函数名后面括号中的变量名称叫做形式参数。<br>在调用函数时，函数名后面括号中的变量名称叫做实际参数。</p><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>判断输入是否为数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">print</span> <span class="string">"%s is not a number."</span> %s</span><br><span class="line">           sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s is a number."</span> %s</span><br><span class="line"></span><br><span class="line">isNum(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">is</span> a number.</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_2_1.py 12ffff</span></span><br><span class="line"><span class="number">12</span>ffff <span class="keyword">is</span> <span class="keyword">not</span> a number.</span><br></pre></td></tr></table></figure></p><h4 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a>sys.argv</h4><p>返回一个列表，其中<code>argv[0]</code>表示文件路径，后面的依次为参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> sys.argv</span><br><span class="line"></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>]</span><br><span class="line">[root@linux02 advance]<span class="comment"># python 1_1_1.py 1 b e</span></span><br><span class="line">[<span class="string">'1_1_1.py'</span>, <span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>]</span><br><span class="line">[root@linux02 ~]<span class="comment"># python /root/aming/advance/1_1_1.py 2</span></span><br><span class="line">[<span class="string">'/root/aming/advance/1_1_1.py'</span>, <span class="string">'2'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>打印系统所有的PID，要求从/proc读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNum</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#           print "%s is not a number." %s</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> s, </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'/proc'</span>):</span><br><span class="line">    isNum(i)</span><br></pre></td></tr></table></figure></p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数必须连续设置，直至最后一个参数，中间不可间断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">10</span>,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z)</span>:</span>    错误</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y,z=<span class="number">10</span>)</span>    错误</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y=<span class="number">8</span>,z=<span class="number">7</span>)</span>:</span>    正确</span><br></pre></td></tr></table></figure></p><p>调用函数时，对于已经给的参数从左向右进行匹配。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python函数&quot;&gt;&lt;a href=&quot;#python函数&quot; class=&quot;headerlink&quot; title=&quot;python函数&quot;&gt;&lt;/a&gt;python函数&lt;/h2&gt;&lt;p&gt;函数是完成特定功能的一个语句组，这组语句可以作为一个单位使用，并且给它取一个名字。&lt;br&gt;函数调用就是通过函数名在程序的不同地方多次执行。&lt;br&gt;函数分为预定义函数(可以直接使用)和自定义函数(用户自己编写)。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="函数" scheme="https://rosinelan.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="参数" scheme="https://rosinelan.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="默认参数" scheme="https://rosinelan.github.io/tags/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python文件及数据类型转换</title>
    <link href="https://rosinelan.github.io/2018/11/23/python%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://rosinelan.github.io/2018/11/23/python文件及数据类型转换/</id>
    <published>2018-11-23T08:18:45.000Z</published>
    <updated>2018-11-23T08:40:09.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>python内置函数<code>open()</code>进行文件操作，默认使用<code>r</code>方式打开文件。<br><a id="more"></a><br>操作示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = open(‘/tmp/tmp.txt’,’w’)</span><br><span class="line">fd.write(“<span class="number">123</span>”)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure></p><p>其他打开方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r    读方式打开(文件不存在报错)</span><br><span class="line">w    写方式打开(文件不存在会新建，存在会被覆盖)</span><br><span class="line">a    追加模式(文件不存在会创建)</span><br><span class="line">r+    读写模式打开</span><br><span class="line">w+    读写模式打开</span><br><span class="line">a+    读写模式打开</span><br><span class="line">rb    二进制读模式</span><br><span class="line">wb    二进制写模式</span><br><span class="line">ab    二进制追加模式</span><br><span class="line">rb+    二进制读写模式打开</span><br><span class="line">wb+    二进制读写模式打开</span><br><span class="line">ab+    二进制读写模式打开</span><br></pre></td></tr></table></figure></p><p><code>w</code>方式打开文件，原文件将被覆盖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: fd.write(<span class="string">'1234\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>a</code>方式打开文件，追加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: fd.write(<span class="string">'5678\n'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p>文件读取方法</p><ul><li>fd.read()    返回字符串</li><li>fd.readline()    返回字符串</li><li>fd.readlines()    返回列表</li></ul><p><code>fd.read()</code>    返回字符串，读取文件所有内容，再次读取时返回空<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: fd.read()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'1234\n5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: fd.read()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readline()</code>    返回字符串，按行顺序读取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'1234\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'5678\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: fd.readline()</span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><p><code>fd.readlines()</code>    返回列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: fd.readlines()</span><br><span class="line">Out[<span class="number">30</span>]: [<span class="string">'1234\n'</span>, <span class="string">'5678\n'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: fd.close()</span><br></pre></td></tr></table></figure></p><h3 id="文件遍历"><a href="#文件遍历" class="headerlink" title="文件遍历"></a>文件遍历</h3><h4 id="for循环遍历文件"><a href="#for循环遍历文件" class="headerlink" title="for循环遍历文件"></a>for循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="comment">#for line in fd.readlines():</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line"><span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>读取方式有2种，分别为<br><code>for line in fd.realines()</code><br><code>for line in fd</code><br>对于大文件进行遍历，建议使用第二种方法，第一种会创建列表，需要占用大量内存；第二种则不会。</p><h4 id="while循环遍历文件"><a href="#while循环遍历文件" class="headerlink" title="while循环遍历文件"></a>while循环遍历文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">'/root/aming/tmp.txt'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = fd.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> line,</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h4 id="with-open-用法示例"><a href="#with-open-用法示例" class="headerlink" title="with open 用法示例"></a>with open 用法示例</h4><p>使用此方式打开文件，不用再次调用fd.close()关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/aming/tmp.txt'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line = fd.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span> line,</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br></pre></td></tr></table></figure></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>统计系统free内存和所占百分比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/proc/meminfo'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">for</span> free <span class="keyword">in</span> fd:</span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemTotal'</span>):</span><br><span class="line">            total = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> free.startswith(<span class="string">'MemFree'</span>):</span><br><span class="line">            free = free.split()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(total)/<span class="number">1024.0</span>)+<span class="string">'M'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%.2f"</span> %(int(free)/float(total))+<span class="string">'%'</span></span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">557.22</span>M</span><br><span class="line"><span class="number">1862.21</span>M</span><br><span class="line"><span class="number">0.30</span>%</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>16进制转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: int(<span class="string">'a'</span>,<span class="number">16</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为16进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: hex(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'0xa'</span></span><br></pre></td></tr></table></figure></p><p>10进制转换为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: str(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'10'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为10进制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: int(<span class="string">'10'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>计算MAC地址,已知当前MAC地址，计算下一个MAC地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">macaddr = <span class="string">'00:0C:29:A5:62:0A'</span></span><br><span class="line">prefix_mac = macaddr[:<span class="number">-3</span>]</span><br><span class="line">last_two = macaddr[<span class="number">-2</span>:]</span><br><span class="line">plus_one = int(last_two, <span class="number">16</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> plus_one <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    new_last_two = hex(plus_one)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> len(new_last_two) == <span class="number">1</span>:</span><br><span class="line">        new_last_two = <span class="string">'0'</span> + new_last_two</span><br><span class="line">new_mac = prefix_mac + <span class="string">':'</span> + new_last_two</span><br><span class="line"><span class="keyword">print</span> new_mac.upper()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:A5:<span class="number">62</span>:<span class="number">0</span>B</span><br></pre></td></tr></table></figure></p><h3 id="元组字典列表转换"><a href="#元组字典列表转换" class="headerlink" title="元组字典列表转换"></a>元组字典列表转换</h3><p>字符串转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: l = list(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>列表转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: l</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="string">''</span>.join(l)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>字符串转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: t = tuple(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为字符串    ‘’.join()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: t</span><br><span class="line">Out[<span class="number">22</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="string">''</span>.join(t)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'abc'</span></span><br></pre></td></tr></table></figure></p><p>列表转换为元组    tuple()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: l</span><br><span class="line">Out[<span class="number">24</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: tuple(l)</span><br><span class="line">Out[<span class="number">25</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></p><p>元组转换为列表    list()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: t</span><br><span class="line">Out[<span class="number">26</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: list(t)</span><br><span class="line">Out[<span class="number">27</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p>字典转换为列表    字典的items()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: dic = &#123;<span class="string">'a'</span> : <span class="number">1</span>, <span class="string">'b'</span> : <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: dic.items()</span><br><span class="line">Out[<span class="number">29</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure></p><p>列表转换为字典    dict()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: l1</span><br><span class="line">Out[<span class="number">32</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: dict(l1)</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;p&gt;python内置函数&lt;code&gt;open()&lt;/code&gt;进行文件操作，默认使用&lt;code&gt;r&lt;/code&gt;方式打开文件。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="类型转换" scheme="https://rosinelan.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="文件" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制之if</title>
    <link href="https://rosinelan.github.io/2018/11/21/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8Bif/"/>
    <id>https://rosinelan.github.io/2018/11/21/python流程控制之if/</id>
    <published>2018-11-21T08:26:47.000Z</published>
    <updated>2018-11-21T11:13:18.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><a id="more"></a> <p>缩进使用4个空格，不建议使用TAB键。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>键盘输入数字，&gt;90输出A,&gt;80输出B，&gt;=70输出C，&lt;70输出D。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat if.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">score = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Very Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Good'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'pass'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'D'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'not pass'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br></pre></td></tr></table></figure></p><p>逻辑值包含2个量。  </p><ul><li>True：表示非空的量，所有非零数。  </li><li>False：表示0，none，空的量等。  <h2 id="if实例"><a href="#if实例" class="headerlink" title="if实例"></a>if实例</h2></li><li><p>输入三个整数x,y,z，请把这三个数由小到大输出。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    list1.append(int(input(<span class="string">'&#123;&#125;:'</span>.format(i))))</span><br><span class="line">print(list1)</span><br><span class="line">x = min(list1)</span><br><span class="line">list1.remove(x)</span><br><span class="line">z = max(list1)</span><br><span class="line">y = list1[<span class="number">0</span>]</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure></li><li><p>企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line"><span class="keyword">if</span> I &gt;= <span class="number">100</span>:</span><br><span class="line">    A = (I<span class="number">-100</span>) * <span class="number">0.01</span> + <span class="number">3.95</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">60</span>:</span><br><span class="line">    A = (I - <span class="number">60</span>)* <span class="number">0.015</span> + <span class="number">3.35</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">40</span>:</span><br><span class="line">    A = (I - <span class="number">40</span>)*<span class="number">0.03</span> + <span class="number">2.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">20</span>:</span><br><span class="line">    A = (I - <span class="number">20</span>)*<span class="number">0.05</span> + <span class="number">1.75</span></span><br><span class="line"><span class="keyword">elif</span> I &gt;= <span class="number">10</span>:</span><br><span class="line">    A = (I - <span class="number">10</span>)*<span class="number">0.075</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    A = I*<span class="number">0.1</span></span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></li></ul><p>更简洁的写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I = int(input(<span class="string">'Enter the profit:'</span>))</span><br><span class="line">arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line">rat = [<span class="number">0.01</span>, <span class="number">0.015</span>, <span class="number">0.03</span>, <span class="number">0.05</span>, <span class="number">0.075</span>, <span class="number">0.1</span>]</span><br><span class="line">A = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> I &gt; arr[idx]:</span><br><span class="line">        A += (I-arr[idx])*rat[idx]</span><br><span class="line">        I = arr[idx]</span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h2&gt;&lt;h3 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; expression:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="流程控制" scheme="https://rosinelan.github.io/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
  </entry>
  
  <entry>
    <title>python流程控制for while</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6for-while/"/>
    <id>https://rosinelan.github.io/2018/11/16/python流程控制for-while/</id>
    <published>2018-11-16T09:32:01.000Z</published>
    <updated>2018-11-22T10:36:13.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="for-序列"><a href="#for-序列" class="headerlink" title="for 序列"></a>for 序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line"><span class="keyword">print</span> i,</span><br></pre></td></tr></table></figure><a id="more"></a><p>print默认输出每行都带换行符，加逗号可以抑制换行符。</p><ul><li><p>tange()函数，返回列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> i</span><br></pre></td></tr></table></figure></li><li><p>列表重写(列表表达式)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>实例<br>计算1+2+….+100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum = sum + i</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></li></ul><p><code>xrange()</code>函数返回对象，不占用内存资源，比<code>range()</code>更快更高效。</p><h3 id="for-字典"><a href="#for-字典" class="headerlink" title="for 字典"></a>for 字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: dic1 = dict.fromkeys(<span class="string">'abcde'</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: dic1</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">'a'</span>: <span class="number">100</span>, <span class="string">'b'</span>: <span class="number">100</span>, <span class="string">'c'</span>: <span class="number">100</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'e'</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1:<span class="keyword">print</span> i,dic1[i]</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> i</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'e'</span>, <span class="number">100</span>)</span><br><span class="line">(<span class="string">'d'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> v,k <span class="keyword">in</span> dic1.items():<span class="keyword">print</span> v,k</span><br><span class="line">a <span class="number">100</span></span><br><span class="line">c <span class="number">100</span></span><br><span class="line">b <span class="number">100</span></span><br><span class="line">e <span class="number">100</span></span><br><span class="line">d <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>乘法口诀实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> “%sx%s” %(j, i, j*i),</span><br><span class="line">    <span class="keyword">print</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环的退出"><a href="#循环的退出" class="headerlink" title="循环的退出"></a>循环的退出</h2><ul><li>for<br>循环正常结束才会执行else。</li><li>if<br>出现多个时，每个都会判断。</li><li>elif<br>当前面有if满足条件时，该条件不再判断。</li><li>break<br>直接退出循环，不再执行。</li><li>continue<br>退出该次循环，执行下一次循环。</li><li>pass<br>占位符，无意义</li><li>sys.exit()<br>退出整个脚本<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_5.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">7</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"main end"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hahaha"</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_1_5.py </span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><ul><li>系统生成一个20以内的随机整数<br>玩家有6次机会进行猜猜看，每次猜测都有反馈(猜大了，猜小了，猜对了，结束)<br>6次中，猜对了，玩家赢了<br>否则系统赢<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 2_1_6.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">digt = random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span> digt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    in_num = int(raw_input(<span class="string">"Please input a number:"</span>))</span><br><span class="line">    <span class="keyword">if</span> in_num &gt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too big;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num &lt; digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"too small;"</span></span><br><span class="line">    <span class="keyword">elif</span> in_num == digt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"you are right."</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"have no change,system win!"</span></span><br><span class="line"><span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"congratulation!You win!"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>for循环用在有次数的循环上。<br>while循环用在有条件的控制上。<br>while循环，直到表达式为假才退出；表达式是一个逻辑表达式，必须返回一个True或False。<br>while循环后的else用法同for循环，当while条件正常结束时执行，否则不执行。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="number">2</span>_2_2.py</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">in_put = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> in_put != <span class="string">"q"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line">    in_put = raw_input(<span class="string">"Please input something,q for quit:"</span>)</span><br><span class="line"><span class="comment">#    if in_put == ''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> in_put:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> in_put == <span class="string">"quit"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"continue"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"world"</span></span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2_2_2.py </span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:a</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:quit</span><br><span class="line">hello</span><br><span class="line">Please input something,q <span class="keyword">for</span> quit:q</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure></p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><ul><li>有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？<br>程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去  掉不满足条件的排列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span>((a != b) <span class="keyword">and</span> (a != c) <span class="keyword">and</span> (b != c)):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                d = a + b*<span class="number">10</span> + c*<span class="number">100</span></span><br><span class="line">                list1.append(d)</span><br><span class="line">print(<span class="string">"满足条件的三位数共有&#123;&#125;个，如下列表所示"</span>.format(i))</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">满足条件的三位数共有<span class="number">24</span>个，如下列表所示</span><br><span class="line">[<span class="number">321</span>, <span class="number">421</span>, <span class="number">231</span>, <span class="number">431</span>, <span class="number">241</span>, <span class="number">341</span>, <span class="number">312</span>, <span class="number">412</span>, <span class="number">132</span>, <span class="number">432</span>, <span class="number">142</span>, <span class="number">342</span>, <span class="number">213</span>, <span class="number">413</span>, <span class="number">123</span>, <span class="number">423</span>, <span class="number">143</span>, <span class="number">243</span>, <span class="number">214</span>, <span class="number">314</span>, <span class="number">124</span>, <span class="number">324</span>, <span class="number">134</span>, <span class="number">234</span>]</span><br></pre></td></tr></table></figure></p><ul><li>打印出所有的“水仙花数”,所谓“水仙花数”是指一个三位数,其各位数字立方和等于该数本身。例如：153是一个“水仙花数”,因为153=1的三次方＋5的三次方＋3的三次方。<br>程序分析：利用for循环控制100-999个数,每个数分解出个位,十位,百位。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    str1 = str(i)</span><br><span class="line">    a, b , c = str1[<span class="number">0</span>], str1[<span class="number">1</span>], str1[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span>(int(a)**<span class="number">3</span> + int(b)**<span class="number">3</span> + int(c)**<span class="number">3</span> == i):</span><br><span class="line">        list2.append(i)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">153</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">407</span>]</span><br></pre></td></tr></table></figure></p><ul><li>两个乒乓球队进行比赛,各出三人。甲队为a,b,c三人,乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比,c说他不和x,z比,请编程序找出三队赛手的名单。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">list1 = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(list1):</span><br><span class="line">    <span class="keyword">if</span>(i[<span class="number">0</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'x'</span> <span class="keyword">and</span> i[<span class="number">2</span>] != <span class="string">'z'</span>):</span><br><span class="line">        print(<span class="string">'a vs &#123;0&#125;, b vs &#123;1&#125;, c vs &#123;2&#125;'</span>.format(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a vs z, b vs x, c vs y</span><br></pre></td></tr></table></figure></p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><ul><li>将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。<br>程序分析：对n进行分解质因数,应先找到一个最小的质数i,然后按下述步骤完成：<br>(1)如果分解后商为1,则说明分解质因数的过程已经结束,打印出即可。<br>(2)如果商不为1,则应打印出i的值,并用n除以i的商,作为新的正整数进行分解,重复执行第一步。<br>(3)如果n不能被i整除,则i的值加1,重复执行第一步。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(<span class="string">"input a integer:"</span>))</span><br><span class="line">list1 = [num]</span><br><span class="line">str1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(num+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            list1.append(i)</span><br><span class="line">            num = num / i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(list1)):</span><br><span class="line">    str1 += str(list1[j])</span><br><span class="line">print(<span class="string">"&#123;0&#125;="</span>.format(list1[<span class="number">0</span>]), end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'*'</span>.join(str1))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input a integer:<span class="number">175</span></span><br><span class="line"><span class="number">175</span>=<span class="number">5</span>*<span class="number">5</span>*<span class="number">7</span></span><br></pre></td></tr></table></figure></p><ul><li>猴子吃桃问题：猴子第一天摘下若干个桃子,当即吃了一半,还不瘾,又多吃了一个，第二天早上又将剩下的桃子吃掉一半,又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时,见只剩下一个桃子了。求第一天共摘了多少。<br>程序分析：采取逆向思维的方法,从后往前推断。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    p = (p+<span class="number">1</span>)*<span class="number">2</span></span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1534</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;h3 id=&quot;for-序列&quot;&gt;&lt;a href=&quot;#for-序列&quot; class=&quot;headerlink&quot; title=&quot;for 序列&quot;&gt;&lt;/a&gt;for 序列&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; list1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
  </entry>
  
  <entry>
    <title>python字典</title>
    <link href="https://rosinelan.github.io/2018/11/16/python%E5%AD%97%E5%85%B8/"/>
    <id>https://rosinelan.github.io/2018/11/16/python字典/</id>
    <published>2018-11-16T09:31:49.000Z</published>
    <updated>2018-11-21T10:55:30.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h2><p>字典是python中唯一的映射类型(哈希表)。<br>字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: type(dic)</span><br><span class="line">Out[<span class="number">2</span>]: dict</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: dic</span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="number">1</span>: <span class="number">123</span>, <span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><ul><li><p>keys()<br>返回列表，内容为字典的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dic.keys()</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'a'</span>, <span class="number">1</span>, (<span class="string">'a'</span>, <span class="string">'b'</span>)]</span><br></pre></td></tr></table></figure></li><li><p>values()<br>返回列表，内容为字典中的value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: dic.values()</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">123</span>, <span class="string">'hello'</span>]</span><br></pre></td></tr></table></figure></li><li><p>items()<br>返回列表，内容为字典的键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dic = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">123</span>,(<span class="string">'a'</span>,<span class="string">'b'</span>):<span class="string">'hello'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dic.items()</span><br><span class="line">Out[<span class="number">9</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">123</span>), ((<span class="string">'a'</span>, <span class="string">'b'</span>), <span class="string">'hello'</span>)]</span><br></pre></td></tr></table></figure></li></ul><h2 id="字典练习"><a href="#字典练习" class="headerlink" title="字典练习"></a>字典练习</h2><p>从键盘读取输入，存入字典，输出。</p><h3 id="输出方式1"><a href="#输出方式1" class="headerlink" title="输出方式1"></a>输出方式1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">print</span> info</span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:mike</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">&#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'name'</span>: <span class="string">'mike'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="输出方式2"><a href="#输出方式2" class="headerlink" title="输出方式2"></a>输出方式2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:tom</span><br><span class="line">Please input your age:<span class="number">20</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">(<span class="string">'gender'</span>, <span class="string">'M'</span>)</span><br><span class="line">(<span class="string">'age'</span>, <span class="string">'20'</span>)</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'tom'</span>)</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式3"><a href="#输出方式3" class="headerlink" title="输出方式3"></a>输出方式3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> k,v</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender M</span><br><span class="line">age <span class="number">33</span></span><br><span class="line">name Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h3 id="输出方式4"><a href="#输出方式4" class="headerlink" title="输出方式4"></a>输出方式4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@linux02 ~]<span class="comment"># cat zidian.py</span></span><br><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">name = raw_input(<span class="string">'Please input your name:'</span>)</span><br><span class="line">age = raw_input(<span class="string">'Please input your age:'</span>)</span><br><span class="line">gender = raw_input(<span class="string">'Please input your gender(M/F):'</span>)</span><br><span class="line">info[<span class="string">'name'</span>] = name</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">info[<span class="string">'gender'</span>] = gender</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'%s: %s'</span> %(k,v)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'main end'</span></span><br><span class="line">[root@linux02 ~]<span class="comment"># python zidian.py</span></span><br><span class="line">Please input your name:Mike</span><br><span class="line">Please input your age:<span class="number">33</span></span><br><span class="line">Please input your gender(M/F):M</span><br><span class="line">gender: M</span><br><span class="line">age: <span class="number">33</span></span><br><span class="line">name: Mike</span><br><span class="line">main end</span><br></pre></td></tr></table></figure><h2 id="字典实例"><a href="#字典实例" class="headerlink" title="字典实例"></a>字典实例</h2><ul><li>现有一个字典dict1 保存的是小写字母a-z对应的ASCII码<br>dict1 = {‘a’: 97, ‘c’: 99, ‘b’: 98, ‘e’: 101, ‘d’: 100, ‘g’: 103, ‘f’: 102, ‘i’: 105, ‘h’: 104, ‘k’: 107, ‘j’: 106, ‘m’: 109, ‘l’: 108, ‘o’: 96, ‘n’: 110, ‘q’: 113, ‘p’: 112, ‘s’: 115, ‘r’: 114, ‘u’: 117, ‘t’: 116, ‘w’: 119, ‘v’: 118, ‘y’: 121, ‘x’: 120, ‘z’: 122}<br>1） 将该字典按照ASCII码的值排序<br>2） 有一个字母的ASCII错了，修改为正确的值，并重新排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: dict1 = &#123;<span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">96</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'o'</span>, <span class="number">96</span>), (<span class="string">'a'</span>, <span class="number">97</span>), (<span class="string">'b'</span>, <span class="number">98</span>), (<span class="string">'c'</span>, <span class="number">99</span>), (<span class="string">'d'</span>, <span class="number">100</span>), (<span class="string">'e'</span>, <span class="number">101</span>), (<span class="string">'f'</span>, <span class="number">102</span>), (<span class="string">'g'</span>, <span class="number">103</span>), (<span class="string">'h'</span>, <span class="number">104</span>), (<span class="string">'i'</span>, <span class="number">105</span>), (<span class="string">'j'</span>, <span class="number">106</span>), (<span class="string">'k'</span>, <span class="number">107</span>), (<span class="string">'l'</span>, <span class="number">108</span>), (<span class="string">'m'</span>, <span class="number">109</span>), (<span class="string">'n'</span>, <span class="number">110</span>), (<span class="string">'p'</span>, <span class="number">112</span>), (<span class="string">'q'</span>, <span class="number">113</span>), (<span class="string">'r'</span>, <span class="number">114</span>), (<span class="string">'s'</span>, <span class="number">115</span>), (<span class="string">'t'</span>, <span class="number">116</span>), (<span class="string">'u'</span>, <span class="number">117</span>), (<span class="string">'v'</span>, <span class="number">118</span>), (<span class="string">'w'</span>, <span class="number">119</span>), (<span class="string">'x'</span>, <span class="number">120</span>), (<span class="string">'y'</span>, <span class="number">121</span>), (<span class="string">'z'</span>, <span class="number">122</span>)]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="keyword">if</span> j != ord(i):</span><br><span class="line">        print(<span class="string">"&#123;0&#125;'s value is not correct,shoud be &#123;1&#125;"</span>.format(i, ord(i)))</span><br><span class="line">        dict1[i] = ord(i)</span><br><span class="line"><span class="keyword">print</span> sorted(dict1.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o<span class="string">'s value is not correct,shoud be 111</span></span><br><span class="line"><span class="string">[('</span>a<span class="string">', 97), ('</span><span class="string">b', 98), ('</span>c<span class="string">', 99), ('</span>d<span class="string">', 100), ('</span>e<span class="string">', 101), ('</span><span class="string">f', 102), ('</span>g<span class="string">', 103), ('</span>h<span class="string">', 104), ('</span>i<span class="string">', 105), ('</span>j<span class="string">', 106), ('</span>k<span class="string">', 107), ('</span>l<span class="string">', 108), ('</span>m<span class="string">', 109), ('</span>n<span class="string">', 110), ('</span>o<span class="string">', 111), ('</span>p<span class="string">', 112), ('</span>q<span class="string">', 113), ('</span><span class="string">r', 114), ('</span>s<span class="string">', 115), ('</span>t<span class="string">', 116), ('</span><span class="string">u', 117), ('</span>v<span class="string">', 118), ('</span>w<span class="string">', 119), ('</span>x<span class="string">', 120), ('</span>y<span class="string">', 121), ('</span>z<span class="string">', 122)]</span></span><br></pre></td></tr></table></figure></p><ul><li><p>用最简洁的代码，自己生成一个大写字母 A-Z 及其对应的ASCII码值的字典dict2(使用dict，zip，range方法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: dict2=dict(zip(string.uppercase, range(ord(<span class="string">'A'</span>), ord(<span class="string">'Z'</span>)+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">print</span> dict2</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>将dict2与第一题排序后的dict1合并成一个dict3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: dict2.update(dict1)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: dict3=dict2.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">print</span> dict3</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">65</span>, <span class="string">'C'</span>: <span class="number">67</span>, <span class="string">'B'</span>: <span class="number">66</span>, <span class="string">'E'</span>: <span class="number">69</span>, <span class="string">'D'</span>: <span class="number">68</span>, <span class="string">'G'</span>: <span class="number">71</span>, <span class="string">'F'</span>: <span class="number">70</span>, <span class="string">'I'</span>: <span class="number">73</span>, <span class="string">'H'</span>: <span class="number">72</span>, <span class="string">'K'</span>: <span class="number">75</span>, <span class="string">'J'</span>: <span class="number">74</span>, <span class="string">'M'</span>: <span class="number">77</span>, <span class="string">'L'</span>: <span class="number">76</span>, <span class="string">'O'</span>: <span class="number">79</span>, <span class="string">'N'</span>: <span class="number">78</span>, <span class="string">'Q'</span>: <span class="number">81</span>, <span class="string">'P'</span>: <span class="number">80</span>, <span class="string">'S'</span>: <span class="number">83</span>, <span class="string">'R'</span>: <span class="number">82</span>, <span class="string">'U'</span>: <span class="number">85</span>, <span class="string">'T'</span>: <span class="number">84</span>, <span class="string">'W'</span>: <span class="number">87</span>, <span class="string">'V'</span>: <span class="number">86</span>, <span class="string">'Y'</span>: <span class="number">89</span>, <span class="string">'X'</span>: <span class="number">88</span>, <span class="string">'Z'</span>: <span class="number">90</span>, <span class="string">'a'</span>: <span class="number">97</span>, <span class="string">'c'</span>: <span class="number">99</span>, <span class="string">'b'</span>: <span class="number">98</span>, <span class="string">'e'</span>: <span class="number">101</span>, <span class="string">'d'</span>: <span class="number">100</span>, <span class="string">'g'</span>: <span class="number">103</span>, <span class="string">'f'</span>: <span class="number">102</span>, <span class="string">'i'</span>: <span class="number">105</span>, <span class="string">'h'</span>: <span class="number">104</span>, <span class="string">'k'</span>: <span class="number">107</span>, <span class="string">'j'</span>: <span class="number">106</span>, <span class="string">'m'</span>: <span class="number">109</span>, <span class="string">'l'</span>: <span class="number">108</span>, <span class="string">'o'</span>: <span class="number">111</span>, <span class="string">'n'</span>: <span class="number">110</span>, <span class="string">'q'</span>: <span class="number">113</span>, <span class="string">'p'</span>: <span class="number">112</span>, <span class="string">'s'</span>: <span class="number">115</span>, <span class="string">'r'</span>: <span class="number">114</span>, <span class="string">'u'</span>: <span class="number">117</span>, <span class="string">'t'</span>: <span class="number">116</span>, <span class="string">'w'</span>: <span class="number">119</span>, <span class="string">'v'</span>: <span class="number">118</span>, <span class="string">'y'</span>: <span class="number">121</span>, <span class="string">'x'</span>: <span class="number">120</span>, <span class="string">'z'</span>: <span class="number">122</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典的定义&quot;&gt;&lt;a href=&quot;#字典的定义&quot; class=&quot;headerlink&quot; title=&quot;字典的定义&quot;&gt;&lt;/a&gt;字典的定义&lt;/h2&gt;&lt;p&gt;字典是python中唯一的映射类型(哈希表)。&lt;br&gt;字典对象是可变的，但字典的键必须使用不可变对象，一个字典可以使用不同类型的键值。字典的输出是无序的。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="python实战" scheme="https://rosinelan.github.io/categories/system/python%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="字典" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="dict" scheme="https://rosinelan.github.io/tags/dict/"/>
    
      <category term="items" scheme="https://rosinelan.github.io/tags/items/"/>
    
  </entry>
  
</feed>
