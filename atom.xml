<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-04-15T03:43:23.156Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python生成器练习题目</title>
    <link href="https://rosinelan.github.io/2018/04/15/python%E7%94%9F%E6%88%90%E5%99%A8%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE/"/>
    <id>https://rosinelan.github.io/2018/04/15/python生成器练习题目/</id>
    <published>2018-04-15T03:24:15.000Z</published>
    <updated>2018-04-15T03:43:23.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>F[n]=F[n-1]+F[n-2] (n&gt;2,F[0]=1,F[1]=1)</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>初第一个数和第二个数，其余数字均由前两个数相加得到。  </p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>使用函数实现<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>当然，采用生成器方式也可以实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>此时返回结果为生成器对象，调用时候可以使用<code>next()</code>或者<code>for</code>循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h2&gt;&lt;p&gt;F[n]=F[n-1]+F[n-2] (n&amp;gt;2,F[0]=1,F[1]=1)&lt;/p&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;p&gt;初第一个数和第二个数，其余数字均由前两个数相加得到。  &lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;&lt;p&gt;使用函数实现&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="生成器" scheme="https://rosinelan.github.io/tags/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="杨辉三角" scheme="https://rosinelan.github.io/tags/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    
      <category term="斐波那契数列" scheme="https://rosinelan.github.io/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>python文章目录链接</title>
    <link href="https://rosinelan.github.io/2018/04/14/python%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E9%93%BE%E6%8E%A5/"/>
    <id>https://rosinelan.github.io/2018/04/14/python文章目录链接/</id>
    <published>2018-04-14T09:22:09.000Z</published>
    <updated>2018-04-14T09:35:54.945Z</updated>
    
    <content type="html"><![CDATA[<p>为了复习方便，整理了下python文章目录链接。  </p><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><p><a href="https://rosinelan.coding.me/2018/03/28/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">开发环境搭建</a><br>包括python安装，pycharm安装配置及常用快捷键。<br><a href="https://rosinelan.coding.me/2018/03/30/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">数据类型</a><br>包括python运算符、整数、字符串、列表、元组的介绍。<br><a href="https://rosinelan.coding.me/2018/04/01/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/" target="_blank" rel="noopener">数据类型(二)</a><br>包括python字典、集合的介绍，还有对数据类型通用方法和不可变对象的解释。<br><a href="https://rosinelan.coding.me/2018/04/04/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/" target="_blank" rel="noopener">条件判断和循环</a><br>包括python条件判断if、循环for和while、break、continue的介绍。<br><a href="https://rosinelan.coding.me/2018/04/11/python%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">编码问题</a><br>包括python编码问题的解释，要遇到乱码问题就点这篇。<br><a href="https://rosinelan.coding.me/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">文件操作</a><br>包括python文件操作的步骤和方法。<br><a href="https://rosinelan.coding.me/2018/04/13/python%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">函数</a><br>包括python函数定义和使用，函数中不同参数的意义及防坑指南，匿名函数，递归函数。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了复习方便，整理了下python文章目录链接。  &lt;/p&gt;
&lt;h2 id=&quot;语法基础&quot;&gt;&lt;a href=&quot;#语法基础&quot; class=&quot;headerlink&quot; title=&quot;语法基础&quot;&gt;&lt;/a&gt;语法基础&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://rosinelan.c
      
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="目录" scheme="https://rosinelan.github.io/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>python处理汉诺塔问题</title>
    <link href="https://rosinelan.github.io/2018/04/14/python%E5%A4%84%E7%90%86%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/04/14/python处理汉诺塔问题/</id>
    <published>2018-04-14T08:39:38.000Z</published>
    <updated>2018-04-14T08:53:29.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>不清楚<a href="https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295" target="_blank" rel="noopener">汉诺塔</a>规则可以点击查看。<br>要求：A、B、C 3个柱子，现在要求以C柱子为辅助，将数量为n的圆盘从A柱子移到B柱子(圆盘最大的在最下面)。<br><a id="more"></a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>A柱子为源柱子，B柱子为目标柱子，C柱子为辅助柱子。</li><li>把A柱子的n-1个圆盘移动到C柱子。</li><li>把A柱子剩余的最大圆盘移动到B柱子。</li><li>把C柱子的n-1个圆盘移动到B柱子。</li><li>C柱子的n-1个怎么移动呢？按照上述步骤递归处理。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(a, b, c, n)</span>:</span>    <span class="comment"># n表示圆盘个数，a/b/c分别为源/目标/辅助柱子</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># print("&#123;0&#125;--&gt;&#123;1&#125;:&#123;2&#125;".format(a[0], b[0], a[-1]))</span></span><br><span class="line">        b.append(a.pop())</span><br><span class="line">        <span class="comment"># print(x, y, z)</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mov(a, c, b, n<span class="number">-1</span>)</span><br><span class="line">    <span class="comment"># print("&#123;0&#125;--&gt;&#123;1&#125;:&#123;2&#125;".format(a[0], b[0], a[-1]))</span></span><br><span class="line">    b.append(a.pop())</span><br><span class="line">    <span class="comment"># print(x, y, z)</span></span><br><span class="line">    mov(c, b, a, n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = [<span class="string">'x'</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">y = [<span class="string">'y'</span>]</span><br><span class="line">z = [<span class="string">'z'</span>]</span><br><span class="line">mov(x, y, z, <span class="number">3</span>)</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure><p>使用3个列表模拟A、B、C柱子。<br>注释部分可打印出具体移动过程。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;不清楚&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汉诺塔&lt;/a&gt;规则可以点击查看。&lt;br&gt;要求：A、B、C 3个柱子，现在要求以C柱子为辅助，将数量为n的圆盘从A柱子移到B柱子(圆盘最大的在最下面)。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="汉诺塔" scheme="https://rosinelan.github.io/tags/%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
    
      <category term="递归" scheme="https://rosinelan.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="https://rosinelan.github.io/2018/04/13/python%E5%87%BD%E6%95%B0/"/>
    <id>https://rosinelan.github.io/2018/04/13/python函数/</id>
    <published>2018-04-13T00:51:48.000Z</published>
    <updated>2018-04-15T03:22:54.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>定义函数使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(arg1,arg2,...)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>pass</code>表示什么也不干。一般用作占位符，比如还没想好代码怎么写，可以先写<code>pass</code>让代码可以运行。<br><code>return</code>返回结果。若没有<code>return</code>函数也会返回结果，只是返回结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。<br><code>exit(n)</code>表示强行退出。  </p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>对于下面计算任意数的任意次方的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    s = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n = n - <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        s = s * x</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> s</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><p>其中的参数<code>x</code>和<code>n</code>都是位置参数，也就是调用函数时，传入的参数按照先后顺序依次赋值给<code>x</code>和<code>n</code>。  </p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>对于上面的<code>power(x, n)</code>函数，当调用的时候只输入1个参数会如何呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">'n'</span></span><br></pre></td></tr></table></figure></p><p>可见少参数是不行的。此时可以通过默认参数简化问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span>    <span class="comment">#设置n默认值为2</span></span><br><span class="line"><span class="meta">... </span>    s = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n = n - <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        s = s * x</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> s</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)    <span class="comment">#此时相当于power(5,2)</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">2</span>,<span class="number">5</span>)    <span class="comment">#当需要计算n不是2的情况时，可以自己输入。</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><p>设置默认参数时<br>必选参数在前，默认参数在后，否则python编辑器报错。<br>函数有多个参数时，变化大的参数放前面，变化小的参数放后面。变化小的参数可以作为默认参数。<br>有多个默认参数时，调用的时候既可以按照顺序提供默认参数，也可以不按顺序提供部分默认参数。当不按顺序提供默认参数时，需要把参数名写上。<br>默认参数必须指向不变的参数。<br>不可变类型：整数、字符串、元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量赋值a=5 后再赋值a=10，这里实际是新生成一个int值对象10，再让a指向它，而5被丢弃。不是改变a的值，相当于重新生成了a。</span><br></pre></td></tr></table></figure></p><p>可变类型： 列表、字典。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量赋值la=[1,2,3,4]后再赋值la[2]=5 则是修改list la的第三个元素值，本身la没动，只是其内部的部分值被修改了。</span><br></pre></td></tr></table></figure></p><p>使用可变类型作为默认参数的坑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,l=[])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line">        l.append(i*i)</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure></p><p>对于上面的函数，我们看下不同情况下调用的结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>)    <span class="comment">#只传入第一个参数，列表使用默认值</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#传入所有参数，不使用默认值</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>)    <span class="comment">#列表使用默认值，此时结果为f(2)得到的列表上追加，而不是在空列表追加</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">3</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#列表不适用默认值，结果和预期一致</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">4</span>)    <span class="comment">#列表使用默认值，此时结果为在f(3)结果的列表追加</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">4</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])    <span class="comment">#列表不使用默认值，结果和预期一致</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></p><p>原因：python的函数在定义的时候，默认参数<code>L</code>已经被计算出来了，就是<code>[]</code>，也就是变量<code>l</code>指向对象<code>[]</code>。每次调用函数<code>f()</code>的时候，假如改变了<code>l</code>的内容，那么下次调用时默认参数<code>l</code>的内容就变了，不再是默认的<code>[]</code>。  </p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数就是参数个数是可变的，可以是1个、2个到任意个，也可以是0个。<br>如计算传入数字的平方和。由于参数个数不一定，可以通过传入列表或者元组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sum = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line"><span class="meta">... </span>        sum = sum + n * n</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sum</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>但是调用的时候需要生成列表或者元组。此时可以使用可变参数方式简化。<br>定义可变参数就是在参数前添加一个<code>*</code>号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sum = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line"><span class="meta">... </span>        sum = sum + n * n</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sum</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>python允许在列表或者元组前加一个<code>*</code>号，把列表或者元组的元素编程可变参数传进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>上面的<code>*nums</code>表示把列表nums中的所有元素按照可变参数传进去。   </p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>可变函数允许传入任意个参数，这些可变参数在函数调用时自动组装成一个元组。<br>关键字参数允许传入任意个含参数名的参数，这些关键字在函数内部自动组装成一个字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span>    <span class="comment">#kw就是关键字参数</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'xiaohh'</span>, <span class="number">30</span>, city=<span class="string">'beijing'</span>)</span><br><span class="line">name: xiaohh age: <span class="number">30</span> other: &#123;<span class="string">'city'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>对于关键字参数，调用者可以传入任意不受限制的关键字参数。如果要限制关键字参数的名字，就可以用命名关键字参数。<br>命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span>    <span class="comment">#星号前面的name和age属于位置参数</span></span><br><span class="line"><span class="meta">... </span>    print(name, age, city, job)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure></p><p>如果函数定义中已经有一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>。命名关键字参数必须传入参数名，若没有传入参数名调用将报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(name, age, args, city, job)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">Jack <span class="number">24</span> () Beijing Engineer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: person() missing <span class="number">2</span> required keyword-only arguments: <span class="string">'city'</span> <span class="keyword">and</span> <span class="string">'job'</span></span><br></pre></td></tr></table></figure></p><h4 id="组合参数"><a href="#组合参数" class="headerlink" title="组合参数"></a>组合参数</h4><p>定义函数时可以选用必选参数、默认参数、关键字参数和命名关键字参数，这5种参数可以组合使用。但是，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。<br>调用函数的时候，python解释器会自动按照参数位置和参数名称把对应的参数传进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure></p><p>通过元组或者列表也可以调用上述函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'d'</span>: <span class="number">99</span>, <span class="string">'x'</span>: <span class="string">'#'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>默认参数一定要使用不可变对象，若使用可变对象可能出现逻辑错误。<br><code>*args</code>是可变参数，args接受的是一个元组。<br><code>**kw</code>是关键字参数，kw接受的是一个字典。<br>使用<code>*args</code>和<code>**kw</code>是习惯写法，也可以使用其他参数名，但建议使用习惯写法。<br>可变参数既可以直接传入，也可以先组装列表或者元组，再通过<code>*args</code>传入。<br>关键字参数是既可以直接输入，也可以先组装字典，再通过<code>**kw</code>传入。</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数就是没有名字。python使用lambda创建匿名函数。  </p><ul><li>lambda函数是一种快速定义单行的最小函数，可以用在任何需要函数的地方。  </li><li>lambda只是一个表达式，函数体比def简单很多。  </li><li>lambda函数拥有自己的命名空间，且不能访问自己参数列表之外的参数。  </li></ul><p>语法格式如下</p><blockquote><p>lambda [arg1 [,arg2,…..argn]]:expression  </p></blockquote><p>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数内部可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。<br>举个例子，计算阶乘<code>n! = 1 x 2 x 3 x...x n</code>，用函数<code>fact(n)</code>表示，那么<br>fact(n) = n! = 1 x 2 x 3 x …x (n-1) x n = (n-1)! x n = fact(n-1) x n<br>所以<code>fact(n)</code>可以表示为<code>n x fact(n-1)</code>，只有 n = 1时需要特殊处理。<br>那么这个函数可以写成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>比较典型的使用递归函数处理的问题，除了阶乘之外还有汉诺塔问题。<br>具体处理及解决办法见<a href="https://rosinelan.coding.me/2018/04/14/python%E5%A4%84%E7%90%86%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">python处理汉诺塔问题</a></p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map(func, *iterables)<br>第一个参数为函数，第二个参数为可迭代对象。返回值为map对象。<br>函数作用是将可迭代对象的每个元素作为参数传递给函数进行计算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span>    <span class="comment">#定义函数</span></span><br><span class="line">    <span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line">result = map(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])    <span class="comment">#将列表中的每个参数传入</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:    <span class="comment">#由于返回值为map对象，通过循环读出</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>执行结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>使用该函数首先需要<code>from functools import reduce</code>。<br>reduce(function, sequence[, initial])<br>第一个参数为函数，第二个参数为序列，第三个参数可选。<br>函数作用：序列中的元素从左向右传递给函数进行计算，第一次传递序列前2个元素，其通过函数的计算结果和第三个元素作为第二次传递参数，以此类推。要求函数参数个数为2个。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">result = reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print( result)</span><br></pre></td></tr></table></figure></p><p>上述语句和下面语句结果一直，均显示计算结果为<code>6</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure></p><p>其计算方式为先传递1和2至函数，计算<code>(1+2)</code>，得到的结果是<code>3</code>，再和序列下一个值作为参数传递<code>3+3</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x*y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment">#输出结果为6</span></span><br></pre></td></tr></table></figure></p><p>其计算方式为先传递1和2至函数，计算<code>(1*2)</code>，得到的结果是<code>2</code>，再和序列下一个值作为参数传递<code>2*3</code>。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>filter(function or None, iterable)  返回为filter对象<br>第一个参数为函数，也可为空。第二个参数为可迭代对象。<br>函数返回可迭代对象中的满足函数要求的元素。若函数不存在则返回可迭代对象中为True的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(s)    <span class="comment">#输出结果为&lt;filter object at 0x00000202A7D72828&gt;</span></span><br><span class="line">print(list(s))    <span class="comment">#输出结果为[2, 4]</span></span><br></pre></td></tr></table></figure></p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>sorted(iterable, key, reverse) 返回值为新的列表<br>第一个参数是可迭代对象；第二个参数为排序对象，第三个为布尔值，True为反序，False为正序，默认为False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</span><br><span class="line">print(sorted(list1))    <span class="comment">#输出结果为['a', 'b', 'c', 'd']</span></span><br><span class="line">print(sorted(list1,reverse=<span class="keyword">True</span>))    <span class="comment">#输出结果为['d', 'c', 'b', 'a']</span></span><br><span class="line">print(list1)    <span class="comment">#输出结果为['d', 'a', 'c', 'b']</span></span><br></pre></td></tr></table></figure></p><p>可以排序并不改变列表本身，而是返回一个新的列表对象。<br>对于字典，默认会按照<code>key进行排序</code>，若需要指定排序的对象，可以使用下面方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = dict(a=<span class="number">1</span>, d=<span class="number">20</span>, c=<span class="number">10</span>, e=<span class="number">400</span>)</span><br><span class="line">print(sorted(m.items(), key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>], reverse=<span class="keyword">True</span>))    <span class="comment">#输出结果为[('e', 400), ('d', 20), ('c', 10), ('a', 1)]</span></span><br></pre></td></tr></table></figure></p><p>练习题目：对/etc/passwd文件按照用户UID进行排序。<br>原始文件内容,其中第三列为UID<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-source.png" alt="python-sort-source" title="python-sort-source"><br>示例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs    <span class="comment">#此处codecs模块为编码自动转换，防止乱码</span></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"passswd.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> result:</span><br><span class="line">    passwd = sorted(result.readlines(), key=<span class="keyword">lambda</span> item : int(item.split(<span class="string">":"</span>)[<span class="number">2</span>]))</span><br><span class="line">    print(passwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"passwd1.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(passwd)</span><br></pre></td></tr></table></figure></p><p><code>print(passwd)</code>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-print.png" alt="python-sort-print" title="python-sort-print"><br>排序后输出的新文件内容<br><img src="http://cdn.rosinelan.com/blog/program/python-sort-sorted.png" alt="python-sorted" title="python-sort-sorted"></p><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式简单强大，用来快速生成满足条件的列表。<br>[exp for val in collection if condition]<br>exp表示表达式，后面跟for循环，还可以有if条按键判断。<br>要生成<code>[1x1, 2x2, 3x3,...,10x10]</code>，使用普通for循环如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">moon = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    moon.append(i*i)</span><br><span class="line">print(moon)    <span class="comment">#输出结果为[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></p><p>使用列表生成式可以一行语句就生成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])    <span class="comment"># 输出结果为[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure></p><p>上面结果为1-10的所有数的平方，要是想只输出偶数的平方就可以使用<code>if</code>条件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>])    <span class="comment">#输出结果为[4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure></p><p>列表生成式也可以同时使用2个或者多个变量，例如针对<code>dict</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"x"</span>: <span class="string">"A"</span>, <span class="string">"y"</span>: <span class="string">"B"</span>, <span class="string">"z"</span>: <span class="string">"D"</span>&#125;</span><br><span class="line">print([k + <span class="string">"="</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()])    <span class="comment">#输出结果为['x=A', 'y=B', 'z=D']</span></span><br></pre></td></tr></table></figure></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>列表生成式是根据规则一次性将列表中的元素全部生成。当列表中元素过多但我们又只需要访问列表前几个元素的时候，使用列表生成式就很浪费。这时我们可以使用生成器，也就是按照规则边循环边计算，而不是一次性生成列表。这种一边循环一遍计算的机制，也就是生成器(generator)。  生成方式有2种，分别是列表生成式中的<code>[]</code>改成<code>()</code>和<code>yield</code>。</p><h4 id="exp-for-val-in-collection-if-condition"><a href="#exp-for-val-in-collection-if-condition" class="headerlink" title="(exp for val in collection if condition)"></a>(exp for val in collection if condition)</h4><p>以前面生成<code>[1x1, 2x2, 3x3,...,10x10]</code>为例，改用生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">print(g)    <span class="comment">#输出结果为&lt;generator object &lt;genexpr&gt; at 0x000001FB49446FC0&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时生成的为生成器对象，那么我们如何访问生成器中的元素呢？<br>要是一个接一个访问可以使用<code>next()</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(next(g))    <span class="comment">#输出结果为1</span></span><br><span class="line">print(next(g))    <span class="comment">#输出结果为4</span></span><br><span class="line">print(next(g))    <span class="comment">#输出结果为9</span></span><br></pre></td></tr></table></figure></p><p>另外在遇到<code>next()</code>函数时需要注意，当调用next()之后再次调用生成器对象时，生成器对象将从下一个元素开始。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">print(next(g))</span><br><span class="line">print(<span class="string">"####"</span>)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="number">3</span>    <span class="comment">#此处从3开始，而不是从1开始</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>其实生成器也是可迭代对象(iterator)，也可以使用<code>for</code>循环来访问<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">...(略)</span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>如果一个函数中包含关键字<code>yield</code>，那么这个函数就是一个生成器。<br>普通函数和含有<code>yield</code>关键字的生成器区别在于执行流程不一样。<br>函数是顺序执行，遇到<code>return</code>语句或最后一行函数语句就返回。<br>变成生成器的函数，遇到<code>yield</code>语句时返回，再次执行的时候从上次返回的<code>yield</code>语句的下一行继续执行。<br>对于下面的函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"step 1"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">"step 2"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    print(<span class="string">"step 3"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>调用的时候，输出结果为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#输出第一步，返回1</span></span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#继续从yield 1下一行开始执行</span></span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#继续从yield 3下一行开始执行</span></span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(next(n))    <span class="comment">#当最后一个元素结束时会抛出StopIteration异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p><p>关于生成器的练习题目，点击<a href="">生成器练习题目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h3&gt;&lt;p&gt;定义函数使用&lt;code&gt;def&lt;/code&gt;语句，依次写出函数名、括号、括号中的参数和冒号&lt;code&gt;:&lt;/code&gt;，然后在缩进块中编写函数体，函数的返回值用&lt;code&gt;return&lt;/code&gt;语句返回。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg1,arg2,...)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="函数" scheme="https://rosinelan.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="return" scheme="https://rosinelan.github.io/tags/return/"/>
    
      <category term="参数" scheme="https://rosinelan.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="可变参数" scheme="https://rosinelan.github.io/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
      <category term="args" scheme="https://rosinelan.github.io/tags/args/"/>
    
      <category term="kw" scheme="https://rosinelan.github.io/tags/kw/"/>
    
  </entry>
  
  <entry>
    <title>python文件操作</title>
    <link href="https://rosinelan.github.io/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://rosinelan.github.io/2018/04/13/python文件操作/</id>
    <published>2018-04-13T00:51:35.000Z</published>
    <updated>2018-04-14T03:36:07.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>在python中读写文件有3个步骤  </p><ol><li>调用<code>open()</code>函数，返回一个File对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li><p>调用File对象的<code>read()</code>或<code>write()</code>方法。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.read()</span><br><span class="line"><span class="string">'Hello World!\n这是一个测试文件读写的文档！'</span></span><br></pre></td></tr></table></figure></li><li><p>调用File对象的<code>close()</code>方法关闭该文件。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="open-函数打开文件"><a href="#open-函数打开文件" class="headerlink" title="open()函数打开文件"></a>open()函数打开文件</h3><p><code>open()</code> 函数常用参数<br>第一个参数是文件，使用<code>open()</code>函数打开一个文件，首先要给它传递一个字符串路径表示要打开的文件。这里既可以是绝对路径，也可以是相对路径。<br>第二个参数是文件打开模式，默认为<code>rt</code>。常用模式如下<br><code>r</code> 只读模式打开文件，默认。<br><code>w</code> 读模式打开文件，用于向文件写入。若文件不存在则自动创建，若存在则会覆盖原文件从头开始写。<br><code>x</code> 创建一个新文件然后向文件写入。<br><code>a</code> 追加，用于向文件写入。若文件存在则从文件末尾开始继续添加，不会覆盖原文件。<br><code>b</code> 二进制模式。返回的文件内容为未解码的<code>bytes</code>对象。<br><code>t</code> 文本模式，默认模式。返回的文件内容为<code>stings</code>。也就是<code>bytes</code>对象经过系统默认编码(或指定的编码格式)使用<code>decode()</code>转换之后返回。<br><code>open()</code>函数返回值为<code>File</code>对象。当需要读取或者写入的时候直接调用该对象的方法即可。<br>示例<br>读模式打开文件<br>方法1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br></pre></td></tr></table></figure></p><p>方法2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure></p><p>上面2种方法是一致的，因为默认情况下就是使用<code>r</code>模式打开文件。  </p><h3 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h3><p>上面已经创建了一个<code>File</code>对象，下面可以进行读取。<br>常用读取方法有3种<br><code>read()</code> 读取整个文件，返回内容为<code>strings</code>。<br><code>readline()</code> 按行读取文件，调用一次读取一行。<br><code>readlines()</code> 读取整个文件按行返回到<code>list</code>中。<br>示例<br>使用read()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br><span class="line"><span class="string">'Hello World!\n这是一个测试文件读写的文档！'</span></span><br></pre></td></tr></table></figure></p><p>使用readline()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#读取第一行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="string">'Hello World!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#读取第二行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line"><span class="string">'这是一个测试文件读写的文档！'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readline()    <span class="comment">#后面再没有内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></p><p>使用readlines()方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent = helloFile.readlines()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloCentent</span><br><span class="line">[<span class="string">'Hello World!\n'</span>, <span class="string">'这是一个测试文件读写的文档！'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile.close()</span><br></pre></td></tr></table></figure></p><p>扩展：<code>readlines()</code>方法得到的列表如何操作？如何得到行号？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloContet = helloFile.readlines()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, content <span class="keyword">in</span> enumerate(helloContet):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"第&#123;0&#125;行内容是:&#123;1&#125;"</span>.format(i, content), end=<span class="string">""</span>)</span><br><span class="line">...</span><br><span class="line">第<span class="number">0</span>行内容是:Hello World!</span><br><span class="line">第<span class="number">1</span>行内容是:这是一个测试文件读写的文档！</span><br></pre></td></tr></table></figure></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>要在文件中写入内容，需要以<code>w</code>或<code>a</code>模式打开文件，若<code>open()</code>打开的文件不存在，将会创建新的空白文件。写入之后需要使用<code>close()</code>方法关闭。<br>示例<br>使用<code>w</code>(写)模式写入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'w'</span>)    <span class="comment">#该文件此时不存在</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'Hello World!\n'</span>)    <span class="comment">#写入时若需要换行符需要自己添加</span></span><br><span class="line"><span class="number">13</span>    <span class="comment">#返回的为写入字符的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'正在测试写模式写入!\n'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.read()    <span class="comment">#再次读取，已经正确写入</span></span><br><span class="line"><span class="string">'Hello World!\n正在测试写模式写入!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br></pre></td></tr></table></figure></p><p>使用<code>a</code>(追加)模式写入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.write(<span class="string">'正在测试追加模式写入!\n'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.read()</span><br><span class="line"><span class="string">'Hello World!\n正在测试写模式写入!\n正在测试追加模式写入!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br></pre></td></tr></table></figure></p><p>需要特别注意<code>w</code>模式，假如写入的文件已存在，将会覆盖原文件，从头写入。  </p><h3 id="使用with"><a href="#使用with" class="headerlink" title="使用with"></a>使用with</h3><p>从上面代码看到，每次调用<code>open()</code>打开文件，调用<code>write()</code>写入文件，总是要调用<code>close()</code>关闭文件。这样比较麻烦，python引入<code>with</code>语句自动帮我们调用<code>close()</code>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.read())</span><br><span class="line">...</span><br><span class="line">Hello World!</span><br><span class="line">正在测试写模式写入!</span><br><span class="line">正在测试追加模式写入!</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">当我们写入文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用`close()`方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用`close()`后果是数据可能只写了一部分到磁盘造成数据丢失。建议操作文件IO时始终使用`<span class="keyword">with</span>`语句。  </span><br><span class="line"><span class="comment">### 其他文件对象方法  </span></span><br><span class="line">name 返回该对象对应的文件名  </span><br><span class="line">``` python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.name)</span><br><span class="line">...</span><br><span class="line">bacon.txt</span><br></pre></td></tr></table></figure></p><p>fileno() 返回文件描述符<br>文件描述符是非负整数，内核访问文件的时候使用文件描述符，以此指定操作的文件。具体的使用办法以后再说。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.fileno())</span><br><span class="line">...</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>encoding()  返回文件编码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    print(f.encoding)</span><br><span class="line">...</span><br><span class="line">cp936    <span class="comment">#此处cp936就是GBK编码</span></span><br></pre></td></tr></table></figure></p><p>closed 返回值为布尔值，判断文件是否已经关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile = open(<span class="string">'bacon.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.closed    <span class="comment">#打开之后尚未关闭</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>baconFile.closed    <span class="comment">#已经使用close()方法关闭</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>tell() 返回文件当前位置<br>seek(offset, whence) 设置文件当前位置<br>offset 表示偏移量，正数向后偏移，负数向前偏移<br>whence 0表示文件开头 1表示现在位置 2表示文件末尾<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'sunny.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)    <span class="comment">#文件内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'Hello World!\n正在测试seek功能!\n正在测试truncate功能!\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'sunny.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">b'Hello World!\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.tell()</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></p><p>注意：当使用上述方法时建议使用<code>b</code>模式打开文件。<br>truncate(size)<br>从文件首行首字符开始截断，截断文件为<code>size</code>个字符，无size表示从当前位置开始截断。截断之后后面的所有字符均删除。windows下换行符代表2个字符。<br>原始文件内容  </p><blockquote><p>This is 1st line<br>This is 2nd line<br>This is 3rd line<br>This is 4th line  </p></blockquote><p>使用下面语句截取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helloFile = open(<span class="string">'D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt'</span>, <span class="string">'r+'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">helloFile.truncate(<span class="number">12</span>)</span><br><span class="line">helloFile.close()</span><br></pre></td></tr></table></figure></p><p>输出结果</p><blockquote><p>This is 1st </p></blockquote><p>包括1st后面的空格，一共为12个字符。  </p><h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><p>关于python中文件编码的具体说明可参照前面的文章<a href="https://rosinelan.github.io/2018/04/11/python%E7%BC%96%E7%A0%81/">python编码</a>,此处主要针对<code>open()</code>方法的<code>encoding</code>参数。<br>要写入特定编码的文本文件，给<code>open()</code>函数传入<code>encoding</code>参数，将字符串转换成指定编码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'gbk'</span>) <span class="keyword">as</span> f:    <span class="comment">#根据上面encoding方法返回结果可知该文件为GBK编码</span></span><br><span class="line"><span class="meta">... </span>    print(f.read())    <span class="comment">#指定使用GBK编码可正常输出</span></span><br><span class="line">...</span><br><span class="line">Hello World!</span><br><span class="line">正在测试写模式写入!</span><br><span class="line">正在测试追加模式写入!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'bacon.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:    <span class="comment">#当使用utf-8编码输出时就会报错</span></span><br><span class="line"><span class="meta">... </span>    print(f.read())</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Users\xiaohuihui\AppData\Local\Programs\Python\Python36\lib\codecs.py"</span>, line <span class="number">321</span>, <span class="keyword">in</span> decode</span><br><span class="line">    (result, consumed) = self._buffer_decode(data, self.errors, final)</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xd5 in position 14: invalid continuation byte</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;p&gt;在python中读写文件有3个步骤  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;open()&lt;/code&gt;函数，返回一个File对象。  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;helloFile = open(&lt;span class=&quot;string&quot;&gt;&#39;D:\\BaiduNetdiskDownload\\livepython1\\06\\file.txt&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="文件" scheme="https://rosinelan.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="open" scheme="https://rosinelan.github.io/tags/open/"/>
    
      <category term="close" scheme="https://rosinelan.github.io/tags/close/"/>
    
      <category term="read" scheme="https://rosinelan.github.io/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>python编码</title>
    <link href="https://rosinelan.github.io/2018/04/11/python%E7%BC%96%E7%A0%81/"/>
    <id>https://rosinelan.github.io/2018/04/11/python编码/</id>
    <published>2018-04-11T07:38:32.000Z</published>
    <updated>2018-04-11T13:23:51.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>常用字符编码有<code>ASCII</code>,<code>GB2312</code>,<code>Unicode</code>,<code>UTF-8</code>等，为什么需要这么多不同的编码，又是怎么来的呢？<br>计算机能够识别的只有二进制的0和1，要处理字母等类型只能转换为类似<code>01010001</code>的二进制数字才能处理；人要能够正常阅读，也需要计算机将二进制数转换为对应的字母。那么如何转换，转换的规则和标准又是什么？这就是我们常见的编码所规定的。<br><a id="more"></a></p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>计算机是美国人发明的，因此最早只有英语中的127个字符(包括大小写字母、数字、特殊符号等)被编码到计算机里，这个编码表就是<code>ASCII</code>编码。根据前面一个字节(8比特)最多可以表示<code>256</code>个字符，那么对于英文中的100多个字符使用一个字节中的前7位就可以表示。    </p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>英文是可以被计算机识别了，那么中文怎么破？为了解决汉字问题，中国国家标准总局提出了<code>GB2312</code>编码，收录了6763个汉字，后来又在此基础上创建了<code>GBK</code>编码，收录了27484汉字，同时收录了包括藏文、蒙文等在内的主要少数名族文字。  </p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>中文使用<code>GBK</code>编码，那么对于其他国家的文字如何处理，各个国家都有建立了自己的标准。为了统一标准，统一联盟国际组织提出了<code>Unicode</code>编码，该编码将所有语言统一到一套编码。<br>Unicode标准也在不断发展，最常见的是两个字节表示一个字符(生僻字符可能需要4个字节)。<br><code>ASCII</code>和<code>Unicode</code>主要区别：ASCII编码使用1个字节，Unicode编码通常是2个字节。</p><blockquote><p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>;<br>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>;<br>汉字<code>中</code>已经超出ASCII编码范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>;<br>ASCII编码的<code>A</code>用Unicode编码，只要在前面补0就可以，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。  </p></blockquote><p>从上面可以看出，假如对英文使用Unicode编码要比ASCII编码多一倍的存储空间，在存储和传输上不方便。<br>所以本着节约的精神，又出现了把Unicode编码转换为可变长编码的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同数字大小编码成1-6个字节，常用的英文字母编码成1个字节，汉字通常是3个字节。当传输的文本中包含大量的英文字符时，用UTF-8编码可以节省空间。<br>上面内容总结一下就是  </p><ul><li>为处理英文字符，出现了<code>ASCII</code>码。  </li><li>为处理中文字符，出现了<code>GB2312</code>和<code>GBK</code>。  </li><li>为统一处理不同国家不同语言，出现了<code>Unicode</code>编码。  </li><li>为提高Unicode传输和存储的性能，出现了<code>UTF-8</code>,它是Unicode的一种实现方式。  <h2 id="python2的字符编码"><a href="#python2的字符编码" class="headerlink" title="python2的字符编码"></a>python2的字符编码</h2>python2中默认的字符编码是<code>ASCII</code>码，也就是说在处理数据时，若没有指定它的编码类型，默认将会当做ASCII码来处理。当编写的python文件中包含有中文字符时就会报错。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><img src="http://cdn.rosinelan.com/blog/program/python-code-default.png" alt="python-code-default" title="python-code-default"><br>根据上述结果可以看到出错原因是python将整个脚本当做ASCII码处理，但是出现的中文<code>是否乱码</code>ASCII码无法处理。处理方式很简单，在头部添加一行编码声明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br>pycharm执行<br><img src="http://cdn.rosinelan.com/blog/program/python-code-utf8-pycharm.png" alt="python-code-utf8-pycharm" title="python-code-utf8-pycharm"><br>windows命令行执行<br><img src="http://cdn.rosinelan.com/blog/program/python-code-utf8.png" alt="python-code-utf8-cmd" title="python-code-utf8-cmd"><br>声明编码方式之后发现在pycahrm执行输出正确信息，但是在windows命令行输出乱码。<br>windows命令行默认使用的是<code>GBK</code>编码，但是在python脚本中使用的是<code>UTF-8</code>，两边不一致导致出现乱码，只要修改两者一致即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: GBK -*-</span></span><br><span class="line">s = <span class="string">"是否乱码"</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>执行结果<br><img src="http://cdn.rosinelan.com/blog/program/python-code-gbk.png" alt="python-code-gbk" title="python-code-gbk"><br>此时可以看到在命令行执行结果显示正确，但是相应的在pycharm执行就会出现乱码的情况。也进一步说明导致乱码就是编码格式不一致。也就是说，当需要操作系统正确输出一个字符时，除了要知道该字符的字符编码，还需要知道自己使用系统的字符编码，两者一致时就不会出现所谓<code>乱码</code>。  </p><h2 id="decode-和encode"><a href="#decode-和encode" class="headerlink" title="decode()和encode()"></a>decode()和encode()</h2><p>decode()方法将其他编码字符转换成Unicode编码字符。<br>encode()方法将Unicode编码字符转换成其他编码字符。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-encode.png" alt="python-code-encode" title="python-code-encode"><br>上述命令在pycharm自带的终端执行，其默认字符编码为<code>UTF-8</code>。<br>直接输入<code>s</code>出现的<code>&#39;\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81&#39;</code>为对应的UTF-8字符串。<br>使用decode()方法将s转换为unicode编码，此时输入<code>unicode_s</code>出现的<code>u&#39;\u662f\u5426\u4e71\u7801&#39;</code>为unicode字符串。<br>使用encode()方法将unicode_s转换为GB2312编码，此时输入<code>gb2312_s</code>出现的<code>&#39;\xca\xc7\xb7\xf1\xc2\xd2\xc2\xeb&#39;</code>为gb2312字符串。由于终端为UTF-8编码，所以使用<code>print gb2312_s</code>会出现乱码情况。<br>在windows终端可以正常输出gb2312编码的字符串。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-decode.png" alt="python-code-decode" title="python-code-decode"><br>总结  </p><ul><li>python2中可以直接查看unicode字符串。  </li><li>python2中对于字符编码的转换通过unicode作为中间人进行转换。  </li><li>decode()方法与在字符串前加u的方法实现的效果相同。<br><img src="http://cdn.rosinelan.com/blog/program/python-code-u.png" alt="python-code-u" title="python-code-u">  <h2 id="python2中的列表"><a href="#python2中的列表" class="headerlink" title="python2中的列表"></a>python2中的列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"哈哈"</span>,<span class="string">"ABC"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">'\xb9\xfe\xb9\xfe'</span>, <span class="string">'ABC'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list1[<span class="number">0</span>]</span><br><span class="line">哈哈</span><br></pre></td></tr></table></figure></li></ul><p>当一个中文的字符出现在列表(或元组或字典)中，它不会被显示为中文而是显示为字符串。但是当该字符窜从列表中取出再使用print时就可以正常显示为中文。<br>字符串是所有字符在python2中的本质形态，该字符串是计算机可以理解的，不是通常所说的乱码。在python3中就不存在这种问题了。  </p><h2 id="python3的字符编码"><a href="#python3的字符编码" class="headerlink" title="python3的字符编码"></a>python3的字符编码</h2><p>在python3中默认编码方式为<code>UTF-8</code>，所以coding声明可以不用写，但为了兼容python2建议添加。<br>python3中字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。当需要传输或者保存到硬盘时，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。<br>以Unicode表示的<code>str</code>通过encode()方法可以编码为指定的<code>bytes</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"ABC"</span>.encode(<span class="string">'ASCII'</span>)</span><br><span class="line"><span class="string">b'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"是否乱码"</span>.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="string">b'\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81'</span></span><br></pre></td></tr></table></figure></p><ul><li><code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或者双引号表示。  </li><li>在<code>bytes</code>中无法显示为ASCII字符的字节，用<code>\x##</code>表示。<br>相反，要将<code>bytes</code>变为<code>str</code>，就需要使用<code>decode()</code>方法。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ASCII'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe6\x98\xaf\xe5\x90\xa6\xe4\xb9\xb1\xe7\xa0\x81'</span>.decode(<span class="string">'UTF-8'</span>)</span><br><span class="line"><span class="string">'是否乱码'</span></span><br></pre></td></tr></table></figure></li></ul><p>上面说到的编码问题主要是python2中，请注意区分版本。<br>即使在python3中，涉及到<code>str</code>和<code>bytes</code>转换时，非特殊情况一定要使用<code>UTF-8</code>编码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;p&gt;常用字符编码有&lt;code&gt;ASCII&lt;/code&gt;,&lt;code&gt;GB2312&lt;/code&gt;,&lt;code&gt;Unicode&lt;/code&gt;,&lt;code&gt;UTF-8&lt;/code&gt;等，为什么需要这么多不同的编码，又是怎么来的呢？&lt;br&gt;计算机能够识别的只有二进制的0和1，要处理字母等类型只能转换为类似&lt;code&gt;01010001&lt;/code&gt;的二进制数字才能处理；人要能够正常阅读，也需要计算机将二进制数转换为对应的字母。那么如何转换，转换的规则和标准又是什么？这就是我们常见的编码所规定的。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="编码" scheme="https://rosinelan.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="decode" scheme="https://rosinelan.github.io/tags/decode/"/>
    
      <category term="encode" scheme="https://rosinelan.github.io/tags/encode/"/>
    
  </entry>
  
  <entry>
    <title>python练习题目(二)</title>
    <link href="https://rosinelan.github.io/2018/04/11/python%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/11/python练习题目-二/</id>
    <published>2018-04-11T06:01:01.000Z</published>
    <updated>2018-04-11T07:02:31.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h2><blockquote><p>ABCD乘9=DCBA，A=? B=? C=? D=?</p></blockquote><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>A和D肯定不为0，B和C取值范围为0-9</li><li>以A开头的四位数乘9得到四位数，由于判断A肯定为1</li><li>A为1，那么乘以9得到的四位数，D肯定为9<a id="more"></a><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">1000</span>*A + <span class="number">100</span>*B + <span class="number">10</span>*C + D)*<span class="number">9</span> == (D*<span class="number">1000</span> + C*<span class="number">100</span> + B*<span class="number">10</span> + A):</span><br><span class="line">                    print(<span class="string">"A=&#123;0&#125;,B=&#123;1&#125;,C=&#123;2&#125;,D=&#123;3&#125;"</span>.format(A, B, C, D))</span><br></pre></td></tr></table></figure></li></ul><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://cdn.rosinelan.com/blog/program/python-cal-result.png" alt="python-cal-result" title="python-cal-result">  </p><h2 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h2><blockquote><p>九宫格<br>A B C<br>D E F<br>G H I<br>A-I代表数字，取值范围为1-9，要求横、竖、对角各方向的3个数字不重复，且3个数字之和相等，均为15</p></blockquote><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>数字取值范围为1-9</li><li>A取值范围1-9，那么B取值范围为1-9同时排除A</li><li>C取值范围1-9同时排除A和B，依次类推  <h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="实现方式1"><a href="#实现方式1" class="headerlink" title="实现方式1"></a>实现方式1</h4>使用copy()及remove()方法实现各数字判断<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line">number = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> number:</span><br><span class="line">    a = number.copy()</span><br><span class="line">    a.remove(A)</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> a:</span><br><span class="line">        b = a.copy()</span><br><span class="line">        b.remove(B)</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> b:</span><br><span class="line">            c = b.copy()</span><br><span class="line">            c.remove(C)</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> c:</span><br><span class="line">                d = c.copy()</span><br><span class="line">                d.remove(D)</span><br><span class="line">                <span class="keyword">for</span> E <span class="keyword">in</span> d:</span><br><span class="line">                    e = d.copy()</span><br><span class="line">                    e.remove(E)</span><br><span class="line">                    <span class="keyword">for</span> F <span class="keyword">in</span> e:</span><br><span class="line">                        f = e.copy()</span><br><span class="line">                        f.remove(F)</span><br><span class="line">                        <span class="keyword">for</span> G <span class="keyword">in</span> f:</span><br><span class="line">                            g = f.copy()</span><br><span class="line">                            g.remove(G)</span><br><span class="line">                            <span class="keyword">for</span> H <span class="keyword">in</span> g:</span><br><span class="line">                                h = g.copy()</span><br><span class="line">                                h.remove(H)</span><br><span class="line">                                <span class="keyword">for</span> I <span class="keyword">in</span> h:</span><br><span class="line">                                    <span class="keyword">if</span> A+B+C == D+E+F == G+H+I == A+D+G == B+E+H == C+F+I == A+E+I == C+E+G == <span class="number">15</span>:</span><br><span class="line">                                        print(<span class="string">'''</span></span><br><span class="line"><span class="string">                                        -------------</span></span><br><span class="line"><span class="string">                                        | &#123;0&#125; | &#123;1&#125; | &#123;2&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;3&#125; | &#123;4&#125; | &#123;5&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;6&#125; | &#123;7&#125; | &#123;8&#125; |</span></span><br><span class="line"><span class="string">                                        -------------'''</span>.format(A, B, C, D, E, F, G, H, I))</span><br><span class="line"></span><br><span class="line">end = time.clock()</span><br><span class="line">print(<span class="string">'Running time: %s Seconds'</span>%(end-start))</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现方式2"><a href="#实现方式2" class="headerlink" title="实现方式2"></a>实现方式2</h4><p>使用列表生成式实现各数字判断<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]:</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != A]:</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                <span class="keyword">for</span> E <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                    <span class="keyword">for</span> F <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                        <span class="keyword">for</span> G <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                            <span class="keyword">for</span> H <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != G <span class="keyword">and</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                                <span class="keyword">for</span> I <span class="keyword">in</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x != H <span class="keyword">and</span> x != G <span class="keyword">and</span> x != F <span class="keyword">and</span> x != E <span class="keyword">and</span> x != D <span class="keyword">and</span> x != C <span class="keyword">and</span> x != B <span class="keyword">and</span> x != A]:</span><br><span class="line">                                    <span class="keyword">if</span> A+B+C == D+E+F == G+H+I == A+D+G == B+E+H == C+F+I == A+E+I == C+E+G == <span class="number">15</span>:</span><br><span class="line">                                        print(<span class="string">'''</span></span><br><span class="line"><span class="string">                                        -------------</span></span><br><span class="line"><span class="string">                                        | &#123;0&#125; | &#123;1&#125; | &#123;2&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;3&#125; | &#123;4&#125; | &#123;5&#125; |</span></span><br><span class="line"><span class="string">                                        | &#123;6&#125; | &#123;7&#125; | &#123;8&#125; |</span></span><br><span class="line"><span class="string">                                        -------------'''</span>.format(A, B, C, D, E, F, G, H, I))</span><br><span class="line">end = time.clock()</span><br><span class="line">print(<span class="string">'Running time: %s Seconds'</span>%(end-start))</span><br></pre></td></tr></table></figure></p><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><h4 id="实现方式1-1"><a href="#实现方式1-1" class="headerlink" title="实现方式1"></a>实现方式1</h4><p><img src="http://cdn.rosinelan.com/blog/program/python-jiucopy-result.png" alt="python-jiucopy-result" title="python-jiucopy-result">  </p><h4 id="实现方式2-1"><a href="#实现方式2-1" class="headerlink" title="实现方式2"></a>实现方式2</h4><p><img src="http://cdn.rosinelan.com/blog/program/python-jiulist-result.png" alt="python-jiulist-result" title="python-jiulist-result"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>根据题目2输出结果中的运行时间可知，方式1运行0.3秒，方式2运行1.4秒，相差5倍。<br>根据代码逻辑，方式1在嵌套循环中直接使用remove()方式删除；方式2需要在嵌套循环中进行比较，这是导致两种算法时间差异的主要原因。<br>同理，题目1中通过对题目分析，确定数字A和D的取值，不需要从1-9进行循环，对程序运行时间肯定也有大幅的提升。<br>好代码好算法，值得关注。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目一&quot;&gt;&lt;a href=&quot;#题目一&quot; class=&quot;headerlink&quot; title=&quot;题目一&quot;&gt;&lt;/a&gt;题目一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ABCD乘9=DCBA，A=? B=? C=? D=?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A和D肯定不为0，B和C取值范围为0-9&lt;/li&gt;
&lt;li&gt;以A开头的四位数乘9得到四位数，由于判断A肯定为1&lt;/li&gt;
&lt;li&gt;A为1，那么乘以9得到的四位数，D肯定为9
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数字" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
      <category term="九宫格" scheme="https://rosinelan.github.io/tags/%E4%B9%9D%E5%AE%AB%E6%A0%BC/"/>
    
      <category term="计算" scheme="https://rosinelan.github.io/tags/%E8%AE%A1%E7%AE%97/"/>
    
      <category term="乘法" scheme="https://rosinelan.github.io/tags/%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python练习题目(一)</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E7%BB%83%E4%B9%A0%E9%A2%98%E7%9B%AE-%E4%B8%80/"/>
    <id>https://rosinelan.github.io/2018/04/04/python练习题目-一/</id>
    <published>2018-04-04T13:48:43.000Z</published>
    <updated>2018-04-04T14:16:04.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><blockquote><p>输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。  </p></blockquote><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>利用while语句,条件为输入的字符不为’\n’。  <a id="more"></a></li><li>用isdigit函数判断是否数字。  </li><li>用isalpha判断是否字母。   <h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"Please input a string:"</span>)</span><br><span class="line">digit = <span class="number">0</span></span><br><span class="line">alpha = <span class="number">0</span></span><br><span class="line">space = <span class="number">0</span></span><br><span class="line">other = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'\\n'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i.isdigit():</span><br><span class="line">            digit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isalpha():</span><br><span class="line">            alpha += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i.isspace():</span><br><span class="line">            space += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            other += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"数字个数:&#123;0&#125;;字母个数:&#123;1&#125;;空格个数:&#123;2&#125;;其他字符个数:&#123;3&#125;"</span>.format(digit, alpha, space, other))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise1.png" alt="python-for-excrise1" title="python-for-excrise1"><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise11.png" alt="python-for-excrise11" title="python-for-excrise11"><br><img src="http://cdn.rosinelan.com/blog/program/python-for-excrise12.png" alt="python-for-excrise12" title="python-for-excrise12"></p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><blockquote><p>计算0!+1!+….+n!  </p></blockquote><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><ul><li>0! == 1。1! == 1。</li><li>先计算 n!，然后再循环求和</li><li>根据 n! = n <em> (n-1) </em> (n-2) <em> …. </em> 1，采用循环方式计算n!</li><li>根据 n! = n * (n - 1)!，采用递归方式计算n!<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor1</span><span class="params">(x)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, x + <span class="number">1</span>):</span><br><span class="line">        res *= a</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"应该输入不小于0的数！"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h3 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h3><h4 id="调用普通函数"><a href="#调用普通函数" class="headerlink" title="调用普通函数"></a>调用普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factor1(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p><h4 id="调用递归函数"><a href="#调用递归函数" class="headerlink" title="调用递归函数"></a>调用递归函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal = <span class="number">0</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n+<span class="number">1</span>):</span><br><span class="line">    cal += factorial(i)</span><br><span class="line">print(cal)</span><br></pre></td></tr></table></figure><p>结果为<code>154</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; title=&quot;题目1&quot;&gt;&lt;/a&gt;题目1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;程序分析&quot;&gt;&lt;a href=&quot;#程序分析&quot; class=&quot;headerlink&quot; title=&quot;程序分析&quot;&gt;&lt;/a&gt;程序分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用while语句,条件为输入的字符不为’\n’。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="阶乘" scheme="https://rosinelan.github.io/tags/%E9%98%B6%E4%B9%98/"/>
    
      <category term="字符" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="数字" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>python条件判断和循环</title>
    <link href="https://rosinelan.github.io/2018/04/04/python%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>https://rosinelan.github.io/2018/04/04/python条件判断和循环/</id>
    <published>2018-04-04T11:08:55.000Z</published>
    <updated>2018-04-04T13:46:42.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>条件判断使用<code>if</code>，语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>其中<code>elif</code>和<code>else</code>均为可选。<br>下面以实例进行说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br></pre></td></tr></table></figure></p><p>python中条件判断主要根据缩进和冒号进行判断，假如if中的条件为True，则执行if下一行缩进的print语句，否则什么也不做。<br>下面的语句则添加了<code>else</code>条件，当<code>if</code>条件为True时执行后面缩进的print语句，否则执行<code>else</code>后面缩进的语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>下面的语句中添加了<code>elif</code>和<code>else</code>条件。<br>当<code>if</code>条件为True时执行后面缩进的print语句，剩余的<code>elif</code>和<code>else</code>均不执行。<br>当<code>if</code>条件为False时执行<code>elif</code>语句，当<code>elif</code>条件为True时，执行其后面缩进的print语句，剩下的<code>else</code>不执行。<br>当<code>if</code>和<code>elif</code>条件均为False时，执行<code>else</code>后面缩进的print语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"你已经是成年人了。"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"你已经是个少年了。"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还是个小孩子。"</span>)</span><br></pre></td></tr></table></figure></p><p>由此可见<code>if</code>条件判断是从上向下执行，当有条件成立时执行对应的缩进语句，剩余的条件将忽略。<br>判断字符串<code>str</code>是否为空的条件<code>if str.strip():</code><br>判断对象<code>d1</code>是否为字典的条件<code>if isinstance(d1,dict):</code><br>根据键盘输入判断数字是正数、负数还是零。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line"><span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是正数"</span>.format(number))</span><br><span class="line"><span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是零"</span>.format(number))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"输入的&#123;0&#125;是负数"</span>.format(number))</span><br></pre></td></tr></table></figure></p><p>python中通过input接受的均为字符串，所以使用强制转换将类型转换为整型<code>int(number)</code>。  </p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环主要是解决重复性的问题，例如类似计算1到1000的和这类问题。<br>python中循环主要有<code>for .. in ..</code>和<code>while</code>循环。   </p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环的语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sequence:</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p><code>for i in ..</code>循环是将每个元素代入<code>i</code>中然后执行缩进的语句<br>计算1-10的和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>当我们要计算<code>1-100</code>甚至<code>1-10000</code>的和时候难道要从1写道10000嘛？<br>使用<code>range()</code>函数可以生成整数序列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>根据上面输出可以看到<code>range()</code>函数输出的序列包含左面数字，不包含右面数字。<br>根据<code>for</code>循环和<code>range</code>函数实现乘法口诀。<br>代码思路<br>根据乘法口诀的特点，<code>a</code>表示乘号前的数字，<code>b</code>表示乘号后的数字。<br><code>b</code>总是和它所在的行数相等。<br><code>a</code>是变化的，但变化范围总是从<code>1至b</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, b+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"&#123;0&#125; x &#123;1&#125; = &#123;2&#125;\t"</span>.format(a, b, a*b), end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/python-for-multi.png" alt="python-for-multi" title="python-for-multi"><br>为使输出美观，使用了<code>print()</code>中的<code>end=&quot;&quot;</code>参数，默认情况下print()输出结束之后是换行符，可以自定义。<br>此处内层for循环的缩进语句中print()不换行；使用<code>\t</code>制表符进行对齐。<br>外层循环时换行(即乘法表每一行结束时换行)。   </p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while循环语法格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></p><p>while循环，只要条件满足就不断循环，直到条件不满足时才退出循环。<br>下面是1-100求和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum += n    <span class="comment">#等价于sum = sum + n</span></span><br><span class="line">    n -= <span class="number">1</span>    <span class="comment">#等价于n = n -1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></p><p>针对前面从键盘输入，再判断是正数、负数还是零的代码进行修改<br>增加判断键盘输入是否为数字，若不是数字则要求重新输入，直到输入数字，能够正确判断。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    number = input(<span class="string">"Please input a number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> number.strip():</span><br><span class="line">        <span class="keyword">if</span> number.isdigit():</span><br><span class="line">            <span class="keyword">if</span> int(number) &gt; <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是正数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> int(number) == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是零。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"输入的&#123;0&#125;是负数。"</span>.format(number))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入的不是数字，请重新输入。"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入的是空格，请重新输入。"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure></p><p>其中<code>while 1</code>表示死循环，即除非主动跳出循环，否则将永远循环下去。<br>主动跳出循环使用<code>break</code>实现。<br>当输入的不是数字或者是空格时要求继续输入，该功能实现则是使用<code>continue</code>实现。  </p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break语句可以在循环过程中直接跳出本层循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:    <span class="comment">#在i大于5的时候执行break语句结束循环</span></span><br><span class="line">        <span class="keyword">break</span>    <span class="comment">#执行break之后大于5的数字将全部无法输出</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue语句可以提前结束本轮循环，直接开始下一轮循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:    <span class="comment">#如果i是偶数则执行continue</span></span><br><span class="line">        <span class="keyword">continue</span>    <span class="comment">#执行continue则直接重新开始循环，不输出本次的i</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>需要注意，<code>break</code>和<code>continue</code>语句不可滥用，通常都是配合<code>if</code>语句使用。<br>在大多数情况下可以通过逻辑判断等其它方式实现对应功能，而使用<code>break</code>或<code>continue</code>语句容易造成代码逻辑分叉多，容易出错。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;headerlink&quot; title=&quot;条件判断&quot;&gt;&lt;/a&gt;条件判断&lt;/h2&gt;&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;p&gt;条件判断使用&lt;code&gt;if&lt;/code&gt;，语法格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &amp;lt;条件判断&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;执行&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="if" scheme="https://rosinelan.github.io/tags/if/"/>
    
      <category term="for" scheme="https://rosinelan.github.io/tags/for/"/>
    
      <category term="while" scheme="https://rosinelan.github.io/tags/while/"/>
    
      <category term="条件判断" scheme="https://rosinelan.github.io/tags/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    
      <category term="循环" scheme="https://rosinelan.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译安装openssh</title>
    <link href="https://rosinelan.github.io/2018/04/04/ubuntu%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85openssh/"/>
    <id>https://rosinelan.github.io/2018/04/04/ubuntu编译安装openssh/</id>
    <published>2018-04-04T09:45:59.000Z</published>
    <updated>2018-04-05T01:35:12.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>新装的<code>UBUNTU 14.04.5 LTS i686</code>版本，可<code>VNC</code>连接。<br>已安装<code>openssl 1.0.1f</code>版本，未安装zlib和openssl。<br>现需要安装openssh用于远程连接，停用vnc。   </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>安装openssh主要依赖zlib和openssl，出于安全考虑，建议均安装官方发布的最新稳定版本。<br><a id="more"></a><br>openssh 7.7p1要求openssl版本小于1.1.0。<br>下载均建议从官方网站下载，不建议从第三方渠道下载。<br>zlib官方地址<a href="http://www.zlib.net/" target="_blank" rel="noopener">点击访问</a><br>openssl官方地址<a href="https://www.openssl.org/" target="_blank" rel="noopener">点击访问</a><br>openssh官方地址<a href="http://www.openssh.com/" target="_blank" rel="noopener">点击访问</a><br>均选择源码的tar.gz包下载。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装zlib和openssl，最后安装openssh。</p><h3 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openssl-1.0.2n.tar.gz</span><br><span class="line">cd openssl-1.0.2n</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>由于系统原来存在openssl其他版本，备份原版本。<br><code>mv /usr/bin/openssl /usr/bin/openssl.old</code><br>新建软链接(路径根据<code>make install</code>结果可以看到，根据实际情况创建即可)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/local/bin/openssl</span><br><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure></p><p>同时需要更新openssl动态库目录(此处目录路径需根据实际情况调整)<br><code>echo &quot;/usr/local/ssl/lib&quot; &gt;&gt; /etc/ld.so.conf</code><br>更新库目录缓存<br><code>ldconfig -v</code><br>确认openssl版本<br><code>openssl version</code> </p><h3 id="安装openssh"><a href="#安装openssh" class="headerlink" title="安装openssh"></a>安装openssh</h3><p>configure时候需要指定openssl安装目录，防止openssh无法找到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf openssh-7.7p1.tar.gz</span><br><span class="line">cd openssh-7.7p1</span><br><span class="line">./configure --with-ssl-dir=/usr/local/ssl</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>若<code>make install</code>时出现下面错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Privilege separation user sshd does not exist</span><br><span class="line">make: [check-config] Error 255 (ignored)</span><br></pre></td></tr></table></figure></p><p>需要在<code>/etc/passwd</code>中添加<code>sshd</code>用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/passwd</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br></pre></td></tr></table></figure></p><p>然后重新<code>make install</code>即可。<br>此处报错是<code>Privilege separation</code>(特权分离)，是openssh的一种安全机制。  </p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="sshd服务启动"><a href="#sshd服务启动" class="headerlink" title="sshd服务启动"></a>sshd服务启动</h3><p><code>/usr/local/sbin/sshd</code></p><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><p>由于编译安装，ssh未添加至系统服务，故为防止重启之后无法连接，添加开机自启动。<br><code>sed -i &#39;$i\/usr/local/sbin/sshd&#39; /etc/rc.local</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;新装的&lt;code&gt;UBUNTU 14.04.5 LTS i686&lt;/code&gt;版本，可&lt;code&gt;VNC&lt;/code&gt;连接。&lt;br&gt;已安装&lt;code&gt;openssl 1.0.1f&lt;/code&gt;版本，未安装zlib和openssl。&lt;br&gt;现需要安装openssh用于远程连接，停用vnc。   &lt;/p&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;安装openssh主要依赖zlib和openssl，出于安全考虑，建议均安装官方发布的最新稳定版本。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="UBUNTU" scheme="https://rosinelan.github.io/tags/UBUNTU/"/>
    
      <category term="OPENSSL" scheme="https://rosinelan.github.io/tags/OPENSSL/"/>
    
      <category term="OPENSSH" scheme="https://rosinelan.github.io/tags/OPENSSH/"/>
    
      <category term="ZLIB" scheme="https://rosinelan.github.io/tags/ZLIB/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡导致的视图状态消息验证代码错误</title>
    <link href="https://rosinelan.github.io/2018/04/03/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AF%BC%E8%87%B4%E7%9A%84%E8%A7%86%E5%9B%BE%E7%8A%B6%E6%80%81%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81%E4%BB%A3%E7%A0%81%E9%94%99%E8%AF%AF/"/>
    <id>https://rosinelan.github.io/2018/04/03/负载均衡导致的视图状态消息验证代码错误/</id>
    <published>2018-04-03T02:59:58.000Z</published>
    <updated>2018-04-03T03:32:42.088Z</updated>
    
    <content type="html"><![CDATA[<p>windows下<code>.NET V4.0</code>应用程序通过<code>IIS8.0</code>对外提供服务，最近迁移采用<code>F5</code>做<code>负载均衡</code>，通过集群VIP访问出现<code>视图状态 MAC 的验证失败</code>错误提示，详细报错<br><a id="more"></a><br><img src="http://cdn.rosinelan.com/blog/system/windows-mac-error.png" alt="windows-mac-error" title="windows-mac-error"><br>根据错误提示信息可以很容易看到错误原因及如何解决，更详细的解决方案可参考官方的<a href="https://support.microsoft.com/zh-cn/help/2915218/resolving-view-state-message-authentication-code-mac-errors" target="_blank" rel="noopener">解决视图状态消息验证代码 (MAC) 错误</a><br>注意：针对不同版本的.net和IIS解决方法可能不尽相同。  </p><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>当不在config文件中指定<code>machineKey</code>元素，ASP.NET将为应用程序使用自动生成的密钥，但自动生成的密钥是服务器本地密钥，且集群中每台服务器都会自己生成密钥，且在负载均衡层面并未对此进行处理，这样当一个服务器生成的_VIEWSTATE负载被其他服务器使用就会遇到MAC验证失败问题。<br>当采用负载均衡集群提供服务时，ASP.NET要求所有服务器都必须具有相同的<code>machineKey</code>。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在其中一台服务器为应用程序生成machineKey,拷贝至其他服务器。<br>选择集群中的一台服务器<br>IIS管理器&gt;服务器&gt;网站&gt;Default Web Site ，选择需要添加的应用程序，在右面的功能试图中双击“计算机密钥”，进入下面界面。<br><img src="http://cdn.rosinelan.com/blog/system/windows-gen-key.png" alt="windows-gen-key" title="windows-gen-key"><br>选择验证方法和加密方法;<br>验证密钥和解密密钥2个复选框均取消;<br>点击右侧的生成密钥，可以看到验证密钥和解密密钥对应的文本框中生成一串字母+数字的组合，然后点击应用。<br>以该服务器生成的密钥为基准，在其它服务器计算机密钥中选择相同的验证方法和加密方法，同时将验证密钥和解密密钥复制至其它服务器。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows下&lt;code&gt;.NET V4.0&lt;/code&gt;应用程序通过&lt;code&gt;IIS8.0&lt;/code&gt;对外提供服务，最近迁移采用&lt;code&gt;F5&lt;/code&gt;做&lt;code&gt;负载均衡&lt;/code&gt;，通过集群VIP访问出现&lt;code&gt;视图状态 MAC 的验证失败&lt;/code&gt;错误提示，详细报错&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/categories/system/WINDOWS/"/>
    
    
      <category term="windows" scheme="https://rosinelan.github.io/tags/windows/"/>
    
      <category term="负载均衡" scheme="https://rosinelan.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="MAC" scheme="https://rosinelan.github.io/tags/MAC/"/>
    
      <category term="machinekey" scheme="https://rosinelan.github.io/tags/machinekey/"/>
    
      <category term="视图状态" scheme="https://rosinelan.github.io/tags/%E8%A7%86%E5%9B%BE%E7%8A%B6%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型(二)</title>
    <link href="https://rosinelan.github.io/2018/04/01/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/01/python数据类型-二/</id>
    <published>2018-04-01T12:37:46.000Z</published>
    <updated>2018-04-14T03:34:08.197Z</updated>
    
    <content type="html"><![CDATA[<p>继续python数据类型。  </p><h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>dict是dictionary的缩写，其存储数据以<code>key:value</code>方式，类似java中的<code>map</code>，javascripts中的<code>jason</code>。字典可以存储任意对象，也可以是不同的数据类型。<br>字典的创建是每个key-value之间使用<code>:</code>(冒号)分隔，每个<code>key:value</code>对之间使用<code>,</code>(逗号)分隔，整个字典使用<code>{}</code>(大括号)括起来，格式为<code>d = {key1: value1, key2: value2 }</code>。字典中的key不能相同，value可以相同。字典中的key必须是不可变的,数字、字符串、元组都可以作为key，但是列表不可以作为key。<br><a id="more"></a><br>字典定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = dict(name = <span class="string">"xiaohh"</span>, age = <span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = dict([(<span class="string">"name"</span>,<span class="string">"xiaohh"</span>),(<span class="string">"age"</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d3)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaohh'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p><p>访问字典中的值，直接将对应的key放入[]即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"name"</span>]</span><br><span class="line"><span class="string">'xiahh'</span></span><br></pre></td></tr></table></figure></p><p>当访问的key不存在时将会报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"address"</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'address'</span></span><br></pre></td></tr></table></figure></p><p>修改字典<br>既可以新增<code>key:value</code>键值对，也可以修改已有的内容。<br>新增键值对<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"address"</span>] = <span class="string">"beijing"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>修改已有内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"age"</span>] = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><p>当对同一值进行多次修改时，前面的值将被覆盖。<br>删除字典<br>可以对字典的键值进行删除，也可以直接删除字典。<br>删除键值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d1[<span class="string">"age"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>删除字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'d1'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>下面介绍字典常用方法  </p><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>返回指定键的值，若值在字典中不存在则返回默认值(默认值为None，可自定义)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"name"</span>))</span><br><span class="line">xiahh</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"address"</span>))    <span class="comment">#不存在则返回默认值None</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1.get(<span class="string">"address"</span>,<span class="number">-1</span>))    <span class="comment">#此处-1为自定义的默认值，当不存在时则返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault()"></a>setdefault()</h4><p>若查找的键在字典中则返回对应值，若不存在则插入对应的键及默认值(默认值为None，可自定义)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"name"</span>)</span><br><span class="line"><span class="string">'xiahh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"address"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.setdefault(<span class="string">"num"</span>,<span class="number">168</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="keyword">None</span>, <span class="string">'num'</span>: <span class="number">168</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><p>以列表形式返回字典中所有键。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.keys()</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br></pre></td></tr></table></figure></p><h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><p>以列表形式返回字典中所有值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.values()</span><br><span class="line">dict_values([<span class="string">'xiahh'</span>, <span class="number">18</span>])</span><br></pre></td></tr></table></figure></p><h4 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h4><p>以列表的形式返回可遍历的元组数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.items()</span><br><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'xiahh'</span>), (<span class="string">'age'</span>, <span class="number">18</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,j <span class="keyword">in</span> d1.items(): print(i,j)</span><br><span class="line">...</span><br><span class="line">name xiahh</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>说明：在<code>python2</code>中存在<code>items()</code>和<code>iteritems()</code>2种方法，<code>items()</code>返回一个字典的拷贝列表，占用额外内存；<code>iteritems()</code>返回字典列表操作后的迭代，不占用额外内存。在<code>python3</code>中使用<code>items()</code>方法替代<code>iteritems()</code>方法，可以采用for进行循环遍历。</p><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><p>将参数中的字典更新至原字典中。无返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.update(&#123;<span class="string">"address"</span>: <span class="string">"beijing"</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'beijing'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除字典中指定键对应的值，返回值为被删除的值。其中键必须给出，若指定的键不存在则返回默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"name"</span>)    <span class="comment">#给出的键存在则返回被删除的值</span></span><br><span class="line"><span class="string">'xiahh'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"address"</span>)    <span class="comment">#给出的键不存在且不指定默认值，报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'address'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.pop(<span class="string">"address"</span>,<span class="number">-1</span>)    <span class="comment">#给出的键不存在，指定默认值，返回默认值</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清空字典。无返回值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><p>返回字典的一个浅拷贝。使用<code>=</code>进行的直接赋值和<code>copy()</code>进行的浅拷贝不一样，赋值只是对原对象的引用；浅拷贝则是对父对象进行拷贝，对象的子对象则是引用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span>, <span class="string">"num"</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = d1    <span class="comment">#d2是赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = d1.copy()    <span class="comment">#d3是浅拷贝，其中num对应的值为元组，对于字典属于子对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"name"</span>]=<span class="string">"superman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">"num"</span>].remove(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'superman'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d2)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'superman'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d3)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiahh'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'num'</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure></p><h4 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h4><p>将两个列表组成字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = (<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = (<span class="string">"xiaohh"</span>,<span class="string">"18"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = dict(zip(list1, list2))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d1)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaohh'</span>, <span class="string">'age'</span>: <span class="string">'18'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>对字典进行排序，按照键或值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="string">"18"</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(d1.items(),key=<span class="keyword">lambda</span> d: d[<span class="number">1</span>]))    <span class="comment">#按照值进行排序</span></span><br><span class="line">[(<span class="string">'age'</span>, <span class="string">'18'</span>), (<span class="string">'name'</span>, <span class="string">'xiahh'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sorted(d1.items(),key=<span class="keyword">lambda</span> d: d[<span class="number">0</span>]))     <span class="comment">#按照键进行排序</span></span><br><span class="line">[(<span class="string">'age'</span>, <span class="string">'18'</span>), (<span class="string">'name'</span>, <span class="string">'xiahh'</span>)]</span><br></pre></td></tr></table></figure></p><p>需要注意，排序只能针对同一类型，字符串或者数字，不能用于不同类型值。<br>当字典定义为<code>d1 = {&quot;name&quot;: &quot;xiahh&quot;, &quot;age&quot;: 18 }</code>，只能使用键进行排序，不能使用值进行排序，否则报错。<br><code>TypeError: &#39;&lt;&#39; not supported between instances of &#39;int&#39; and &#39;str&#39;</code></p><p>注意：<code>dict</code>内部存放顺序和<code>key</code>放入的顺序没有关系。<br>和<code>list</code>相比，<code>dict</code>有一下几个特点：  </p><ul><li>查找和插入速度极快，不会随着key的增加而变慢。  </li><li>需要占用大量内存，内存浪费多。  </li></ul><p>而<code>list</code>则相反：  </p><ul><li>查找和插入的时间随着元素的增加而增加。  </li><li>占用空间小，浪费内存很少。  </li></ul><p>所以<code>dict</code>是用空间来换取时间的一种方法。<br><code>dict</code>可以用在需要告诉查找的很多地方，特别注意dict的key必须是不可变对象。这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得到的结果不同，那么dict内部就完全混乱了。这种通过key计算位置的算法称为哈希算法(Hash)。<br>在python中，字符串、整数等都是不可变的，可以作为dict的key。list的可变的，不可以作为dict的key。  </p><h3 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h3><p><code>set</code>是一个无序不重复元素的序列。基本功能是进行成员关系测试和删除重复元素。<br>可以使用大括号<code>{}</code>或者<code>set()</code>函数创建集合，但是：创建一个空的集合必须使用<code>set()</code>而不是<code>{}</code>，<code>{}</code>是用来创建一个空字典的。  </p><h4 id="创建set"><a href="#创建set" class="headerlink" title="创建set"></a>创建set</h4><p>创建set需要提供一个list作为输入集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><p>传入的参数<code>[1, 2, 3]</code>是一个list，显示的<code>{1, 2, 3}</code>说明这个set内部有这3个元素，显示的顺序并不表示set是有序的。  </p><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><p>重复元素在set中会自动被过滤。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但无效果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>通过<code>remove(key)</code>方法可以删除元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><p>set可以看做数学意义上的无序和无重复元素的集合，因此两个set可以进行数学意义上的交集、并集等操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 - s2</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 ^ s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></p><p>set和dict唯一的区别在于没有存储对应的value，但是set原理和dict一样，同样不可放入可变对象。因为无法判断两个可变对象是否相等，也就无法判断set内部不会有重复元素。  </p><h3 id="其他通用方法"><a href="#其他通用方法" class="headerlink" title="其他通用方法"></a>其他通用方法</h3><h4 id="help"><a href="#help" class="headerlink" title="help()"></a>help()</h4><p>用于查看帮助信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(d1)</span><br></pre></td></tr></table></figure></p><p>可以查看到字典的定义及内置方法等信息。<br><img src="http://cdn.rosinelan.com/blog/program/python-help-dict.png" alt="python-help-dict" title="python-help-dict"></p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>int()<br>str()<br>list()<br>tuple()<br>dict()</p><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><p>返回对象的长度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str)</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;    <span class="comment">#字典返回键的个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(d1)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><p>返回对象类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(str)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; d1 = &#123;"name": "xiahh", "age": 18 &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h4><p>判断一个对象是否是已知的类型。如果是返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">"name"</span>: <span class="string">"xiahh"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(d1,dict)    <span class="comment">#第二个参数可以是一种数据类型</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a, (int, str, dict))    <span class="comment">#第二个参数是数据类型组成的元组</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>注意：  </p><ul><li>type() 不会认为子类是一种父类类型</li><li>isinstance() 认为子类是父类类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(isinstance(A(), A))  <span class="comment"># returns True</span></span><br><span class="line">print(type(A()) == A)      <span class="comment"># returns True</span></span><br><span class="line">print(isinstance(B(), A))    <span class="comment"># returns True</span></span><br><span class="line">print(type(B()) == A)        <span class="comment"># returns False</span></span><br></pre></td></tr></table></figure><h4 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h4><p>将一个可遍历的数据对象(如列表、元组或字符串)组合成一个索引序列，同时列出数据和数据下标。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = [<span class="string">"春"</span>, <span class="string">"夏"</span>, <span class="string">"秋"</span>, <span class="string">"冬"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(t1))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">'春'</span>), (<span class="number">1</span>, <span class="string">'夏'</span>), (<span class="number">2</span>, <span class="string">'秋'</span>), (<span class="number">3</span>, <span class="string">'冬'</span>)]</span><br></pre></td></tr></table></figure></p><p>常用在<code>for</code>循环中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = [<span class="string">"春"</span>, <span class="string">"夏"</span>, <span class="string">"秋"</span>, <span class="string">"冬"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(t1):</span><br><span class="line"><span class="meta">... </span>    print(index, item)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> 春</span><br><span class="line"><span class="number">1</span> 夏</span><br><span class="line"><span class="number">2</span> 秋</span><br><span class="line"><span class="number">3</span> 冬</span><br></pre></td></tr></table></figure></p><h3 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h3><p>python基础数据类型共有6种，其中不可变数据类型有4个，可变数据类型2个。  </p><ul><li>不可变：数字、字符串(str)、元组(tuple)、集合(set)。</li><li>可变：列表(list)、字典(dict)。<br>可变对象，例如list，当对list进行操作时，list内部的内容是会变化的。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">```  </span><br><span class="line">不可变对象，调用自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样就保证了不可变对象本身不变。  </span><br><span class="line">``` python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = str1.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2</span><br><span class="line"><span class="string">'Abc'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续python数据类型。  &lt;/p&gt;
&lt;h3 id=&quot;字典-dict&quot;&gt;&lt;a href=&quot;#字典-dict&quot; class=&quot;headerlink&quot; title=&quot;字典 dict&quot;&gt;&lt;/a&gt;字典 dict&lt;/h3&gt;&lt;p&gt;dict是dictionary的缩写，其存储数据以&lt;code&gt;key:value&lt;/code&gt;方式，类似java中的&lt;code&gt;map&lt;/code&gt;，javascripts中的&lt;code&gt;jason&lt;/code&gt;。字典可以存储任意对象，也可以是不同的数据类型。&lt;br&gt;字典的创建是每个key-value之间使用&lt;code&gt;:&lt;/code&gt;(冒号)分隔，每个&lt;code&gt;key:value&lt;/code&gt;对之间使用&lt;code&gt;,&lt;/code&gt;(逗号)分隔，整个字典使用&lt;code&gt;{}&lt;/code&gt;(大括号)括起来，格式为&lt;code&gt;d = {key1: value1, key2: value2 }&lt;/code&gt;。字典中的key不能相同，value可以相同。字典中的key必须是不可变的,数字、字符串、元组都可以作为key，但是列表不可以作为key。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数据类型" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="字典" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="https://rosinelan.github.io/2018/03/30/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://rosinelan.github.io/2018/03/30/python数据类型/</id>
    <published>2018-03-30T13:22:06.000Z</published>
    <updated>2018-04-02T03:08:22.075Z</updated>
    
    <content type="html"><![CDATA[<p>python作为一门编程语言，和其他编程语言类似，都是有自己的语法规则，编译器将按照语法规则编写的程序代码转换为计算机可识别的机器码，然后执行。<br>python的基本语法规则  </p><ol><li>代码逻辑通过缩进区分，一般都是使用4个空格进行缩进。缩进不能Tab键和空格混用，否则报错。   </li><li><code>#</code>号之后的语句都是注释，编译器将会忽略;其它每一行为一个语句；以<code>:</code>结尾的语句，其下面的缩进语句识别为代码块。</li><li>python大小写敏感。  <a id="more"></a><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="数字运算符"><a href="#数字运算符" class="headerlink" title="数字运算符"></a>数字运算符</h3>数字运算符有<code>+</code>(加) <code>-</code>(减) <code>*</code>(乘) <code>/</code>(除) <code>//</code>(地板除) <code>%</code>(取余)，其使用方法和数学中的一致。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><p>除法<code>/</code>的结果是浮点数，不论是否是整除。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span>/<span class="number">6</span></span><br><span class="line"><span class="number">1.8333333333333333</span></span><br></pre></td></tr></table></figure></p><p>地板除<code>//</code>的结果是整数，不论是否可以除尽(只取整数部分，不是四舍五入)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>//<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>//<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span>//<span class="number">6</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>取余<code>%</code>结果是两个整数相除的余数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>%<span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符主要有<code>==</code>(等于) <code>!=</code>(不等于) <code>&gt;</code>大于() <code>&lt;</code>(小于) <code>&gt;=</code>(大于等于) <code>&lt;=</code>(小于等于)，其返回的结果是布尔值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> != <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符主要有<code>=</code> <code>+=</code> <code>-=</code> <code>*=</code>。<br>赋值运算符<code>=</code>需要和前面关系运算符<code>==</code>区分，和数学中的表示方法有区别。<br>要对变量<code>a</code>赋值为1，则使用<code>a = 1</code>。<br><code>a += b</code> 等价于<code>a = a + b</code>;<code>a -= b</code> 等价于<code>a = a - b</code>;<code>a *= b</code> 等价于<code>a = a * b</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a -= <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>注意，python中对变量进行赋值不需要事先声明变量的类型，python会根据变量的值进行动态调整，所以python是动态语言，与之对应的就是静态语言，例如JAVA和C就是静态语言。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a = "111"</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>如上表示，变量a首先赋值为数字1，此时它是整型；再次给变量a赋值为字符串”111”，此时它变为字符串类型。<br>但C语言中当声明一个int类型的变量a时，赋值时只能为整型，若有其它类型将报错。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符有<code>and</code>(与)、<code>or</code>(或)、<code>not</code>(非)3种，它们用于布尔运算。<br><code>and</code>表示只有都为True，运算结果才是True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p><code>or</code>表示只要有一个为True，运算结果就是True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p><code>not</code>表示只有取反，True运算结果为False，False运算结果为True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型-int"><a href="#整型-int" class="headerlink" title="整型 int"></a>整型 int</h3><p>整数类型和数学上表示的一样，包括正整数、负整数和零等。<br>例如<code>0</code>,<code>200</code>,<code>-200</code>等都属于整型。</p><h3 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型 float"></a>浮点型 float</h3><p>浮点数类型就是数学中的小数。<br>例如<code>2.11</code>,<code>-2.11</code>,<code>3.1415926</code>等都属于小数。  </p><h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型 bool"></a>布尔型 bool</h3><p>布尔类型的值和布尔代数的一样有2种，分别是<code>Ture</code>,<code>False</code>。<br>布尔值可以通过布尔代数运算得到，也可以使用<code>True</code>和<code>False</code>表示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt; <span class="number">5</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>另外需要注意区分大小写，否则在python中将报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'true'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>false</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'false'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串 str"></a>字符串 str</h3><p>在python中字符串可以使用<code>&#39;</code>或<code>&quot;</code>或<code>&#39;&#39;&#39;</code>括起来表示，但是推荐使用<code>&quot;</code>表示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'zifuchuan'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; c = "zifuchuan"</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(c)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; d = '''zifuchuan'''</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>字符串中可能会包含很多的字符，此时如何处理呢？<br>当字符串中包含<code>&#39;</code>时，使用<code>&quot;</code>表示即可。<br>当字符串中包含特殊字符时，可以使用转义字符<code>\</code>处理，转义字符本身可以使用<code>\\</code>表示，其它的特殊字符有<code>\n</code>(换行符)、<code>\t</code>(制表符)等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"I'm a superman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m a superman</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m a \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m a "superman"</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m \\a \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m \a "superman"</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = "I'</span>m \na \<span class="string">"superman\""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">I<span class="string">'m</span></span><br><span class="line"><span class="string">a "superman"</span></span><br></pre></td></tr></table></figure></p><p>前面有提到可以使用<code>&#39;&#39;&#39;</code>表示字符串，这样有啥好处呢？<br>当字符串有多行时，使用<code>\n</code>换行符表示会比较麻烦，此时可以使用<code>&#39;&#39;&#39;</code>表示多行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''I'm</span></span><br><span class="line"><span class="string"><span class="meta">... </span>a</span></span><br><span class="line"><span class="string"><span class="meta">... </span>superman</span></span><br><span class="line"><span class="string"><span class="meta">... </span>!'''</span>)</span><br><span class="line">I<span class="string">'m</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">superman</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的<code>...</code>和<code>&gt;&gt;&gt;</code>一样属于提示符，表示此时是接着上一行继续进行输入。<br>赋值字符串不仅仅是为了赋值，更多的为了对赋值的内容进行处理，在python中内置了很多的字符串处理函数，要了解具体有哪些可以通过在pycharm中定义一个字符串，然后通过<code>str.</code>方式查看。<br><img src="http://cdn.rosinelan.com/blog/program/str-do-with.png" alt="str-do-with" title="str-do-with"><br>介绍几个常用字符串方法  </p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>检查字符串中是否包含子字符串，如果包含返回索引值(该子字符串在字符串中的起始位置)，如果不包含返回-1。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"qwertq"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'q'</span>))    <span class="comment">#从下标0开始查找第一个出现的子字符串，返回结果0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'a'</span>))    <span class="comment">#查找不到返回-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.find(<span class="string">'q'</span>,<span class="number">1</span>))    <span class="comment">#从下标1开始查找第一个出现的子字符串，返回结果5</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>把字符串中的旧字符串替换成新字符串，返回生成的新字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"qwertq"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.replace(<span class="string">'q'</span>,<span class="string">'8'</span>))</span><br><span class="line"><span class="number">8</span>wert8</span><br></pre></td></tr></table></figure></p><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>通过指定分隔符对字符串进行分割，返回分割后的字符串列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman !"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split( ))</span><br><span class="line">[<span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.split(<span class="string">'a'</span>))</span><br><span class="line">[<span class="string">"I'm "</span>, <span class="string">' superm'</span>, <span class="string">'n !'</span>]</span><br></pre></td></tr></table></figure></p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将序列中的元素以指定的字符连接生成一个新的字符串，返回新生成的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"Iamasuperman"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"-"</span>.join(str))</span><br><span class="line">I-a-m-a-s-u-p-e-r-m-a-n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = (<span class="string">"n"</span>,<span class="string">"a"</span>,<span class="string">"m"</span>,<span class="string">"e"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"-"</span>.join(str1))</span><br><span class="line">n-a-m-e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">""</span>.join(str1))</span><br><span class="line">name</span><br></pre></td></tr></table></figure></p><h4 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h4><p>移除字符串头尾的字符(默认为空格)，返回移除之后的新字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"   I'm a superman!  "</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.strip())</span><br><span class="line">I<span class="string">'m a superman!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; str1 = "####I'</span>m a superman!<span class="comment">#####"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str1.strip(<span class="string">"#"</span>))</span><br><span class="line">I<span class="string">'m a superman!</span></span><br></pre></td></tr></table></figure></p><h4 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h4><p>字符串格式化方法，使用传入的参数依次替换字符串中的{0}、{1}、{2}、{3}……、{n}。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"这是一只&#123;0&#125;,&#123;1&#125;个月大，重&#123;2&#125;千克."</span>.format(<span class="string">"猫"</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="string">'这是一只猫,5个月大，重2千克.'</span></span><br></pre></td></tr></table></figure></p><h4 id="startswith"><a href="#startswith" class="headerlink" title="startswith()"></a>startswith()</h4><p>检查字符串是否以指定的子字符串开头，如果是则返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.startswith(<span class="string">"I'm"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.startswith(<span class="string">"you're"</span>))</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h4 id="endswith"><a href="#endswith" class="headerlink" title="endswith()"></a>endswith()</h4><p>检查字符串是否以指定的子字符串结尾，如果是则返回True，否则返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"I'm a superman!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"!"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"man!"</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str.endswith(<span class="string">"man"</span>))</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p>列表是一种有序的集合；可以把字符串、数字、字典等任何东西添加到序列，其中的元素无任何关系；列表中可以随时添加和删除元素；列表自带索引，默认从0开始。<br>列表的创建是将用<code>,</code>(逗号)分隔的不同项使用<code>[]</code>(方括号)括起来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>,<span class="string">"a"</span>,<span class="string">"superman"</span>,<span class="string">"!"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list2 = [<span class="string">"I'm"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">"wu"</span>]</span><br></pre></td></tr></table></figure></p><p>要访问列表中的元素，使用索引即可(索引从0开始)。  当索引超出范围时会报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">4</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></p><p>访问列表中的最后一个元素可以使用<code>-1</code>，倒数第二个则是<code>-2</code>，以此类推。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-1</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-2</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">-5</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>下面介绍列表的常用方法  </p><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>列表中查找指定值第一个匹配的索引位置，若找到则返回查找对象的索引，否则抛出异常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.index(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.index(<span class="number">6</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="number">6</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure></p><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><p>添加元素至列表末尾。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除列表中指定位置的元素，默认为末尾。返回删除的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]    <span class="comment">#默认删除末尾元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.pop(<span class="number">1</span>)    <span class="comment">#删除指定位置的元素，该位置为索引位置</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>将指定的对象插入至列表指定的位置。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.insert(<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.insert(<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>移除列表中指定值的第一个匹配项。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.remove(<span class="number">3</span>)    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.remove(<span class="string">"a"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">"I'm"</span>, <span class="string">'superman'</span>, <span class="string">'!'</span>]</span><br></pre></td></tr></table></figure></p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>反向列表中的序列。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>对列表进行排序。无返回值，但会修改列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">"I'm"</span>,<span class="string">"a"</span>,<span class="string">"superman"</span>,<span class="string">"!"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">'!'</span>, <span class="string">"I'm"</span>, <span class="string">'a'</span>, <span class="string">'superman'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p>元组和列表类似，也是一种有序序列的集合，但是元组一旦初始化之后就不能修改。<br>元组的创建是将用<code>,</code>(逗号)分隔的不同项使用<code>()</code>(小括号)括起来。 元组创建的时候元素必须且已经定下来了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">t</span></span></span><br><span class="line"><span class="class"><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>只含有1个元素的元组，创建的是时候需要加上<code>,</code>(逗号)，否则创建的将不是元组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=(<span class="number">1</span>)    <span class="comment">#该情况下，`()`按照小括号计算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; t=("1")    #该情况下，`()`按照小括号计算</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="string">'1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; t=(1,)    #该情况下，`()`表示元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(t)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><p>元组中元素的访问可以按照元素下标访问，也可以按照列表中的<code>-1</code>等访问元组中倒数的元素。<br>下面介绍列表中可用的方法</p><h4 id="index-1"><a href="#index-1" class="headerlink" title="index()"></a>index()</h4><p>查找指定元素在元组中的位置，返回指定元素的索引位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.index(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.index(<span class="number">5</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>统计元组中指定元素出现的个数。返回元素出现个数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="string">'3'</span>)    <span class="comment">#元组中为整型，此处为字符串类型</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="string">'4'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="number">4</span>)    <span class="comment">#元组中整数4出现的次数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.count(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python作为一门编程语言，和其他编程语言类似，都是有自己的语法规则，编译器将按照语法规则编写的程序代码转换为计算机可识别的机器码，然后执行。&lt;br&gt;python的基本语法规则  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码逻辑通过缩进区分，一般都是使用4个空格进行缩进。缩进不能Tab键和空格混用，否则报错。   &lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;号之后的语句都是注释，编译器将会忽略;其它每一行为一个语句；以&lt;code&gt;:&lt;/code&gt;结尾的语句，其下面的缩进语句识别为代码块。&lt;/li&gt;
&lt;li&gt;python大小写敏感。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="数据类型" scheme="https://rosinelan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="字符串" scheme="https://rosinelan.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="列表" scheme="https://rosinelan.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
      <category term="元组" scheme="https://rosinelan.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>python开发环境搭建</title>
    <link href="https://rosinelan.github.io/2018/03/28/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://rosinelan.github.io/2018/03/28/python开发环境搭建/</id>
    <published>2018-03-28T01:08:31.000Z</published>
    <updated>2018-04-02T03:01:21.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python介绍"><a href="#python介绍" class="headerlink" title="python介绍"></a>python介绍</h2><p>python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。<br>python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。<br>除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。<br>根据<a href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">TIOBE</a>2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。<br><a id="more"></a>   </p><h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>当前python主要使用版本有2种，分别是python2和python3，且python2.7在将来的2020年之后将失去后续支持。<br>包括centos7版本系统默认安装的python依然是2.7版本，且大多数公司依然在使用python2。<br>学习以python3为主，使用最新的语法和类库，同时掌握python2和python3的主要区别，保证代码在2个版本的兼容性。   </p><h3 id="python2和3的区别"><a href="#python2和3的区别" class="headerlink" title="python2和3的区别"></a>python2和3的区别</h3><p>下面是两个版本的简单区别，此处只做简单了解，更多的区别在后续的学习过程中了解和熟悉。   </p><h4 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h4><p>python2中print是语句，python3中print变成了函数，在python3中调用print需要加上括号，否则会报SyntaxError。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print &quot;hello world&quot;</span><br><span class="line">hello world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello world&quot;)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;hello world&quot;)</span><br><span class="line">hello world</span><br><span class="line">&gt;&gt;&gt; print &quot;hello world&quot;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    print &quot;hello world&quot;</span><br><span class="line">                      ^</span><br><span class="line">SyntaxError: Missing parentheses in call to &apos;print&apos;.</span><br></pre></td></tr></table></figure></p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>python2中iput()只接受变量作为传入值，非变量内容会报错，所以在python2中使用raw_input()键入内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;python&apos; is not defined</span><br><span class="line">&gt;&gt;&gt; name=&quot;python-1&quot;</span><br><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:name</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br><span class="line">&gt;&gt;&gt; user=raw_input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br></pre></td></tr></table></figure></p><p>python3中input()取代了python2中的raw_input()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; user=input(&quot;Enter your name:&quot;)</span><br><span class="line">Enter your name:python-1</span><br><span class="line">&gt;&gt;&gt; print(user)</span><br><span class="line">python-1</span><br></pre></td></tr></table></figure></p><h4 id="整数相除"><a href="#整数相除" class="headerlink" title="整数相除"></a>整数相除</h4><p>python2中，3/2的结果是整数，在python3中结果是浮点数。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3/2</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 3/2.0</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 3/2</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; 3/2.0</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure></p><h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><p>python2有2种字符串类型:str和unicode。python3中的字符串默认就是unicode，python3中的str相当于python2中的unicode。<br>在python2中，如果代码包括非英文字符，需要在代码的最开始声明编码。<br><code># -*- coding: utf-8 -*-</code><br>在python3中，默认的字符串就是unicode，不包含编码声明也可以正常运行。   </p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>python2中捕获异常一般使用下面的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    1/0</span><br><span class="line">except ZeroDivisionError, e:</span><br><span class="line">    print str(e)</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    1/0</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print str(e)</span><br></pre></td></tr></table></figure></p><p>python3中不再支持前一种语法，必须使用as关键字。</p><h4 id="xrange"><a href="#xrange" class="headerlink" title="xrange"></a>xrange</h4><p>python2中有range和xrange两个方法。区别在于range返回一个list，在被调用的时候返回整个序列；xrange返回一个iterator，在每次循环中生成序列的下一个数字。<br>python3中不再支持xrange方法，range方法相当于python2中的xrange方法。   </p><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><p>在python2中map函数返回list。python3中map函数返回iterator。<br>python2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x+1,range(5))</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p><p>python3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; map(lambda x: x+1,range(5))</span><br><span class="line">&lt;map object at 0x00000209ECAF3198&gt;</span><br><span class="line">&gt;&gt;&gt; list(map(lambda x: x+1,range(5)))</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></p><h2 id="python安装"><a href="#python安装" class="headerlink" title="python安装"></a>python安装</h2><p>以最新的python3.6为基础进行安装。   </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>linux系统下载源码编译安装，windows系统下载可执行文件运行安装。<br><a href="https://www.python.org" target="_blank" rel="noopener">点击</a>进入python官方网站<br>选择Downloads –&gt; All releases<br><img src="http://cdn.rosinelan.com/blog/program/python-dowload.png" alt="python-Download" title="python-Download"><br>点击<code>Download Python 3.64</code><br><img src="http://cdn.rosinelan.com/blog/program/python-v364.png" alt="python-v364" title="python-v364"><br>在新的Python 3.6.4页面下拉至Files部分<br><img src="http://cdn.rosinelan.com/blog/program/python-install.png" alt="python-install" title="python-install"><br>其中linux系统使用 <code>Gzipped source tarball</code>,<a href="https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz" target="_blank" rel="noopener">点击下载</a></p><p>64位windows使用 <code>Windows x86-64 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe" target="_blank" rel="noopener">点击下载</a></p><p>32位windwos使用 <code>Windows x86 executable installer</code>,<a href="https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="在linux上安装python"><a href="#在linux上安装python" class="headerlink" title="在linux上安装python"></a>在linux上安装python</h3><p>centos系统默认会安装python2.7,现在安装最新版本python3.6。<br>centos下使用源码编译安装，步骤如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Python-3.6.4.tgz   </span><br><span class="line">cd Python-3.6.4   </span><br><span class="line">./configure --prefix=/usr/local/python364   </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>此时发现/usr/bin/python依然是原来的老版本,需要修改/usr/bin/python对应的链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python_27</span><br><span class="line">ln -s /usr/local/python364/bin/python /usr/bin/python</span><br></pre></td></tr></table></figure></p><p>此时通过<code>python -v</code>命令可以看到版本为v3.6.4.<br>注意：采用此方法安装后会发现yum不可用，原因是yum使用依赖老版本python，此时需要修改<code>/usr/bin/yum</code>第一行为<code>#!/usr/bin/python_27</code>就可以了。</p><h3 id="在windows上安装python"><a href="#在windows上安装python" class="headerlink" title="在windows上安装python"></a>在windows上安装python</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>双击<code>python-3.6.4-amd64.exe</code>开始安装<br><img src="http://cdn.rosinelan.com/blog/program/python-win-install.png" alt="python-win-install" title="python-win-install"><br>注意要勾选<code>Add Python 3.6 tp PATH</code>,然后点<code>Install Now</code>即可完成安装。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过<code>win+R</code>打开运行，输入<code>cmd</code>，在弹出的windows命令提示符输入<code>python</code>。<br>若提示信息如下，说明python安装正确。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-test.png" alt="python-win-test" title="python-win-test"><br>若得到如下错误信息，说明安装的时候未勾选<code>Add Python 3.6 tp PATH</code><br><img src="http://cdn.rosinelan.com/blog/program/python-win-wrong.png" alt="python-win-wrong" title="python-win-wrong"><br>此时需要修改环境变量使计算机能找到python所在位置。<br>通过<code>我的电脑--&gt;右键--&gt;属性--&gt;高级系统设置--&gt;环境变量</code>，在弹出的对话框中找到用户变量/系统变量中的<code>Path</code>变量，根据python安装位置添加路径。<br><img src="http://cdn.rosinelan.com/blog/program/python-win-path.png" alt="python-win-path" title="python-win-path"><br><img src="http://cdn.rosinelan.com/blog/program/python-win-add.png" alt="python-win-add" title="python-win-add"><br>win10系统默认安装路径如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\Scripts\   </span><br><span class="line">C:\Users\username\AppData\Local\Programs\Python\Python36\</span><br></pre></td></tr></table></figure></p><p>此处建议添加到系统变量中的Path变量中，系统变量是全局变量，无论什么用户登录均可生效；用户变量只针对当前用户生效，若更换其他用户登录则不会生效。<br>若认为添加环境变量操作太复杂，建议直接重装python，记得勾选<code>Add Python 3.6 tp PATH</code>。    </p><h2 id="python开发工具"><a href="#python开发工具" class="headerlink" title="python开发工具"></a>python开发工具</h2><h3 id="python开发工具介绍"><a href="#python开发工具介绍" class="headerlink" title="python开发工具介绍"></a>python开发工具介绍</h3><p>安装好python环境之后，简单的使用直接使用文本编辑器即可，比较常用的有Sublime Text、Notepad++等。<br>大型项目建议使用比较专业的集成开发环境，有利于提高效率，推荐PyCharm。<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">点击访问官方地址</a><br>PyCharm是Python IDE for Professional Developers。高大上的开发工具，工欲善其事必先利其器嘛。专业版为收费工具，请支持正版。<br>windows版本pycharm v2017.3.4<br><a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.4.exe" target="_blank" rel="noopener">点击下载</a></p><h3 id="PyCharm使用"><a href="#PyCharm使用" class="headerlink" title="PyCharm使用"></a>PyCharm使用</h3><h4 id="设置python版本"><a href="#设置python版本" class="headerlink" title="设置python版本"></a>设置python版本</h4><p>通过File–&gt;Setting–&gt;Project:XXXX–&gt;Project Interpreter下拉框选择相应版本的python。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-version.png" alt="pycharm-set-version" title="pycharm-set-version"><br>注意：当前选择的python版本用于当前Project，这样对于同时维护或开发不同版本的python非常便捷。   </p><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>通过File–&gt;Setting–&gt;Editor–&gt;Font设置合适的字体、大小、行距。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-font.png" alt="pycharm-set-font" title="pycharm-set-font">   </p><h4 id="设置文件模板"><a href="#设置文件模板" class="headerlink" title="设置文件模板"></a>设置文件模板</h4><p>通过File–&gt;setting–&gt;Editor–&gt;Code Style–&gt;File and Code Templates–&gt;Python Script添加文件模板。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-set-template.png" alt="pycahrm-set-template" title="pycharm-set-template"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"># @Author  : xiaohuihui</span><br><span class="line"># @File    : $&#123;NAME&#125;.py</span><br></pre></td></tr></table></figure></p><p>其中Time为创建时间，Author为作者，File为文件名。   </p><h4 id="pycharm运行"><a href="#pycharm运行" class="headerlink" title="pycharm运行"></a>pycharm运行</h4><p>通过File–&gt;New Project创建新的项目。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-python.png" alt="pycharm-new-python" title="pycharm-new-python"><br>通过项目–&gt;右键–&gt;New Python File创建第一个python文件。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-new-File.png" alt="pycharm-new-file" title="pycharm-new-file"><br>python文件的运行有3种方式<br>在python文件中右键–&gt;Run ‘input’，或者使用快捷键Ctrl+Shift+F10。<br>点击左下角的绿色<code>运行</code>按钮。<br>点击右上角的绿色<code>运行</code>按钮。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-run-python.png" alt="pycharm-run-python" title="pycharm-run-python"><br>注意：左下角和右上角的<code>运行</code>按钮默认执行的为上次执行过的python文件，也就是当切换到另一个python文件时，直接点击<code>运行</code>按钮，其执行文件不是当前文件。建议使用快捷键或者右键执行的方式。<br>windows下命令行运行python文件<br>在不打开pycharm时可以运行python文件嘛？<br>只要windows安装好python环境，答案自然是肯定的。<br>在命令行中使用<code>python D:\pythondev\calculate\print.py</code>方式运行即可。<br><img src="http://cdn.rosinelan.com/blog/program/python-run-cmd.png" alt="python-run-cmd" title="python-run-cmd">   </p><h4 id="pycharm参数传递"><a href="#pycharm参数传递" class="headerlink" title="pycharm参数传递"></a>pycharm参数传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys   </span><br><span class="line">print(&quot;File name:&#123;0&#125;&quot;.format(sys.argv[0]))  </span><br><span class="line">print(&quot;First argv:&#123;0&#125;&quot;.format(sys.argv[1]))  </span><br><span class="line">print(&quot;Second argv:&#123;0&#125;&quot;.format(sys.argv[2]))</span><br></pre></td></tr></table></figure><p>上述文件位于D:\pythondev\calculate，文件名称为print.py。<br>在命令行中参数传递方式<code>python print.py xiaohh 1000</code>。<br><img src="http://cdn.rosinelan.com/blog/program/python-argv-cmd.png" alt="python-argv-cmd" title="python-argv-cmd"><br>在pycharm中如何传递参数呢？<br>直接右键执行结果如下<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-wrong.png" alt="pycharm-argv-wrong" title="pycharm-argv-wrong"><br>需要传递参数的情况下，点击右上角<code>运行</code>左边下拉框，选择<code>Edit Configurations</code>，弹出的对话框中选择对应python文件–&gt;Configuration–&gt;Parameters，输入参数，空格区分。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-argv-right.png" alt="pycharm-argv-right" title="pycharm-argv-right">    </p><h4 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h4><p><code>Ctrl + c</code> 复制<br><code>Ctrl + x</code> 剪切<br><code>Ctrl + d</code> 复制当前行<br><code>Ctrl + /</code> 注释当前行<br><code>Ctrl + r</code> 替换<br><code>Shift + Enter</code> 换行<br><code>Alt + Enter</code> 导入包(当写出包名时，按快捷键可自动添加<code>import</code>)<br><code>Ctrl + Shift + f</code> 查找(中文输入法冲突，需关闭才能生效)<br><code>Ctrl + Shift + n</code> 查找文件<br><code>Alt + 鼠标左键</code> 块编辑<br><code>光标批量选中 + Tab</code> 整体向右移动<br><code>光标批量选中 + Shift + Tab</code> 整体向左移动<br><code>Ctrl + a,Ctrl + Alt + L</code> 格式化(和QQ锁定快捷键一致，需修改QQ锁定快捷键)<br><code>Ctrl + Alt + 方向键</code> 查找引用和依赖包时，向右方向键为前进至下一个依赖包处，向左方向键为返回上一个依赖包处(此快捷键和Intel核心显卡快捷键冲突，建议禁用intel核心显卡快捷键)   </p><h4 id="pycharm调试"><a href="#pycharm调试" class="headerlink" title="pycharm调试"></a>pycharm调试</h4><p>设置断点<br>在行号和代码中间位置点击鼠标左键即可添加断点。<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-dot.png" alt="pycahrm-debug-dot" title="pycharm-debug-dot"><br>调试模式<br>点击右上角的蜘蛛图标进行调试(Debug)模式<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-start.png" alt="pycharm-debug-start" title="pycharm-debug-start"><br><code>F7</code> Step into 跳入代码<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F7.gif" alt="pycharm-debug-F7" title="pycharm-debug-F7"><br><code>F8</code> Step Over 继续下一步<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F8.gif" alt="pycharm-debug-F8" title="pycharm-debug-F8"><br><code>F9</code> Resume Program 执行到下一个断点或恢复程序<br><img src="http://cdn.rosinelan.com/blog/program/pycharm-debug-F9.gif" alt="pycharm-debug-F9" title="pycharm-debug-F9"><br>断点是调试时快速查找代码错误最有用的方法，需要熟悉并了解不同快捷键的作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python介绍&quot;&gt;&lt;a href=&quot;#python介绍&quot; class=&quot;headerlink&quot; title=&quot;python介绍&quot;&gt;&lt;/a&gt;python介绍&lt;/h2&gt;&lt;p&gt;python是荷兰人Guidovan Rossum于1989年发明的，第一个公开发行版本发行于1991年。&lt;br&gt;python的设计哲学是”优雅”、”明确”、”简单”，也因此python得以迅速的发展起来，得到大量用户的欢迎。&lt;br&gt;除了大家熟知的“脚本语言”作用之外，python还提供了很多与网络、GUI、图片、文件等相关的基础代码库和第三方库，这样很多功能可以不用从零开始，非常便捷。&lt;br&gt;根据&lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TIOBE&lt;/a&gt;2018年3月发布的最新一期编程语言排行榜，python排名第4，仅位于Java/C/C++之后，可见python的流行程度。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="pycharm" scheme="https://rosinelan.github.io/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>HBA卡WWN号查看方法</title>
    <link href="https://rosinelan.github.io/2018/03/27/HBA%E5%8D%A1WWN%E5%8F%B7%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://rosinelan.github.io/2018/03/27/HBA卡WWN号查看方法/</id>
    <published>2018-03-27T03:07:43.000Z</published>
    <updated>2018-03-27T03:37:12.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HP-UNIX系统"><a href="#HP-UNIX系统" class="headerlink" title="HP-UNIX系统"></a>HP-UNIX系统</h2><h3 id="查询HBA卡名称"><a href="#查询HBA卡名称" class="headerlink" title="查询HBA卡名称"></a>查询HBA卡名称</h3><p><code>ioscan -fnC fc</code><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-name.png" alt="hp-fc-name" title="hp-fc-name"><br><a id="more"></a><br>根据查询结果，该机器有2块HBA卡，设备名称分别为/dev/td1,/dev/td2。</p><h3 id="根据HBA卡名称查询WWW号"><a href="#根据HBA卡名称查询WWW号" class="headerlink" title="根据HBA卡名称查询WWW号"></a>根据HBA卡名称查询WWW号</h3><p><code>fcmsutil /dev/XX</code><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-www1.png" alt="hp-fc-www1" title="hp-fc-www1"><br><img src="http://cdn.rosinelan.com/blog/system/hp-fc-www2.png" alt="hp-fc-www2" title="hp-fc-www2"><br>上图分别为/dev/td1和/dev/td2设备的WWN号，注意：WWN号为标红的“N_Port Port World Wide Name”。   </p><h2 id="LINUX-系统"><a href="#LINUX-系统" class="headerlink" title="LINUX 系统"></a>LINUX 系统</h2><p>下面是针对centos的查询方法。<br><code>cat /sys/class/fc_host/host1/port_name</code><br>其中host1为HBA卡的端口号，若1台机器有多张HBA卡，需要修改对应的端口号查看<br><code>cat /sys/class/fc_host/host[1-4]/port_name</code></p><h2 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h2><p>windows下HBA卡WWW号查询介绍2种，分别为fcinfo和脚本。<br>fcinfo查询方式适用于windows server 2003及以上版本；脚本查询仅适用于windwos server 2008及以上版本。   </p><h3 id="fcinfo查询"><a href="#fcinfo查询" class="headerlink" title="fcinfo查询"></a>fcinfo查询</h3><h4 id="下载fcinfo工具"><a href="#下载fcinfo工具" class="headerlink" title="下载fcinfo工具"></a>下载fcinfo工具</h4><p>根据操作系统版本选择对应版本的工具下载并安装。<br><a href="https://www.microsoft.com/en-us/download/details.aspx?id=17530" target="_blank" rel="noopener">fcinfo下载</a></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>进入命令行，然后切换至c:\windows\syswow64，输入<code>fcinfo</code>查询。<br><img src="http://cdn.rosinelan.com/blog/system/windows-fcinfo.png" alt="windows-fcinfo" title="windows-fcinfo"></p><h3 id="脚本查询"><a href="#脚本查询" class="headerlink" title="脚本查询"></a>脚本查询</h3><h4 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h4><p>微软TechNet脚本中心提供一个powershell查询脚本，<a href="https://gallery.technet.microsoft.com/scriptcenter/Find-HBA-and-WWPN-53121140" target="_blank" rel="noopener">点击下载</a>。<br>下载之后复制脚本至c:\windows\temp(可自己决定目录)。<br>注意：之后所有操作均在windows powershell中执行。   </p><h4 id="修改powershell设置"><a href="#修改powershell设置" class="headerlink" title="修改powershell设置"></a>修改powershell设置</h4><p>windowpowershell默认执行策略(ExecutionPolicy)为Restricted，为顺利执行脚本，此处修改为RemoteSigned，否则执行脚本会出现“无法加载文件XXXX，因为在此系统中禁止执行脚本”的报错。<br>获取当前默认执行策略<br><code>get-ExecutionPolicy</code><br>设置执行策略为RemoteSigned<br><code>set-ExecutionPolicy RemoteSigned</code>   </p><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><p>切换至脚本所在目录，然后执行命令    </p><pre><code>Import-Module .\Get-HBAWin.ps1Get-HBAWin -ComputerName 192.168.10.6</code></pre><p><img src="http://cdn.rosinelan.com/blog/system/windows-www.png" alt="windows-fc-www" title="windows-fc-www"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HP-UNIX系统&quot;&gt;&lt;a href=&quot;#HP-UNIX系统&quot; class=&quot;headerlink&quot; title=&quot;HP-UNIX系统&quot;&gt;&lt;/a&gt;HP-UNIX系统&lt;/h2&gt;&lt;h3 id=&quot;查询HBA卡名称&quot;&gt;&lt;a href=&quot;#查询HBA卡名称&quot; class=&quot;headerlink&quot; title=&quot;查询HBA卡名称&quot;&gt;&lt;/a&gt;查询HBA卡名称&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ioscan -fnC fc&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://cdn.rosinelan.com/blog/system/hp-fc-name.png&quot; alt=&quot;hp-fc-name&quot; title=&quot;hp-fc-name&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="HBA" scheme="https://rosinelan.github.io/tags/HBA/"/>
    
      <category term="WWW" scheme="https://rosinelan.github.io/tags/WWW/"/>
    
      <category term="HP-UNIX" scheme="https://rosinelan.github.io/tags/HP-UNIX/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/tags/WINDOWS/"/>
    
  </entry>
  
  <entry>
    <title>POWERPATH设备名称修改</title>
    <link href="https://rosinelan.github.io/2018/03/27/POWERPATH%E8%AE%BE%E5%A4%87%E5%90%8D%E7%A7%B0%E4%BF%AE%E6%94%B9/"/>
    <id>https://rosinelan.github.io/2018/03/27/POWERPATH设备名称修改/</id>
    <published>2018-03-27T01:48:39.000Z</published>
    <updated>2018-03-27T02:41:51.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>oracle rac集群搭建，存储使用EMC VMAX，数据库服务器为IBM X3850 X6。存储和服务器之间为4条路径，存储共划分13个LUN，需在数据库服务器安装powerpath实现多路径的聚合。<br>备注：centos自带多路径软件multipath也可实现相同功能。   </p><h3 id="安装powerpath"><a href="#安装powerpath" class="headerlink" title="安装powerpath"></a>安装powerpath</h3><p>根据操作系统版本选择合适的powerpath版本上传至服务器；<br>安装<br><a id="more"></a><br><code>rpm -ivh EMCPower.LINUX-XXX.rpm</code><br>输入license激活<br><code>emcpreg -install XXXX</code>   </p><h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><p><code>reboot</code>   </p><h3 id="查看磁盘"><a href="#查看磁盘" class="headerlink" title="查看磁盘"></a>查看磁盘</h3><p><code>fdisk -l</code><br>可以看到原有磁盘之外，出现类似 Dsik /dev/emcpowerd命名的磁盘，此为聚合之后的磁盘。<br>查看LUN和设备名的对应关系<br><code>powermt display dev=all</code><br><img src="http://cdn.rosinelan.com/blog/system/powermt-lun.png" alt="powermt-lun" title="powermt-lun"><br>设备名emcpowera对应的lun编号为Logical device ID=0341<br>查询之后发现13个LUN同时共享给4台服务器，同一个LUN在不同服务器的设备名称不一样，和安装oracle rac集群要求不一致，需更改。   </p><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><ul><li>统计各服务器设备名和对应的LUN ID，以其中一台服务器为基准，修改其余服务器的设备名。<br>命令示例如下<br><code>emcpadm renamepseudo -s /dev/emcpowerb -t /dev/emcpowerz</code>   </li><li>以其中一台服务器为基准，导出设备名和LUN ID对应关系，然后将该文件分发至其余服务器，导入设备名和LUN ID关系文件并保存。<br>导出命令<br><code>emcpadm export_mappings -f /u01/emcpower.lun</code><br>导入命令<br><code>emcpadm import_mappings -v -f /u01/emcpower.lun</code><br>保存命令<br><code>powermt save</code>   <h3 id="修改实例"><a href="#修改实例" class="headerlink" title="修改实例"></a>修改实例</h3>由于服务器LUN划分较多，采用第二种方案进行修改。   </li></ul><ol><li>以第一台服务器为基准，导出对应的文件<br><code>emcpadm export_mappings -f /u01/emcpower.lun</code>  </li><li>将该文件复制至其它服务器<br><code>scp /u01/emcpower.lun root@192.168.1.6://u01/emcpower.lun</code>   </li><li>登录其它服务器，导入对应文件<br><code>emcpadm import_mappings -v -f /u01/emcpower.lun</code>   </li><li>保存此次更改<br><code>powermt save</code>   </li><li>重启服务器，确认更改是否生效<br><code>reboot</code><br>至此修改完成。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;oracle rac集群搭建，存储使用EMC VMAX，数据库服务器为IBM X3850 X6。存储和服务器之间为4条路径，存储共划分13个LUN，需在数据库服务器安装powerpath实现多路径的聚合。&lt;br&gt;备注：centos自带多路径软件multipath也可实现相同功能。   &lt;/p&gt;
&lt;h3 id=&quot;安装powerpath&quot;&gt;&lt;a href=&quot;#安装powerpath&quot; class=&quot;headerlink&quot; title=&quot;安装powerpath&quot;&gt;&lt;/a&gt;安装powerpath&lt;/h3&gt;&lt;p&gt;根据操作系统版本选择合适的powerpath版本上传至服务器；&lt;br&gt;安装&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="POWERPATH" scheme="https://rosinelan.github.io/tags/POWERPATH/"/>
    
      <category term="EMC" scheme="https://rosinelan.github.io/tags/EMC/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS下的MKLINK和JUNCTION</title>
    <link href="https://rosinelan.github.io/2018/03/23/WINDOWS%E4%B8%8B%E7%9A%84MKLINK%E5%92%8CJUNCTION/"/>
    <id>https://rosinelan.github.io/2018/03/23/WINDOWS下的MKLINK和JUNCTION/</id>
    <published>2018-03-23T01:01:25.000Z</published>
    <updated>2018-03-26T08:52:57.194Z</updated>
    
    <content type="html"><![CDATA[<p>有台windows服务器C盘空间不足，占磁盘空间较大的文件要挪到其他磁盘又会涉及到应用程序的修改等问题，怎么破？<br>LINUX下使用’ln -s’创建软链接是再寻常不过的操作，那么windows下是否也可以进行相应的操作呢？<br>答案是肯定的。<br>可以实现相关功能的工具有2个，分别是mklink和function，均只能用于windwos server 2008+，其中mklink为系统自带，junction需自行下载。<br><a id="more"></a></p><h2 id="mklink"><a href="#mklink" class="headerlink" title="mklink"></a>mklink</h2><h3 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line"></span><br><span class="line">        /D      创建目录符号链接。默认为文件</span><br><span class="line">                符号链接。</span><br><span class="line">        /H      创建硬链接而非符号链接。</span><br><span class="line">        /J      创建目录联接。</span><br><span class="line">        Link    指定新的符号链接名称。</span><br><span class="line">        Target  指定新链接引用的路径</span><br><span class="line">                (相对或绝对)。</span><br></pre></td></tr></table></figure><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>/D是符号链接，/J是目录联接。<br>创建的链接名称都是类似快捷方式的文件夹；都不会占用空间；访问该名称相当于访问指定的目标文件。<br>区别在于符号链接的Target只能使用绝对路径，目录联接的Target可以使用相对路径。<br>/H是硬链接，需要占用空间；删除原文件或新建文件中的一个不会影响文件。<br>针对文件创建符号链接，不添加任何参数。<br>/H创建硬链接只能针对文件，不能对文件夹。<br>/D和/J创建符号链接或目录链接只能针对文件夹，不能对文件。   </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li>为C:\tlab\test\111.txt文件创建符号链接<br><code>mklink C:\tlab\111.txt C:\tlab\test\111.txt</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-file-symlink.png" alt="文件创建符号链接" title="文件创建符号链接">   </li><li>为C:\tlab\test目录创建符号链接<br><code>mklink /d D:\test C:\tlab\test</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-folder-symlink.png" alt="目录创建符号链接" title="目录创建符号链接">   </li><li>为C:\tlab\test目录创建目录链接<br><code>mklink /j D:\test C:\tlab\test</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-folder-j.png" alt="目录创建目录链接" title="目录创建目录链接"></li><li>为D:\Dns\DNSTEST\openFtp.txt文件创建硬链接<br><code>mklink /h D:\Dns\1.txt D:\Dns\DNSTEST\openFtp.txt</code><br><img src="http://cdn.rosinelan.com/blog/system/mklink-file-h.png" alt="文件创建硬链接" title="文件创建硬链接"></li><li>相对路径创建<br>命令行切换至C:\talb，该文件夹下有test文件夹，分别利用相对路径进行下面操作<br><code>mklink /d C:\Users\xiaohuihui\test test</code><br>提示为创建成功，当点击创建的符号链接访问时出现错误提示<br><img src="http://cdn.rosinelan.com/blog/system/mklink-relative-d.png" alt="相对路径创建符号链接" title="相对路径创建符号链接"><br><code>mklink /j C:\Users\xiaohuihui\test test</code><br>提示创建成功，当点击创建的目录链接访问时正常<br><img src="http://cdn.rosinelan.com/blog/system/mklink-relative-j.png" alt="相对路径创建目录链接" title="相对路径创建目录链接">   <h2 id="junction"><a href="#junction" class="headerlink" title="junction"></a>junction</h2>Junction用于NTFS文件系统，其作用类似mklink /j参数。<br>junction连接创建只能针对文件夹，不能针对文件   <h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3>下载junction文件后放到C:\WINDOWS目录下，直接在命令行使用。   <h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The first usage is for displaying reparse point information, the</span><br><span class="line">second usage is for creating a junction point, and the last for</span><br><span class="line">deleting a junction point:</span><br><span class="line">usage: junction64 [-s] [-q] &lt;file or directory&gt;</span><br><span class="line">       -q     Don&apos;t print error messages (quiet)</span><br><span class="line">       -s     Recurse subdirectories</span><br><span class="line"></span><br><span class="line">usage: junction64 &lt;junction directory&gt; &lt;junction target&gt;</span><br><span class="line">       example: junction d:\link c:\windows</span><br><span class="line"></span><br><span class="line">usage: junction64 -d &lt;junction directory&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ol><li>创建junction连接，将C:\tlab\test目录连接至D:\test<br><code>junction64 D:\test C:\tlab\test</code></li><li>删除D:\test的junction连接<br><code>junction64 -d D:\test</code><h3 id="下载地址及官方文档"><a href="#下载地址及官方文档" class="headerlink" title="下载地址及官方文档"></a>下载地址及官方文档</h3><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/junction" target="_blank" rel="noopener">Junction v1.07</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有台windows服务器C盘空间不足，占磁盘空间较大的文件要挪到其他磁盘又会涉及到应用程序的修改等问题，怎么破？&lt;br&gt;LINUX下使用’ln -s’创建软链接是再寻常不过的操作，那么windows下是否也可以进行相应的操作呢？&lt;br&gt;答案是肯定的。&lt;br&gt;可以实现相关功能的工具有2个，分别是mklink和function，均只能用于windwos server 2008+，其中mklink为系统自带，junction需自行下载。&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="WINDOWS" scheme="https://rosinelan.github.io/categories/system/WINDOWS/"/>
    
    
      <category term="WINODWS" scheme="https://rosinelan.github.io/tags/WINODWS/"/>
    
      <category term="MKLINK" scheme="https://rosinelan.github.io/tags/MKLINK/"/>
    
      <category term="JUNCTION" scheme="https://rosinelan.github.io/tags/JUNCTION/"/>
    
  </entry>
  
  <entry>
    <title>CENTOS7.2双网卡绑定脚本.md</title>
    <link href="https://rosinelan.github.io/2018/02/24/CENTOS7-2%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E8%84%9A%E6%9C%AC/"/>
    <id>https://rosinelan.github.io/2018/02/24/CENTOS7-2双网卡绑定脚本/</id>
    <published>2018-02-24T07:04:35.000Z</published>
    <updated>2018-02-24T07:22:27.180Z</updated>
    
    <content type="html"><![CDATA[<p>CENTOS 7.2(1511)用于双网卡绑定配置，使用说明<br>1.网卡名称ens1f0和ens1f1根据实际情况修改(全局替换即可)。<br>2.bond0配置IP地址根据实际情况修改。<br>脚本如下<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/   </span><br><span class="line">mv ifcfg-ens1f0 ifcfg-ens1f0.bak   </span><br><span class="line">mv ifcfg-ens1f1 ifcfg-ens1f1.bak   </span><br><span class="line">#配置ens1f0   </span><br><span class="line">echo &quot;# slave for bond0&quot; &gt;&gt; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=none&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a NAME=ens1f0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a DEVICE=ens1f0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a MASTER=bond0&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a SLAVE=yes&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-ens1f0   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-ens1f0   </span><br><span class="line">#配置ens1f1   </span><br><span class="line">echo &quot;# slave for bond0&quot; &gt;&gt; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=none&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a NAME=ens1f1&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a DEVICE=ens1f1&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a MASTER=bond0&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a SLAVE=yes&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-ens1f1   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-ens1f1   </span><br><span class="line">#配置bond0   </span><br><span class="line">echo &quot;# bonding for bond0&quot; &gt;&gt; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a DEVICE=bond0&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a TYPE=Ethernet&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a ONBOOT=yes&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a NM_CONTROLLED=no&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a BOOTPROTO=static&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a IPADDR=192.168.198.139&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a NETMASK=255.255.255.192&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a GATEWAY=192.168.198.129&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a USERCTL=no&apos; ifcfg-bond0   </span><br><span class="line">sed -i &apos;$a BONDING_OPTS=&quot;mode=1 miimon=100 primary=ens1f0&quot;&apos; ifcfg-bond0   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /etc/modprobe.d/   </span><br><span class="line">touch dist.conf   </span><br><span class="line">echo &quot;alias bond0 bonding options bond0 miimon=100 mode=1&quot; &gt;&gt; dist.conf   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chkconfig NetworkManager off   </span><br><span class="line">service NetworkManager stop   </span><br><span class="line">systemctl restart network   </span><br><span class="line">#查看当前网络配置   </span><br><span class="line">ip a   </span><br><span class="line">#查看bond0运行状态   </span><br><span class="line">cat /proc/net/bonding/bond0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CENTOS 7.2(1511)用于双网卡绑定配置，使用说明&lt;br&gt;1.网卡名称ens1f0和ens1f1根据实际情况修改(全局替换即可)。&lt;br&gt;2.bond0配置IP地址根据实际情况修改。&lt;br&gt;脚本如下&lt;br&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="BONDING" scheme="https://rosinelan.github.io/tags/BONDING/"/>
    
      <category term="CENTOS7" scheme="https://rosinelan.github.io/tags/CENTOS7/"/>
    
  </entry>
  
  <entry>
    <title>REDHAT 6.5双网卡绑定步骤</title>
    <link href="https://rosinelan.github.io/2018/02/18/REDHAT-6-5%E5%8F%8C%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E6%AD%A5%E9%AA%A4/"/>
    <id>https://rosinelan.github.io/2018/02/18/REDHAT-6-5双网卡绑定步骤/</id>
    <published>2018-02-18T14:04:46.000Z</published>
    <updated>2018-02-24T07:03:11.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>由于工作需要，搭建4节点oracle rac，为降低网络单点故障影响，数据库服务器生产流量和内部心跳均采用双上连，自然要进行双网卡绑定。绑定采用的是bonding。<br>对具体的操作过程进行记录。</p><h2 id="确认操作系统版本"><a href="#确认操作系统版本" class="headerlink" title="确认操作系统版本"></a>确认操作系统版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">lsb_release -a</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">rpm -q redhat-release</span><br></pre></td></tr></table></figure><h2 id="检查系统配置是否支持bonding"><a href="#检查系统配置是否支持bonding" class="headerlink" title="检查系统配置是否支持bonding"></a>检查系统配置是否支持bonding</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /boot/config-XXXX | grep -i bonding</span><br></pre></td></tr></table></figure><p>只要返回任何匹配记录，说明系统配置支持bonding。     </p><h2 id="备份网卡配置文件"><a href="#备份网卡配置文件" class="headerlink" title="备份网卡配置文件"></a>备份网卡配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">cp ifcfg-eth4 /home/ifcfg-eth4.bak</span><br><span class="line">cp ifcfg-eth5 /home/ifcfg-eth5.bak</span><br></pre></td></tr></table></figure><h2 id="新建ifcfg-bond0文件，配置bond0相关参数"><a href="#新建ifcfg-bond0文件，配置bond0相关参数" class="headerlink" title="新建ifcfg-bond0文件，配置bond0相关参数"></a>新建ifcfg-bond0文件，配置bond0相关参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line">DEVICE=bond0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.0.6</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">USERCTL=no</span><br><span class="line">BONDING_OPTS=”mode=1 miimon=100 primary=eth4″</span><br></pre></td></tr></table></figure><h3 id="BONDING-OPTS说明"><a href="#BONDING-OPTS说明" class="headerlink" title="BONDING_OPTS说明"></a>BONDING_OPTS说明</h3><p>mode表示网卡工作状态，其中0表示负载均衡，即双网卡同时处于激活状态；<br>1表示主备模式，即根据primary的设置，该网卡为主网卡，另外一个为备份网卡。<br>miimon=100表示系统每100ms监测一次链路状态。   </p><h2 id="修改ifcfg-eth4参数配置"><a href="#修改ifcfg-eth4参数配置" class="headerlink" title="修改ifcfg-eth4参数配置"></a>修改ifcfg-eth4参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth4</span><br><span class="line">DEVICE=eth4</span><br><span class="line">#HWADDR=90:E2:BA:9F:62:54</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">#UUID=bc956186-832b-44a4-927c-8340eeb52eac</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><h2 id="修改ifcfg-eth5参数配置"><a href="#修改ifcfg-eth5参数配置" class="headerlink" title="修改ifcfg-eth5参数配置"></a>修改ifcfg-eth5参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth5</span><br><span class="line">DEVICE=eth4</span><br><span class="line">#HWADDR=90:E2:BA:9F:62:54</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">#UUID=bc956186-832b-44a4-927c-8340eeb52eac</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">USERCTL=no</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><h2 id="修改-etc-modprobe-d-dist-conf文件，配置绑定模型"><a href="#修改-etc-modprobe-d-dist-conf文件，配置绑定模型" class="headerlink" title="修改/etc/modprobe.d/dist.conf文件，配置绑定模型"></a>修改/etc/modprobe.d/dist.conf文件，配置绑定模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/modprobe.d/dist.conf</span><br><span class="line">alias bond0 bonding options bond0 miimon=100 mode=1</span><br></pre></td></tr></table></figure><h2 id="关闭NetworkManager服务"><a href="#关闭NetworkManager服务" class="headerlink" title="关闭NetworkManager服务"></a>关闭NetworkManager服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig NetworkManager off</span><br><span class="line">service NetworkManager stop</span><br></pre></td></tr></table></figure><h2 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>查看物理网卡的MAC地址是否与bond0一致(正常情况应该3网卡MAC地址一致)<br><code>ifconfig</code><br>查看bond0运行状态<br><code>cat /proc/net/bonding/bond0</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;由于工作需要，搭建4节点oracle rac，为降低网络单点故障影响，数据库服务器生产流量和内部心跳均采用双上连，自然要进行双网卡绑定。绑定采用的是bonding。&lt;br&gt;对具体的操作过程进行记录。&lt;/p&gt;
&lt;h2 id=&quot;确认操作系统版本&quot;&gt;&lt;a href=&quot;#确认操作系统版本&quot; class=&quot;headerlink&quot; title=&quot;确认操作系统版本&quot;&gt;&lt;/a&gt;确认操作系统版本&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/issue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lsb_release -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/redhat-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -q redhat-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;检查系统配置是否支持bonding&quot;&gt;&lt;a href=&quot;#检查系统配置是否支持bonding&quot; class=&quot;headerlink&quot; title=&quot;检查系统配置是否支持bonding&quot;&gt;&lt;/a&gt;检查系统配置是否支持bonding&lt;/h2&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="双网卡" scheme="https://rosinelan.github.io/tags/%E5%8F%8C%E7%BD%91%E5%8D%A1/"/>
    
      <category term="bonding" scheme="https://rosinelan.github.io/tags/bonding/"/>
    
  </entry>
  
  <entry>
    <title>USR/BIN/XTERM:NO SUCH FILE OR DIRECTORY错误解决一例</title>
    <link href="https://rosinelan.github.io/2018/02/18/USR-BIN-XTERM-NO-SUCH-FILE-OR-DIRECTORY%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BE%8B/"/>
    <id>https://rosinelan.github.io/2018/02/18/USR-BIN-XTERM-NO-SUCH-FILE-OR-DIRECTORY错误解决一例/</id>
    <published>2018-02-18T13:52:35.000Z</published>
    <updated>2018-02-18T13:58:46.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>远程SSH连接LINUX服务器，通过图形化界面安装oracle数据库。<br>使用xstart连接redhat v6.5，执行命令选项使用/usr/bin/xterm -ls -display $DISPLAY。</p><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>-bash:usr/bin/xterm: no such file or directory</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><a id="more"></a> <p>在对应的目录查看确实不存在，缺少对应的packages,安装需要的packages<br>libXpm-3.5.10-2.el6.x86_64.rpm<br>libXaw-1.0.11-2.el6.x86_64.rpm<br>xterm-253-1.el6.x86_64.rpm<br>安装之后即可正常连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;远程SSH连接LINUX服务器，通过图形化界面安装oracle数据库。&lt;br&gt;使用xstart连接redhat v6.5，执行命令选项使用/usr/bin/xterm -ls -display $DISPLAY。&lt;/p&gt;
&lt;h3 id=&quot;错误信息&quot;&gt;&lt;a href=&quot;#错误信息&quot; class=&quot;headerlink&quot; title=&quot;错误信息&quot;&gt;&lt;/a&gt;错误信息&lt;/h3&gt;&lt;p&gt;-bash:usr/bin/xterm: no such file or directory&lt;/p&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;
    
    </summary>
    
      <category term="系统管理" scheme="https://rosinelan.github.io/categories/system/"/>
    
      <category term="LINUX" scheme="https://rosinelan.github.io/categories/system/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://rosinelan.github.io/tags/LINUX/"/>
    
      <category term="XTERM" scheme="https://rosinelan.github.io/tags/XTERM/"/>
    
      <category term="libXpm" scheme="https://rosinelan.github.io/tags/libXpm/"/>
    
      <category term="libXaw" scheme="https://rosinelan.github.io/tags/libXaw/"/>
    
  </entry>
  
</feed>
