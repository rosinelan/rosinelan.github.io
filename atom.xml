<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>持续不断</title>
  
  <subtitle>要松懈的时候再坚持一下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rosinelan.github.io/"/>
  <updated>2018-05-30T17:36:45.731Z</updated>
  <id>https://rosinelan.github.io/</id>
  
  <author>
    <name>小灰灰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python单词查找练习题</title>
    <link href="https://rosinelan.github.io/2018/05/30/python%E5%8D%95%E8%AF%8D%E6%9F%A5%E6%89%BE%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/05/30/python单词查找练习题/</id>
    <published>2018-05-30T15:38:30.000Z</published>
    <updated>2018-05-30T17:36:45.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>现有一个文件<code>dictionary.txt</code>，要求对数据进行处理，分别将英文单词和中文解释保存到mysql数据库，并且可通过输入关键字进行模糊匹配查询。<br><code>dictionary.txt</code>文件格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abandon   v.抛弃，放弃</span><br><span class="line">abandonment   n.放弃</span><br><span class="line">abbreviation   n.缩写</span><br><span class="line">abeyance   n.缓办，中止</span><br><span class="line">abide   v.遵守</span><br><span class="line">ability   n.能力</span><br></pre></td></tr></table></figure></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><a id="more"></a><ol><li>数据库建表，表字段至少包括<code>单词</code>和<code>含义</code>。涉及知识点为<code>SQLAlchemy</code>，主要是创建表。  </li><li>读取文件并对内容进行处理，然后插入数据库。涉及知识点为<code>文件读写</code>、<code>字符串处理</code>、<code>SQLAlchemy</code>插入数据。  </li><li>通过关键字进行模糊匹配。涉及知识点为<code>SQLAlchemy</code>查询。<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h4><code>createTable.py</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'dictionary'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    wod = Column(String(<span class="number">50</span>))</span><br><span class="line">    mean = Column(String(<span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure></li></ol><p>mysql数据库查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc dictionary;</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| key   | varchar(50) | YES  |     | NULL    |                |</span><br><span class="line">| value | varchar(50) | YES  |     | NULL    |                |</span><br><span class="line">+<span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p><code>insertData.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> fuzzyMatching.createTable <span class="keyword">import</span> Dictionary</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test?charset=utf8"</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerData</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dataFile)</span>:</span></span><br><span class="line">        self.dataFile = dataFile</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_data_to_str</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> codecs.open(self.dataFile, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> (num, value) <span class="keyword">in</span> enumerate(file):</span><br><span class="line">                line = value.strip().split()</span><br><span class="line">                diction = Dictionary(id=num+<span class="number">1</span>, wod=line[<span class="number">0</span>], mean=line[<span class="number">1</span>])</span><br><span class="line">                session.add(diction)</span><br><span class="line">        session.commit()</span><br><span class="line"></span><br><span class="line">handlerData = HandlerData(<span class="string">'dictionary.txt'</span>)</span><br><span class="line">handlerData.make_data_to_str()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p>mysql数据库查询结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) from dictionary;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|     7988 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure></p><h4 id="数据模糊匹配"><a href="#数据模糊匹配" class="headerlink" title="数据模糊匹配"></a>数据模糊匹配</h4><p><code>fuzzyMatch.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> fuzzyMatching.createTable <span class="keyword">import</span> Dictionary</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test?charset=utf8"</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line">word = input(<span class="string">"Please input a word:"</span>)</span><br><span class="line">zero_result = session.query(Dictionary).filter(Dictionary.wod.like(<span class="string">"%&#123;0&#125;%"</span>.format(word))).all()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zero_result:</span><br><span class="line">    print(i.id, i.wod, i.mean)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Please input a word:test</span><br><span class="line">]<span class="number">1517</span> contest n.,v.争夺，比赛</span><br><span class="line"><span class="number">1518</span> contestant n.参赛人</span><br><span class="line"><span class="number">5604</span> protest v.,n.抗议，反对</span><br><span class="line"><span class="number">5605</span> protestant n.清教徒，新教徒</span><br><span class="line"><span class="number">7159</span> test v.,n.测验，试验</span><br><span class="line"><span class="number">7160</span> testify v.证明，证实</span><br><span class="line"><span class="number">7161</span> testimony n.证据</span><br></pre></td></tr></table></figure></p><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><ol><li>UnicodeEncodeError: ‘latin-1’ codec can’t encode characters in position 18-22: ordinal not in range(256)  </li><li>查询结果汉字乱码  </li></ol><p>处理方法<br>在创建engine时需要添加<code>?charset=utf8</code>参数</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h3&gt;&lt;p&gt;现有一个文件&lt;code&gt;dictionary.txt&lt;/code&gt;，要求对数据进行处理，分别将英文单词和中文解释保存到mysql数据库，并且可通过输入关键字进行模糊匹配查询。&lt;br&gt;&lt;code&gt;dictionary.txt&lt;/code&gt;文件格式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;abandon   v.抛弃，放弃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abandonment   n.放弃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abbreviation   n.缩写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abeyance   n.缓办，中止&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abide   v.遵守&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ability   n.能力&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="sql" scheme="https://rosinelan.github.io/tags/sql/"/>
    
      <category term="orm" scheme="https://rosinelan.github.io/tags/orm/"/>
    
      <category term="mysql" scheme="https://rosinelan.github.io/tags/mysql/"/>
    
      <category term="session" scheme="https://rosinelan.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>python任务调度模块celery(二)</title>
    <link href="https://rosinelan.github.io/2018/05/27/python%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97celery-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/05/27/python任务调度模块celery-二/</id>
    <published>2018-05-27T14:23:50.000Z</published>
    <updated>2018-05-28T03:09:20.864Z</updated>
    
    <content type="html"><![CDATA[<p>关于celery的的基础介绍及安装使用参见<a href="https://rosinelan.coding.me/2018/05/25/python%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97celery/" target="_blank" rel="noopener">python任务调度模块celery</a>。  </p><h3 id="多worker和多队列"><a href="#多worker和多队列" class="headerlink" title="多worker和多队列"></a>多worker和多队列</h3><p>首先是多worker和多队列的原理及流程图。<br><a id="more"></a><br><img src="http://cdn.rosinelan.com/blog/program/celery-multi-queue.png" alt="celery-multi-queue" title="celery-multi-queue"><br>一般情况下对于多worker和多队列的配置文件单独写在一个配置文件，方便管理和配置。  </p><h4 id="定义任务列表"><a href="#定义任务列表" class="headerlink" title="定义任务列表"></a>定义任务列表</h4><p><code>multique.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery()</span><br><span class="line">app.config_from_object(<span class="string">"celeryconfig"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taskA</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*y</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taskB</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>celeryconfig.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Queue, Exchange</span><br><span class="line"></span><br><span class="line">BROKER_URL = <span class="string">"redis://118.24.18.158:6380/1"</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">"redis://118.24.18.158:6380/2"</span></span><br><span class="line"></span><br><span class="line">CELERY_QUEUES = &#123;</span><br><span class="line">    Queue(<span class="string">"default"</span>, Exchange(<span class="string">"default"</span>), routing_key=<span class="string">"default"</span>),</span><br><span class="line">    Queue(<span class="string">"for_task_A"</span>, Exchange(<span class="string">"for_task_A"</span>), routing_key=<span class="string">"for_task_A"</span>),</span><br><span class="line">    Queue(<span class="string">"for_task_B"</span>, Exchange(<span class="string">"for_task_B"</span>), routing_key=<span class="string">"for_task_B"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CELERY_ROUTES = &#123;</span><br><span class="line">    <span class="string">"multique.taskA"</span>: &#123;<span class="string">"queue"</span>: <span class="string">"for_task_A"</span>, <span class="string">"routing_key"</span>: <span class="string">"for_task_A"</span>&#125;,</span><br><span class="line">    <span class="string">"multique.taskB"</span>: &#123;<span class="string">"queue"</span>: <span class="string">"for_task_B"</span>, <span class="string">"routing_key"</span>: <span class="string">"for_task_B"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="启动celery-worker监听"><a href="#启动celery-worker监听" class="headerlink" title="启动celery worker监听"></a>启动celery worker监听</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery -A multique worker -l=info -n workerA.%h -Q for_task_A</span><br><span class="line"> celery -A multique worker -l=info -n workerB.%h -Q for_task_B</span><br></pre></td></tr></table></figure><h4 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h4><p><code>multicelery.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> queue1.multique <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">re1 = taskA.delay(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">re2 = taskB.delay(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line">re3 = add.delay(<span class="number">1000</span>, <span class="number">2000</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">print(re1.result) <span class="comment">#输出结果：200</span></span><br><span class="line">print(re2.result) <span class="comment">#输出结果：600</span></span><br><span class="line">print(re3.status) <span class="comment">#输出结果：PENDING</span></span><br><span class="line">print(re3.result) <span class="comment">#输出结果：None</span></span><br></pre></td></tr></table></figure></p><p>我们看到状态是PENDING，表示没有执行，这个是因为没有celeryconfig.py文件中指定改route到哪一个Queue中，所以会被发动到默认的名字celery的Queue中，但是我们还没有启动worker执行celery中的任务。下面，我们来启动一个worker来执行celery队列中的任务。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A multique worker -l info -n worker.%h -Q celery</span><br></pre></td></tr></table></figure></p><p>再次调用任务，状态应该为SUCCESS,结果为3000。</p><h3 id="celery定时任务"><a href="#celery定时任务" class="headerlink" title="celery定时任务"></a>celery定时任务</h3><p>celery定时任务，<code>Celery Beat</code>进程通过读取配置文件的内容，周期性的将定时任务发往任务队列。<br>以上面多worker的异步任务为例，配置文件<code>celeryconfig.py</code> 中添加<code>CELERYBEAT_SCHEDULE</code>变量，添加内容如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CELERY_TIMEZONE = <span class="string">'UTC'</span> <span class="comment">#指定时区，默认为UTC</span></span><br><span class="line">CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="string">'taskA_schedule'</span>: &#123;</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'multique.taskA'</span>,</span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">2</span>, <span class="comment">#每2s执行一次</span></span><br><span class="line">        <span class="string">'args'</span>: (<span class="number">5</span>, <span class="number">6</span>) <span class="comment">#传递函数参数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'taskB_scheduler'</span>: &#123;</span><br><span class="line">        <span class="string">'task'</span>: <span class="string">"multique.taskB"</span>,</span><br><span class="line">        <span class="string">"schedule"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"args"</span>:(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'add_schedule'</span>: &#123;</span><br><span class="line">        <span class="string">"task"</span>: <span class="string">"multique.add"</span>,</span><br><span class="line">        <span class="string">"schedule"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">"args"</span>: (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数说明  </p><ul><li>task<br>指定任务的名字</li><li>schedule<br>设定任务的调度方式(设定任务如何重复执行)，可以是一个表示秒的整数，也可以是一个 timedelta 对象，或者是一个 crontab 对象</li><li>args<br>任务的参数列表</li><li>kwargs<br>任务的参数字典</li><li>options<br>所有 apply_async 所支持的参数<h4 id="启动celery-worker进程"><a href="#启动celery-worker进程" class="headerlink" title="启动celery worker进程"></a>启动celery worker进程</h4>在项目根目录执行命令  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A celeryapp worker -l=info    <span class="comment">#celeryapp为项目文件所在的package名称</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="启动celery-beat进程"><a href="#启动celery-beat进程" class="headerlink" title="启动celery beat进程"></a>启动celery beat进程</h4><p>启动Celery Beat进程，定时将任务发送到Broker，在项目根目录执行下面命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery beat -A celeryapp</span><br></pre></td></tr></table></figure></p><p>之后在启动的worker窗口可以看到任务定时执行的情况。<br>启动worker和beat进程也可以放在同一个命令中执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -B -A celeryapp worker --loglevel=info</span><br></pre></td></tr></table></figure></p><p>更多celery定时任务相关内容点击<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html" target="_blank" rel="noopener">Periodic Tasks</a>查看官方介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于celery的的基础介绍及安装使用参见&lt;a href=&quot;https://rosinelan.coding.me/2018/05/25/python%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97celery/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python任务调度模块celery&lt;/a&gt;。  &lt;/p&gt;
&lt;h3 id=&quot;多worker和多队列&quot;&gt;&lt;a href=&quot;#多worker和多队列&quot; class=&quot;headerlink&quot; title=&quot;多worker和多队列&quot;&gt;&lt;/a&gt;多worker和多队列&lt;/h3&gt;&lt;p&gt;首先是多worker和多队列的原理及流程图。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="celery" scheme="https://rosinelan.github.io/tags/celery/"/>
    
      <category term="定时任务" scheme="https://rosinelan.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="多线程" scheme="https://rosinelan.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python多线程练习题</title>
    <link href="https://rosinelan.github.io/2018/05/27/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/05/27/python多线程练习题/</id>
    <published>2018-05-27T12:50:24.000Z</published>
    <updated>2018-05-27T13:59:11.652Z</updated>
    
    <content type="html"><![CDATA[<p>多线程练习题目，涉及知识点较多，属于很好的练习题。  </p><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>通过多线程实现类似linux中的<code>&gt;&gt;</code>功能，也就是将日志记录到指定的文件中。  </p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>基本为<code>main.py</code>写主要处理逻辑，<code>utils.py</code>构造工具类及对应的方法。<br><code>main.py</code><br>定义Server()类，类中定义方法输出内容。<br>实例化工具类，启动线程，设置标准输出和错误输出至日志文件。<br>实例化Server()类并调用方法进行内容的持续输出。<br><a id="more"></a><br><code>utils.py</code><br>定义工具类，工具类需要传入参数：日志名称。<br>首先判断日志是否存在，若不存在则创建，然后写入日志；存在则追加写入日志。  </p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><code>main.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> queue1.log_out.utils <span class="keyword">import</span> TraceLog</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"start server"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            print(i)</span><br><span class="line">        print(<span class="string">"end server"</span>) <span class="comment">#print的实现是调用sys.stdout.write()方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    traceLog = TraceLog(<span class="string">"main.log"</span>)</span><br><span class="line">    traceLog.start()</span><br><span class="line">    sys.stdout = traceLog </span><br><span class="line">    sys.stderr = traceLog</span><br><span class="line">    server = Server()</span><br><span class="line">    server.log() <span class="comment">#print将会调用traceLog.write()方法</span></span><br></pre></td></tr></table></figure></p><p><code>utils.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TraceLog</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, logName)</span>:</span></span><br><span class="line">        super(TraceLog, self).__init__() <span class="comment">#调用父类的初始化方法</span></span><br><span class="line">        self.logName = logName</span><br><span class="line">        self.lock = Lock()</span><br><span class="line">        self.contexts = []</span><br><span class="line">        self.isFile()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.logName):</span><br><span class="line">            <span class="keyword">with</span> codecs.open(self.logName, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">"this log name is :&#123;0&#125;\n"</span>.format(self.logName))</span><br><span class="line">                f.write(<span class="string">"start log\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        self.contexts.append(context) <span class="comment">#将需要输出的内容追加至列表中</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            <span class="keyword">if</span> len(self.contexts) != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">with</span> codecs.open(self.logName, <span class="string">'a'</span>) <span class="keyword">as</span> f: <span class="comment">#追加方式写入文件</span></span><br><span class="line">                    <span class="keyword">for</span> context <span class="keyword">in</span> self.contexts:</span><br><span class="line">                        f.write(context)</span><br><span class="line">                <span class="keyword">del</span> self.contexts[:] <span class="comment">#每次写入完成后清空列表</span></span><br><span class="line">            self.lock.release()</span><br></pre></td></tr></table></figure></p><p>输出结果<br>当前目录下会生成<code>main.log</code>文件，文件内容如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this log name <span class="keyword">is</span> :main.log</span><br><span class="line">start log</span><br><span class="line">start server</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="number">98</span></span><br><span class="line"><span class="number">99</span></span><br><span class="line">end server</span><br></pre></td></tr></table></figure></p><p>涉及文件读写、锁、多线程、sys模块、os模块等内容。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程练习题目，涉及知识点较多，属于很好的练习题。  &lt;/p&gt;
&lt;h3 id=&quot;题目要求&quot;&gt;&lt;a href=&quot;#题目要求&quot; class=&quot;headerlink&quot; title=&quot;题目要求&quot;&gt;&lt;/a&gt;题目要求&lt;/h3&gt;&lt;p&gt;通过多线程实现类似linux中的&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;功能，也就是将日志记录到指定的文件中。  &lt;/p&gt;
&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h3&gt;&lt;p&gt;基本为&lt;code&gt;main.py&lt;/code&gt;写主要处理逻辑，&lt;code&gt;utils.py&lt;/code&gt;构造工具类及对应的方法。&lt;br&gt;&lt;code&gt;main.py&lt;/code&gt;&lt;br&gt;定义Server()类，类中定义方法输出内容。&lt;br&gt;实例化工具类，启动线程，设置标准输出和错误输出至日志文件。&lt;br&gt;实例化Server()类并调用方法进行内容的持续输出。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="log" scheme="https://rosinelan.github.io/tags/log/"/>
    
      <category term="sys" scheme="https://rosinelan.github.io/tags/sys/"/>
    
      <category term="os" scheme="https://rosinelan.github.io/tags/os/"/>
    
      <category term="threading" scheme="https://rosinelan.github.io/tags/threading/"/>
    
      <category term="write" scheme="https://rosinelan.github.io/tags/write/"/>
    
  </entry>
  
  <entry>
    <title>python任务调度模块celery</title>
    <link href="https://rosinelan.github.io/2018/05/25/python%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97celery/"/>
    <id>https://rosinelan.github.io/2018/05/25/python任务调度模块celery/</id>
    <published>2018-05-25T13:21:29.000Z</published>
    <updated>2018-05-27T13:59:27.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="celery简介"><a href="#celery简介" class="headerlink" title="celery简介"></a>celery简介</h3><p>Celery是一个python开发的异步分布式任务调度模块。<br>Celery本身并不提供消息服务，使用第三方服务，也就是borker来传递任务，一般使用rabbitMQ或者Redis。  </p><ul><li>Celery特点<br>简单：一单熟悉了celery的工作流程后，配置和使用还是比较简单的。<br>高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务。<br>快速：一个单进程的celery每分钟可处理上百万个任务。<br>灵活： 几乎celery的各个组件都可以被扩展及自定制。  <a id="more"></a></li><li>Celery工作流程图<br><img src="http://cdn.rosinelan.com/blog/program/python-Celery.png" alt="python-Celery" title="python-Celery"><h3 id="celery安装使用"><a href="#celery安装使用" class="headerlink" title="celery安装使用"></a>celery安装使用</h3>安装Celery模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure></li></ul><p>Celery的默认broker是RabbitMQ，仅需配置一行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">broker_url = <span class="string">'amqp://guest:guest@localhost:5672//'</span></span><br></pre></td></tr></table></figure></p><p>RabbitMQ的安装点击<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/rabbitmq.html#id3" target="_blank" rel="noopener">Using RabbitMQ</a>查看。<br>redis作为broker也可以。  </p><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure></li><li><p>配置<br>broker_url配置redis数据库地址，格式为<code>redis://:password@hostname:port/db_number</code>。<br>backend配置任务结果存储位置，将保存每个任务的执行结果。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.conf.broker_url = <span class="string">'redis://localhost:6379/0'</span></span><br><span class="line">app.conf.result_backend = <span class="string">'redis://localhost:6379/0'</span></span><br></pre></td></tr></table></figure></li></ul><p>port和db_number是可选项，默认情况下端口使用6379，db_number使用0。  </p><ul><li>示例<br>创建一个celery application定义任务列表，新建一个<code>celery1.py</code>文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">broker = <span class="string">"redis://118.24.18.158:6379/5"</span></span><br><span class="line">backend = <span class="string">"redis://118.24.18.158:6379/6"</span></span><br><span class="line">app = Celery(<span class="string">"celery1"</span>, broker=broker, backend=backend)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure></li></ul><p>启动Celery Worker开始监听并执行任务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A celery1 worker --loglevel=info</span><br></pre></td></tr></table></figure></p><p>调用任务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery1 <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">re = add.delay(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">print(re)</span><br><span class="line">print(re.status)</span><br><span class="line">time.sleep(<span class="number">8</span>)</span><br><span class="line">print(re.status)</span><br><span class="line">print(re.result)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;celery简介&quot;&gt;&lt;a href=&quot;#celery简介&quot; class=&quot;headerlink&quot; title=&quot;celery简介&quot;&gt;&lt;/a&gt;celery简介&lt;/h3&gt;&lt;p&gt;Celery是一个python开发的异步分布式任务调度模块。&lt;br&gt;Celery本身并不提供消息服务，使用第三方服务，也就是borker来传递任务，一般使用rabbitMQ或者Redis。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Celery特点&lt;br&gt;简单：一单熟悉了celery的工作流程后，配置和使用还是比较简单的。&lt;br&gt;高可用：当任务执行失败或执行过程中发生连接中断，celery 会自动尝试重新执行任务。&lt;br&gt;快速：一个单进程的celery每分钟可处理上百万个任务。&lt;br&gt;灵活： 几乎celery的各个组件都可以被扩展及自定制。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="celery" scheme="https://rosinelan.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python消息队列</title>
    <link href="https://rosinelan.github.io/2018/05/25/python%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://rosinelan.github.io/2018/05/25/python消息队列/</id>
    <published>2018-05-25T13:13:35.000Z</published>
    <updated>2018-05-25T14:19:07.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消息队列简介"><a href="#消息队列简介" class="headerlink" title="消息队列简介"></a>消息队列简介</h3><p>消息队列”是在消息的传输过程中保存消息的容器。<br>消息队列最经典的用法就是消费者和生成者之间通过消息管道来传递消息，消费者和生成者是不通的进程。生产者往管道中写消息，消费者从管道中读消息。  </p><h3 id="消息队列在multiprocessing的实现"><a href="#消息队列在multiprocessing的实现" class="headerlink" title="消息队列在multiprocessing的实现"></a>消息队列在multiprocessing的实现</h3><p>操作系统提供了很多机制来实现进程间的通信 ，multiprocessing模块就提供了Queue和Pipe两种方法来实现。<br><a id="more"></a></p><h4 id="Queue实现"><a href="#Queue实现" class="headerlink" title="Queue实现"></a>Queue实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    r.terminate()</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Process to write: <span class="number">32532</span></span><br><span class="line">Process to read: <span class="number">28588</span></span><br><span class="line">Put A to queue...</span><br><span class="line">Get A <span class="keyword">from</span> queue.</span><br><span class="line">Put B to queue...</span><br><span class="line">Get B <span class="keyword">from</span> queue.</span><br><span class="line">Put C to queue...</span><br><span class="line">Get C <span class="keyword">from</span> queue.</span><br></pre></td></tr></table></figure></p><h4 id="Pipe实现"><a href="#Pipe实现" class="headerlink" title="Pipe实现"></a>Pipe实现</h4><p>Pipe方法返回(conn1, conn2)代表一个管道的两个端。<br>Pipe方法有duplex参数，如果duplex参数为True(默认值)，那么这个管道是全双工模式，也就是说conn1和conn2均可收发。duplex为False，conn1只负责接受消息，conn2只负责发送消息。<br>send和recv方法分别是发送和接受消息的方法。close方法表示关闭管道，当消息接受结束以后，关闭管道。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc1</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">"send: %s"</span> %(i))</span><br><span class="line">        pipe.send(i)</span><br><span class="line">        <span class="comment"># print(dir(pipe))</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc2</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        print(<span class="string">"proc2 rev:"</span>, pipe.recv())</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pipe = multiprocessing.Pipe(duplex=<span class="keyword">False</span>)</span><br><span class="line">    p1 = multiprocessing.Process(target=proc1, args=(pipe[<span class="number">1</span>],))</span><br><span class="line">    p2 = multiprocessing.Process(target=proc2, args=(pipe[<span class="number">0</span>],))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    pipe[<span class="number">0</span>].close()</span><br><span class="line">    pipe[<span class="number">1</span>].close()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">send: <span class="number">0</span></span><br><span class="line">proc2 rev: <span class="number">0</span></span><br><span class="line">send: <span class="number">1</span></span><br><span class="line">proc2 rev: <span class="number">1</span></span><br><span class="line">send: <span class="number">2</span></span><br><span class="line">proc2 rev: <span class="number">2</span></span><br><span class="line">send: <span class="number">3</span></span><br><span class="line">proc2 rev: <span class="number">3</span></span><br><span class="line">send: <span class="number">4</span></span><br><span class="line">proc2 rev: <span class="number">4</span></span><br></pre></td></tr></table></figure></p><h3 id="queue模块实现消息队列"><a href="#queue模块实现消息队列" class="headerlink" title="queue模块实现消息队列"></a>queue模块实现消息队列</h3><p>在python中还可以直接使用queue模块专门实现消息队列。<br>queue对象实现一个fifo队列（其他的还有lifo、priority队列，这里不再介绍）。queue只有maxsize一个构造参数，用来指定队列容量，指定为0的时候代表容量无限。主要有以下成员函数  </p><ul><li>queue.qsize()<br>返回消息队列的当前空间。返回的值不一定可靠。  </li><li>queue.empty()<br>判断消息队列是否为空，返回True或False。同样不可靠。  </li><li>queue.full()<br>类似上边，判断消息队列是否满。  </li><li>queue.put(item, block=True, timeout=None)<br>往消息队列中存放消息。block可以控制是否阻塞，timeout指定阻塞时候的等待时间。如果不阻塞或者超时，会引起一个full exception。  </li><li>queue.put_nowait(item)<br>相当于put(item, False)。  </li><li>queue.get(block=True, timeout=None)<br>获取一个消息，其他同put。<br>以下两个函数用来判断消息对应的任务是否完成。  </li><li>queue.task_done()<br>接受消息的线程通过调用这个函数来说明消息对应的任务已完成。  </li><li>queue.join()<br>实际上意味着等到队列为空，再执行别的操作。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Producer thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, t_name, queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, name=t_name)</span><br><span class="line">        self.data = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):  <span class="comment"># 随机产生10个数字 ，可以修改为任意大小</span></span><br><span class="line">            print(<span class="string">"%s: %s is producing %d to the queue!"</span> % (time.ctime(), self.getName(), i))</span><br><span class="line">            self.data.put(i)  <span class="comment"># 将数据依次存入队列</span></span><br><span class="line">        print(<span class="string">"%s: %s finished!"</span> % (time.ctime(), self.getName()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Consumer thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer_even</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, t_name, queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, name=t_name)</span><br><span class="line">        self.data = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val_even = self.data.get(<span class="number">1</span>, <span class="number">5</span>)  <span class="comment"># get(self, block=True, timeout=None) ,1就是阻塞等待,5是超时5秒</span></span><br><span class="line">                <span class="keyword">if</span> val_even % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"%s: %s is consuming. %d in the queue is consumed!"</span> % (time.ctime(), self.getName(), val_even))</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.data.put(val_even)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span>:  <span class="comment"># 等待输入，超过5秒  就报异常</span></span><br><span class="line">                print(<span class="string">"%s: %s finished!"</span> % (time.ctime(), self.getName()))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer_odd</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, t_name, queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, name=t_name)</span><br><span class="line">        self.data = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val_odd = self.data.get(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> val_odd % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"%s: %s is consuming. %d in the queue is consumed!"</span> % (time.ctime(), self.getName(), val_odd))</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.data.put(val_odd)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"%s: %s finished!"</span> % (time.ctime(), self.getName()))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main thread</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    queue = Queue()</span><br><span class="line">    producer = Producer(<span class="string">'Pro.'</span>, queue)</span><br><span class="line">    consumer_even = Consumer_even(<span class="string">'Con_even.'</span>, queue)</span><br><span class="line">    consumer_odd = Consumer_odd(<span class="string">'Con_odd.'</span>, queue)</span><br><span class="line">    producer.start()</span><br><span class="line">    consumer_even.start()</span><br><span class="line">    consumer_odd.start()</span><br><span class="line">    producer.join()</span><br><span class="line">    consumer_even.join()</span><br><span class="line">    consumer_odd.join()</span><br><span class="line">    print(<span class="string">'All threads terminate!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. <span class="keyword">is</span> producing <span class="number">0</span> to the queue!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. <span class="keyword">is</span> producing <span class="number">1</span> to the queue!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. <span class="keyword">is</span> producing <span class="number">2</span> to the queue!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. <span class="keyword">is</span> producing <span class="number">3</span> to the queue!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. <span class="keyword">is</span> producing <span class="number">4</span> to the queue!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Pro. finished!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Con_even. <span class="keyword">is</span> consuming. <span class="number">0</span> <span class="keyword">in</span> the queue <span class="keyword">is</span> consumed!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2018</span>: Con_odd. <span class="keyword">is</span> consuming. <span class="number">1</span> <span class="keyword">in</span> the queue <span class="keyword">is</span> consumed!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">05</span> <span class="number">2018</span>: Con_even. <span class="keyword">is</span> consuming. <span class="number">4</span> <span class="keyword">in</span> the queue <span class="keyword">is</span> consumed!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">13</span> <span class="number">2018</span>: Con_odd. <span class="keyword">is</span> consuming. <span class="number">3</span> <span class="keyword">in</span> the queue <span class="keyword">is</span> consumed!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">13</span> <span class="number">2018</span>: Con_even. <span class="keyword">is</span> consuming. <span class="number">2</span> <span class="keyword">in</span> the queue <span class="keyword">is</span> consumed!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">20</span> <span class="number">2018</span>: Con_even. finished!</span><br><span class="line">Fri May <span class="number">25</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">20</span> <span class="number">2018</span>: Con_odd. finished!</span><br><span class="line">All threads terminate!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;消息队列简介&quot;&gt;&lt;a href=&quot;#消息队列简介&quot; class=&quot;headerlink&quot; title=&quot;消息队列简介&quot;&gt;&lt;/a&gt;消息队列简介&lt;/h3&gt;&lt;p&gt;消息队列”是在消息的传输过程中保存消息的容器。&lt;br&gt;消息队列最经典的用法就是消费者和生成者之间通过消息管道来传递消息，消费者和生成者是不通的进程。生产者往管道中写消息，消费者从管道中读消息。  &lt;/p&gt;
&lt;h3 id=&quot;消息队列在multiprocessing的实现&quot;&gt;&lt;a href=&quot;#消息队列在multiprocessing的实现&quot; class=&quot;headerlink&quot; title=&quot;消息队列在multiprocessing的实现&quot;&gt;&lt;/a&gt;消息队列在multiprocessing的实现&lt;/h3&gt;&lt;p&gt;操作系统提供了很多机制来实现进程间的通信 ，multiprocessing模块就提供了Queue和Pipe两种方法来实现。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="queue" scheme="https://rosinelan.github.io/tags/queue/"/>
    
      <category term="pipe" scheme="https://rosinelan.github.io/tags/pipe/"/>
    
      <category term="消息队列" scheme="https://rosinelan.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>python多线程</title>
    <link href="https://rosinelan.github.io/2018/05/23/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://rosinelan.github.io/2018/05/23/python多线程/</id>
    <published>2018-05-23T13:25:22.000Z</published>
    <updated>2018-05-23T16:31:41.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>任务可以由多进程完成，也可以由一个进程内的多线程完成。<br>我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。<br>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持，Python也不例外，并且，Python的线程是真正的Posix Thread，而不是模拟出来的线程。Python的标准库提供了threading模块。<br><a id="more"></a></p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>在python中多线程的实现方法有2种。  </p><ol><li>将要执行的方法作为参数传递给Thread的构造方法。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(<span class="string">"开始子进程 &#123;0&#125;"</span>.format(args))</span><br><span class="line">    print(<span class="string">"结束子进程 &#123;0&#125;"</span>.format(args))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    t1 = threading.Thread(target=worker, args=(<span class="number">1</span>,))</span><br><span class="line">    t2 = threading.Thread(target=worker, args=(<span class="number">2</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">开始子进程 <span class="number">1</span></span><br><span class="line">结束子进程 <span class="number">1</span></span><br><span class="line">开始子进程 <span class="number">2</span></span><br><span class="line">结束子进程 <span class="number">2</span></span><br><span class="line">end main</span><br></pre></td></tr></table></figure></p><ol><li>从Thread继承，并重写run()方法。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, args)</span>:</span></span><br><span class="line">        super(Hello, self).__init__()    <span class="comment">#注意：要显式的调用父类的初始化函数</span></span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"开始子进程 &#123;0&#125;"</span>.format(self.args))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"结束子进程 &#123;0&#125;"</span>.format(self.args))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    t1 = Hello(<span class="number">1</span>)</span><br><span class="line">    t2 = Hello(<span class="number">2</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">开始子进程 <span class="number">1</span></span><br><span class="line">开始子进程 <span class="number">2</span></span><br><span class="line">end main</span><br><span class="line">结束子进程 <span class="number">1</span></span><br><span class="line">结束子进程 <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="模块函数"><a href="#模块函数" class="headerlink" title="模块函数"></a>模块函数</h4><ul><li>threading.active_count()<br>返回当前存活的thread对象的数量。返回的数量和<code>enumerate()</code>列表长度相等。  </li><li>threading.current_thread()<br>返回当前线程对象。  </li><li>threading.get_ident()<br>返回当前线程的<code>thread identifier</code>。这是个非零的整数。该值无特殊含义。  </li><li>threading.enumerate()<br>以列表形式返回当前存活的所有线程对象。列表中包括守护线程和由<code>current_thread()</code>创建的虚拟线程对象，不包括已结束和还没开始的线程。  </li><li>threading.main_thread()<br>返回主线程对象。正常情况下，主线程由python解释器启动。<h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4></li><li>start()<br>启动线程，调用run方法。同一线程对象多次调用将会出现<code>RuntimeError</code>错误。</li><li>run()<br>启动线程</li><li>join(timeout=None)<br>等待线程对象结束。</li><li>is_alive()<br>线程是否活着<h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4></li><li>name<br>线程的名称，无特殊意义。</li><li>daemon<br>布尔值，表示该线程是否为守护线程。设置该值必须在调用run()方法前，否则会报<code>RuntimeError</code>错误。假如主线程不是守护线程，该主线程创建的所有子线程该值为False。<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。<br>这种情况下通过线程锁保证修改不会发生冲突。<br>锁的创建通过<code>threading.Lock()</code>进行，操作类似于多进程。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(name, lock)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        print(<span class="string">"start &#123;0&#125;"</span>.format(name))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"end &#123;0&#125;"</span>.format(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    t1 = threading.Thread(target=worker, args=(<span class="string">"worker1"</span>, lock))</span><br><span class="line">    t2 = threading.Thread(target=worker, args=(<span class="string">"worker2"</span>, lock))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start worker1</span><br><span class="line">end worker1</span><br><span class="line">start worker2</span><br><span class="line">end worker2</span><br></pre></td></tr></table></figure></p><p>当然，获取锁也可以通过<code>lock.acquire()</code>完成，释放锁通过<code>lock.release()</code>完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(name, lock)</span>:</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"start &#123;0&#125;"</span>.format(name))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">"end &#123;0&#125;"</span>.format(name))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        lock.release()</span><br></pre></td></tr></table></figure></p><ul><li>锁的好处<br>确保了某段关键代码只能由一个线程从头到尾完整地执行。  </li><li>坏处<br>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。<br>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。<h3 id="线程共享内存"><a href="#线程共享内存" class="headerlink" title="线程共享内存"></a>线程共享内存</h3>多线程和多进程不同之处在于多线程本身就是可以和父进程共享内存的，这也是为什么其中一个线程挂掉以后，为什么其他线程也会死掉的道理。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">l = list()</span><br><span class="line">l += range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">()</span>:</span></span><br><span class="line">    l.append(<span class="string">"GOD"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    t1 = threading.Thread(target=worker)</span><br><span class="line">    t2 = threading.Thread(target=worker)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'GOD'</span>, <span class="string">'GOD'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>在使用多线程处理任务时也不是线程越多越好，由于在切换线程的时候，需要切换上下文环境，依然会造成cpu的大量开销。为解决这个问题，线程池的概念被提出来了。预先创建好一个较为优化的数量的线程，让过来的任务立刻能够使用，就形成了线程池。<br>此处介绍<code>threapool</code>是一个第三方模块，需要使用<code>pip install threadpool</code>安装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(m, n, o)</span>:</span></span><br><span class="line">    print(<span class="string">"m = &#123;0&#125;  n=&#123;1&#125;  o=&#123;2&#125;"</span>.format(m, n, o))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lst_vars_1 = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">    lst_vars_2 = [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</span><br><span class="line">    func_var = [(lst_vars_1, <span class="keyword">None</span>), (lst_vars_2, <span class="keyword">None</span>)]</span><br><span class="line"></span><br><span class="line">    pool = threadpool.ThreadPool(<span class="number">2</span>)</span><br><span class="line">    requests = threadpool.makeRequests(hello, func_var)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</span><br><span class="line">    pool.wait()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">1</span>  n=<span class="number">2</span>  o=<span class="number">3</span></span><br><span class="line">m = <span class="number">4</span>  n=<span class="number">5</span>  o=<span class="number">6</span></span><br></pre></td></tr></table></figure></p><ul><li>Executor<br>在python3.3之后，并行任务可以使用<code>Executor Objects</code>，更多内容点击<a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank" rel="noopener">concurrent.futures — Launching parallel tasks</a>查看官方介绍。  </li><li>关于python中多核CPU的说明<br>Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。<br>GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。<br>所以，在Python中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。<br>Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。<br>更多关于<code>threading</code>的内容可以点击<a href="https://docs.python.org/3/library/threading.html" target="_blank" rel="noopener">threading — Thread-based parallelism</a>查看官方介绍。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h3&gt;&lt;p&gt;任务可以由多进程完成，也可以由一个进程内的多线程完成。&lt;br&gt;我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。&lt;br&gt;由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持，Python也不例外，并且，Python的线程是真正的Posix Thread，而不是模拟出来的线程。Python的标准库提供了threading模块。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="Lock" scheme="https://rosinelan.github.io/tags/Lock/"/>
    
      <category term="threading" scheme="https://rosinelan.github.io/tags/threading/"/>
    
      <category term="threadpool" scheme="https://rosinelan.github.io/tags/threadpool/"/>
    
  </entry>
  
  <entry>
    <title>python多进程</title>
    <link href="https://rosinelan.github.io/2018/05/20/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://rosinelan.github.io/2018/05/20/python多进程/</id>
    <published>2018-05-20T12:47:38.000Z</published>
    <updated>2018-05-23T14:44:02.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程简介"><a href="#进程简介" class="headerlink" title="进程简介"></a>进程简介</h3><p>进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的(静态的)，进程是活的(动态的)。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；用户进程就不必我多讲了吧，所有由你启动的进程都是用户进程。进程是操作系统进行资源分配的单位。<br>在操作系统的管理下，所有正在运行的进程轮流使用CPU，每个进程允许占用CPU的时间非常短(比如10毫秒)，这样用户根本感觉不出来CPU是在轮流为多个进程服务，就好象所有的进程都在不间断地运行一样。但实际上在任何一个时间内有且仅有一个进程占有CPU。<br><a id="more"></a></p><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>进程(process)和线程(thread)<br>单个CPU一次只能运行一个任务；在任一时刻，CPU总是运行一个进程，其他进程处于非运行状态；<br>一个进程可以包含多个线程；<br>进程没有任何共享状态，进程修改的数据，改动仅限于该进程内；<br>一个进程的内存空间是共享的，每个线程都可以使用这些共享内存；<br>一个线程使用某些共享内存时，其他线程必须等它结束才能使用这一块内存；防止多个线程同时读写某一块内存区域，采用互斥锁(Mutual exclusion，缩写Mutex)；<br>某些内存区域只能供给固定数目的线程使用，此时通过信号量(Semaphore)保证多个线程不会互相冲突；<br>多进程形式，运行多个任务同时运行；多线程形式，允许单个任务分成不同的部分运行；<br>多线程使用的是cpu的一个核，适合io密集型；<br>多进程使用的是cpu的多个核，适合运算密集型。<br>在linux中可以使用ps -efL查看进程和线程ID。以memcached进程为例，输出结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos ~]<span class="comment"># ps -efL |grep memcached</span></span><br><span class="line">root     24421     1 24421  0   10 May19 ?        00:00:03 memcached -d -u root</span><br><span class="line">root     24421     1 24422  0   10 May19 ?        00:00:01 memcached -d -u root</span><br><span class="line">root     24421     1 24423  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24424  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24425  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24426  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24427  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24428  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     24421     1 24429  0   10 May19 ?        00:00:09 memcached -d -u root</span><br><span class="line">root     24421     1 24430  0   10 May19 ?        00:00:00 memcached -d -u root</span><br><span class="line">root     32169 31101 32169  0    1 23:23 pts/0    00:00:00 grep --color=auto memcached</span><br></pre></td></tr></table></figure></p><p>第一行<code>UID</code>(用户ID)，第二行为<code>PID</code>(进程ID)，第三行<code>PPID</code>(父进程ID)，第四行<code>LWP</code>(线程ID)。<br>从示例可以看出，进程24421子进程有10个，对应线程ID分别为24421-24430。  </p><h3 id="multiprocess"><a href="#multiprocess" class="headerlink" title="multiprocess"></a>multiprocess</h3><p>python中的多线程无法利用多核优势，若要充分使用多核CPU资源，在python中大部分情况使用多进程。python提供了非常好用的多进程包multiprocessing。<br>multiprocessing模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块threading的编程接口类似。<br>multiprocessing模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。  </p><h4 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h4><p>创建一个Process对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = multiprocessing.Process(target=worker_1, args=(<span class="number">2</span>, ))</span><br></pre></td></tr></table></figure></p><ul><li><p>参数<br>target：函数名字<br>args：函数需要的参数，以tuple的形式传入(单个元素的tuple必须有逗号)</p></li><li><p>方法<br>p.is_alive()     判断进程p是否存活，是返回True<br>p.run()          启动进程，它去调用target指定的函数<br>p.start()        启动进程，它会自动调用run方法，推荐使用start<br>p.join(timeout)  主线程等待p终止(主线程处于等的状态，p处于运行状态)。p.join只能join使用start开启的进程，不能join使用run开启的进程<br>p.terminate()    强制进程p退出，不会进行任何清理操作，如果p创建了子进程，该子进程就变成了僵尸进程  </p></li><li>属性<br>p.name           进程的名字<br>p.pid            进程的pid<br>p.daemon         默认为False，如果设置为True代表p为后台运行的守护进程，当p的父进程终止时p也随之终止，并且设置为True后，p不能创建自己的新进程，必须在p.start()之前设置  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(args, interval)</span>:</span></span><br><span class="line">    print(<span class="string">"start worker &#123;0&#125;"</span>.format(args))</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    print(<span class="string">"end worker &#123;0&#125;"</span>.format(args))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    p1 = multiprocessing.Process(target=worker, args=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    p2 = multiprocessing.Process(target=worker, args=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    p3 = multiprocessing.Process(target=worker, args=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">end main</span><br><span class="line">start worker <span class="number">1</span></span><br><span class="line">start worker <span class="number">2</span></span><br><span class="line">start worker <span class="number">3</span></span><br><span class="line">end worker <span class="number">1</span></span><br><span class="line">end worker <span class="number">2</span></span><br><span class="line">end worker <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>multprocessing用到的两个方法<br>cpu_count()：统计cpu总数<br>active_children()：获得所有子进程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(args, interval)</span>:</span></span><br><span class="line">    print(<span class="string">"start worker &#123;0&#125;"</span>.format(args))</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">    print(<span class="string">"end worker &#123;0&#125;"</span>.format(args))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    p1 = multiprocessing.Process(target=worker, args=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    p2 = multiprocessing.Process(target=worker, args=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    p3 = multiprocessing.Process(target=worker, args=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join(timeout=<span class="number">0.5</span>)    <span class="comment">#此处保证了p1优先执行</span></span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"the number of CPU is: &#123;0&#125;"</span>.format(multiprocessing.cpu_count()))</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> multiprocessing.active_children():</span><br><span class="line">       print(<span class="string">"The name of active children is: &#123;0&#125;, pid is: &#123;1&#125; is alive"</span>.format(p.name, p.pid))</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">start worker <span class="number">1</span></span><br><span class="line">the number of CPU <span class="keyword">is</span>: <span class="number">4</span></span><br><span class="line">The name of active children <span class="keyword">is</span>: Process<span class="number">-1</span>, pid <span class="keyword">is</span>: <span class="number">25360</span> <span class="keyword">is</span> alive</span><br><span class="line">The name of active children <span class="keyword">is</span>: Process<span class="number">-2</span>, pid <span class="keyword">is</span>: <span class="number">24500</span> <span class="keyword">is</span> alive</span><br><span class="line">The name of active children <span class="keyword">is</span>: Process<span class="number">-3</span>, pid <span class="keyword">is</span>: <span class="number">26100</span> <span class="keyword">is</span> alive</span><br><span class="line">end main</span><br><span class="line">start worker <span class="number">3</span></span><br><span class="line">start worker <span class="number">2</span></span><br><span class="line">end worker <span class="number">1</span></span><br><span class="line">end worker <span class="number">2</span></span><br><span class="line">end worker <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h4 id="lock组件"><a href="#lock组件" class="headerlink" title="lock组件"></a>lock组件</h4><p>当我们用多进程来读写文件的时候，如果一个进程是写文件，一个进程是读文件，如果两个文件同时进行，肯定是不行的，必须是文件写结束以后，才可以进行读操作。或者是多个进程在共享一些资源的时候，同时只能有一个进程进行访问，那就要有一个锁机制进行控制。<br>下面使用2个进程分别进行<code>+1</code>和<code>+3</code>操作为例 </p><ul><li>不加锁  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value, number)</span>:</span></span><br><span class="line">    print(<span class="string">"start add&#123;0&#125; number= &#123;1&#125;"</span>.format(value, number))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        number += value</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        print(<span class="string">"number = &#123;0&#125;"</span>.format(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    p1 = multiprocessing.Process(target=add, args=(<span class="number">1</span>, number))</span><br><span class="line">    p3 = multiprocessing.Process(target=add, args=(<span class="number">3</span>, number))</span><br><span class="line">    p1.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">end main</span><br><span class="line">start add1 number= <span class="number">0</span></span><br><span class="line">start add3 number= <span class="number">0</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line">number = <span class="number">3</span></span><br><span class="line">number = <span class="number">2</span></span><br><span class="line">number = <span class="number">6</span></span><br></pre></td></tr></table></figure></p><ul><li>加锁  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lock, value, number)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        print(<span class="string">"start add&#123;0&#125; number= &#123;1&#125;"</span>.format(value, number))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">            number += value</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            print(<span class="string">"number = &#123;0&#125;"</span>.format(number))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    lock = multiprocessing.Lock()</span><br><span class="line">    p1 = multiprocessing.Process(target=add, args=(lock, <span class="number">1</span>, number))</span><br><span class="line">    p3 = multiprocessing.Process(target=add, args=(lock, <span class="number">3</span>, number))</span><br><span class="line">    p1.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">end main</span><br><span class="line">start add1 number= <span class="number">0</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line">number = <span class="number">2</span></span><br><span class="line">start add3 number= <span class="number">0</span></span><br><span class="line">number = <span class="number">3</span></span><br><span class="line">number = <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>锁的获取可以使用<code>lock.acquire()</code>获取，<code>lock.release()</code>释放<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(lock, value, number)</span>:</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">"start add3 number= &#123;0&#125;"</span>.format(number))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            number += value</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            print(<span class="string">"number = &#123;0&#125;"</span>.format(number))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>一般变量在进程之间是没法进行通讯的，但是multiprocessing提供了<code>Value</code>和<code>Array</code>模块，可以在不同的进程中使用同一变量。<code>Value</code>和<code>Array</code>结构内部都实现了锁机制，因此多进程是安全的。<br>Value和Array都需要设置其中存放值的类型，d是double类型，i是int类型。类型设置和<code>array</code>模块的值类似，更多的类型可以点击<a href="https://docs.python.org/3/library/array.html#module-array" target="_blank" rel="noopener">array — Efficient arrays of numeric values</a>查看。<br>上面的示例中，两个进程执行后number结果分别为2和6，假如两个进程可以共享变量，name输出结果将会是8。  </p><ul><li>Value<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value, number)</span>:</span></span><br><span class="line">    print(<span class="string">"start add&#123;0&#125; number= &#123;1&#125;"</span>.format(value, number.value))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        number.value += value</span><br><span class="line">        print(<span class="string">"number = &#123;0&#125;"</span>.format(number.value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    number = Value(<span class="string">'d'</span>, <span class="number">0</span>)    <span class="comment">#使用Value创建变量,d表示数据类型为double</span></span><br><span class="line">    p1 = multiprocessing.Process(target=add, args=(<span class="number">1</span>, number))</span><br><span class="line">    p3 = multiprocessing.Process(target=add, args=(<span class="number">3</span>, number))</span><br><span class="line">    p1.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">end main</span><br><span class="line">start add1 number= <span class="number">0.0</span></span><br><span class="line">start add3 number= <span class="number">0.0</span></span><br><span class="line">number = <span class="number">1.0</span></span><br><span class="line">number = <span class="number">4.0</span></span><br><span class="line">number = <span class="number">5.0</span></span><br><span class="line">number = <span class="number">8.0</span></span><br></pre></td></tr></table></figure></p><p>number最终结果是8，但是具体输出结果每次执行可能存在差异。</p><ul><li>Array<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Array, Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        arr[i] = -arr[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    arr = Array(<span class="string">'i'</span>, [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>)])    <span class="comment">#定义Array类型变量,i表示数据类型为int</span></span><br><span class="line">    print(arr[:])</span><br><span class="line">    p = Process(target=worker, args=(arr,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()    <span class="comment">#等待子进程执行完成</span></span><br><span class="line">    print(arr[:])</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>, <span class="number">-5</span>]</span><br></pre></td></tr></table></figure></p><h4 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h4><p>共享内存的实现，除了使用<code>Value</code>和<code>Array</code>，还可以使用<code>Manager</code>实现。<br>Manager()返回的manager对象通过一个服务进程，让其他进程通过代理的方式从挨揍python对象。manager对象支持<code>list</code>, <code>dict</code>, <code>Namespace</code>, <code>Lock</code>, <code>RLock</code>, <code>Semaphore</code>, <code>BoundedSemaphore</code>, <code>Condition</code>, <code>Event</code>, <code>Barrier</code>, <code>Queue</code>, <code>Value</code> and <code>Array</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager, Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d, l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="number">2</span>] = <span class="string">'2'</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="keyword">None</span></span><br><span class="line">    l.reverse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line">    d = manager.dict()</span><br><span class="line">    l = manager.list(range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    p = Process(target=f, args=(d, l))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    print(d)</span><br><span class="line">    print(l)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>: <span class="string">'1'</span>, <span class="number">2</span>: <span class="string">'2'</span>, <span class="number">0.25</span>: <span class="keyword">None</span>&#125;</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><p>Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程。<br>进程池提供阻塞和非阻塞两种方法<br><code>Pool.apply_async</code> 非阻塞，定义的进程池进程最大数可以同时执行<br><code>Pool.apply</code> 一个进程结束，释放回进程池，下一个进程才可以开始  </p><ul><li>使用<code>Pool.apply</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"_start &#123;0&#125;"</span>.format(msg))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"_end &#123;0&#125;"</span>.format(msg))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        msg = <span class="string">"hello &#123;0&#125;"</span>.format(i)</span><br><span class="line">        pool.apply(fun, (msg,))</span><br><span class="line">    pool.close()<span class="comment">#在调用join之前，要先调用close，否则会报错，close执行完不会有新的进程加入到pool</span></span><br><span class="line">    pool.join()<span class="comment">#join 是等待所有的子进程结束</span></span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">_start hello <span class="number">1</span></span><br><span class="line">_end hello <span class="number">1</span></span><br><span class="line">_start hello <span class="number">2</span></span><br><span class="line">_end hello <span class="number">2</span></span><br><span class="line">end main</span><br></pre></td></tr></table></figure></p><p>输出结果为按顺序，一个进程结束再进行下一个</p><ul><li>使用<code>Pool.apply_async</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">"_start &#123;0&#125;"</span>.format(msg))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"_end &#123;0&#125;"</span>.format(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"start main"</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        msg = <span class="string">"hello &#123;0&#125;"</span>.format(i)</span><br><span class="line">        pool.apply_async(fun, (msg,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(<span class="string">"end main"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start main</span><br><span class="line">_start hello <span class="number">1</span></span><br><span class="line">_start hello <span class="number">2</span></span><br><span class="line">_end hello <span class="number">1</span></span><br><span class="line">_end hello <span class="number">2</span></span><br><span class="line">end main</span><br></pre></td></tr></table></figure></p><p>此时两个进程可以同时执行。<br>更多关于<code>multiprocessing</code>的内容可以点击<a href="https://docs.python.org/3/library/multiprocessing.html" target="_blank" rel="noopener">multiprocessing — Process-based parallelism</a>查看官方介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;进程简介&quot;&gt;&lt;a href=&quot;#进程简介&quot; class=&quot;headerlink&quot; title=&quot;进程简介&quot;&gt;&lt;/a&gt;进程简介&lt;/h3&gt;&lt;p&gt;进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的(静态的)，进程是活的(动态的)。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；用户进程就不必我多讲了吧，所有由你启动的进程都是用户进程。进程是操作系统进行资源分配的单位。&lt;br&gt;在操作系统的管理下，所有正在运行的进程轮流使用CPU，每个进程允许占用CPU的时间非常短(比如10毫秒)，这样用户根本感觉不出来CPU是在轮流为多个进程服务，就好象所有的进程都在不间断地运行一样。但实际上在任何一个时间内有且仅有一个进程占有CPU。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="多进程" scheme="https://rosinelan.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Process" scheme="https://rosinelan.github.io/tags/Process/"/>
    
      <category term="Lock" scheme="https://rosinelan.github.io/tags/Lock/"/>
    
      <category term="Value" scheme="https://rosinelan.github.io/tags/Value/"/>
    
      <category term="Array" scheme="https://rosinelan.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>python访问memcached</title>
    <link href="https://rosinelan.github.io/2018/05/18/python%E8%AE%BF%E9%97%AEmemcached/"/>
    <id>https://rosinelan.github.io/2018/05/18/python访问memcached/</id>
    <published>2018-05-18T06:15:25.000Z</published>
    <updated>2018-05-19T01:13:21.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="memcached介绍"><a href="#memcached介绍" class="headerlink" title="memcached介绍"></a>memcached介绍</h3><p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。<br>memcached在实现分布式群集部署时，memcached服务之间是不能进行通讯的，分布式也是通过客户端的算法把数据保存在不同的memcached中。magent是一款开源的代理服务软件，我们可以通过它来实现缓存数据的同步。magent还可以使用keepalived来实现高可用。<br><a id="more"></a></p><h3 id="memcached安装"><a href="#memcached安装" class="headerlink" title="memcached安装"></a>memcached安装</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在linux下安装</p><ul><li><p>安装libevent<br>Libevent 是一个异步事件处理软件函式库，以 BSD 许可证释出。Memcached 依赖 Libevent，因此必须先安装 Libevent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libevent-devel</span><br></pre></td></tr></table></figure></li><li><p>安装memcached</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://memcached.org/latest</span><br><span class="line">tar zxf memcached-1.5.7.tar.gz</span><br><span class="line">mv memcached-1.5.7 memcached</span><br><span class="line"><span class="built_in">cd</span> memcached/</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcached -d -u root</span><br></pre></td></tr></table></figure><p><strong>启动参数说明</strong><br><code>memcached -d -m 10 -u root -l 127.0.0.1 -p 12000 -c 256 -P /tmp/memcache/logs/memcache.pid</code><br>-p 指定端口号（默认11211）<br>-m 指定最大使用内存大小（默认64MB）<br>-t 线程数（默认4）<br>-l 连接的IP地址, 默认是本机<br>-d 以后台守护进程的方式启动<br>-c 最大同时连接数，默认是1024<br>-P 制定memecache的pid文件<br>-h  打印帮助信息<br><strong>启动确认</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos memcached]<span class="comment"># ps aux|grep memcache</span></span><br><span class="line">root     24421  0.0  0.0 413792  1080 ?        Ssl  07:45   0:00 memcached -d -u root</span><br><span class="line">root     24436  0.0  0.0 112644   964 pts/0    R+   07:45   0:00 grep --color=auto memcache</span><br><span class="line">[root@VM_0_4_centos memcached]<span class="comment"># netstat -lntp|grep memcached</span></span><br><span class="line">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN      24421/memcached     </span><br><span class="line">tcp6       0      0 :::11211                :::*                    LISTEN      24421/memcached</span><br></pre></td></tr></table></figure></p><h3 id="python访问memcached"><a href="#python访问memcached" class="headerlink" title="python访问memcached"></a>python访问memcached</h3><p>python访问memcached需要安装python-memcached模块。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-memcached</span><br></pre></td></tr></table></figure></p><p>操作实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memcache</span><br><span class="line"></span><br><span class="line">mem = memcache.Client([<span class="string">"118.24.18.158:11211"</span>])</span><br><span class="line">mem.set(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(mem.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：oracle</span></span><br></pre></td></tr></table></figure></p><p>另外，python-memcached模块原生支持集群操作，其原理是在内存中维护一个主机列表，且集群中主机的权重值和主机在列表中重复出现的次数成正比。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主机IP        权重</span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">1</span></span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.2</span>        <span class="number">2</span></span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.3</span>        <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>那么内存中主机列表为：host_list = [“1.1.1.1”, “1.1.1.2”,”1.1.1.2”,”1.1.1.3”,]<br>用户如果要在内存中创建一个键值对（如：k1 = “value1”），那么要执行以下步骤：<br>根据算法将k1转换成一个数字<br>将数字和主机列表长度求余数，得到一个值N（0 &lt;= N &lt; 长度）<br>在主机列表中根据第二步得到的值为索引获取主机，例如: host_list[N]<br>连接将第三步中获取的主机，将k1 = “value1” 放置在该服务器的内存中<br>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> memcache</span><br><span class="line">mc = memcache.Client([(<span class="string">'1.1.1.1:11211'</span>, <span class="number">1</span>), (<span class="string">'1.1.1.2:11211'</span>, <span class="number">2</span>),(<span class="string">'1.1.1.3:11211'</span>,<span class="number">1</span>)])</span><br><span class="line">mc.set(<span class="string">'k1'</span>,<span class="string">'value1'</span>)</span><br><span class="line">ret = mc.get(<span class="string">'k1'</span>)</span><br><span class="line"><span class="keyword">print</span> (ret)</span><br></pre></td></tr></table></figure></p><h3 id="memcached常用操作"><a href="#memcached常用操作" class="headerlink" title="memcached常用操作"></a>memcached常用操作</h3><ul><li>set(key, val)<br>在memcache中设置key的值为val。若key不存在则创建，否则修改。</li><li>get(key)<br>获取memcache中key对应的值或者<code>None</code>。</li><li>set_multi(mapping)<br>一次设置多个key/value对。以列表方式传入。若key不存在则创建，否则修改。</li><li><p>get_multi(keys)<br>一次获取多个keys</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mem.set_multi(&#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">mem.set(<span class="string">"db3"</span>, <span class="string">"memcache"</span>)</span><br><span class="line">print(mem.get(<span class="string">"db1"</span>))    <span class="comment">#输出结果：oracle</span></span><br><span class="line">print(mem.get_multi([<span class="string">"db2"</span>, <span class="string">"db3"</span>]))    <span class="comment">#输出结果：&#123;'db2': 'mysql', 'db3': 'memcache'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>add(key, val)<br>在memcache中添加新的键值对。若已存在则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(mem.add(<span class="string">"db"</span>, <span class="string">"memcache"</span>))     <span class="comment">#输出结果：True</span></span><br><span class="line">print(mem.get(<span class="string">"db"</span>))     <span class="comment">#输出结果：memcache</span></span><br><span class="line">print(mem.add(<span class="string">"db"</span>, <span class="string">"memcache"</span>))     <span class="comment">#输出结果：False</span></span><br></pre></td></tr></table></figure></li><li><p>replace(key, val)<br>修改key的值为val，若不存在则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mem.add(<span class="string">"db"</span>, <span class="string">"memcache"</span>)</span><br><span class="line">print(mem.replace(<span class="string">"db"</span>, <span class="string">"redis"</span>))    <span class="comment">#输出结果：True</span></span><br><span class="line">print(mem.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：redis</span></span><br><span class="line">print(mem.replace(<span class="string">"db1"</span>, <span class="string">"redis"</span>))    <span class="comment">#输出结果：False</span></span><br></pre></td></tr></table></figure></li><li><p>delete(key)<br>删除一个指定的key/value对。</p></li><li><p>delete_multi(keys)<br>删除多个指定的key/value对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mem.set_multi(&#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>, <span class="string">"db3"</span>: <span class="string">"memcache"</span>&#125;)</span><br><span class="line">mem.delete(<span class="string">"db1"</span>)</span><br><span class="line">mem.delete_multi([<span class="string">"db2"</span>, <span class="string">"db3"</span>])</span><br><span class="line">print(mem.get_multi([<span class="string">"db1"</span>, <span class="string">"db2"</span>, <span class="string">"db3"</span>]))    <span class="comment">#输出结果：&#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>append(key, val)<br>在指定key对应的value<code>后面</code>追加内容。</p></li><li>prepend(key, val)<br>在指定key对应的额value<code>前面</code>追加内容。</li><li><p>stats<br>查看历史操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mem.set(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(mem.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：oracle</span></span><br><span class="line">mem.append(<span class="string">"db"</span>, <span class="string">" or mysql"</span>)</span><br><span class="line">print(mem.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：oracle or mysql</span></span><br><span class="line">mem.prepend(<span class="string">"db"</span>, <span class="string">"redis or "</span>)</span><br><span class="line">print(mem.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：redis or oracle or mysql</span></span><br><span class="line">print(mem.stats)    <span class="comment">#输出结果：&#123;'set': 1, 'get': 3, 'append': 1, 'prepend': 1&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>gets和cas<br>使用缓存系统共享数据资源就必然绕不开数据争夺和脏数据（数据混乱）的问题。<br>假设商城某件商品的剩余个数保存在memcache中，product_count = 900，<br>A用户刷新页面从memecache中读取到product_count = 900，<br>B用户刷新页面从memecache中读取到product_count = 900，<br>A,B用户均购买商品，并修改product_count的值。<br>A修改后，product_count = 899；<br>B修改后，product_count = 899；<br>然而正确数字应该是898，数据就混乱了。<br>如果想要避免这种情况的发生，则可以使用gets和cas。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mem = memcache.Client([<span class="string">"118.24.18.158:11211"</span>])</span><br><span class="line">mem.set(<span class="string">"count"</span>, <span class="string">"100"</span>)</span><br><span class="line">print(mem.get(<span class="string">"count"</span>))    <span class="comment">#输出结果：100</span></span><br><span class="line">print(mem.cas(<span class="string">"count"</span>, <span class="string">"99"</span>))    <span class="comment">#输出结果：True</span></span><br><span class="line">print(mem.gets(<span class="string">"count"</span>))    <span class="comment">#输出结果：99</span></span><br></pre></td></tr></table></figure></li></ul><p>gets和cas一起使用，cas是<code>check and set</code>操作。它仅当当前客户端最后一次取值后，该key对应的值没有被其他客户端修改的情况下，才能够将值写入。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;memcached介绍&quot;&gt;&lt;a href=&quot;#memcached介绍&quot; class=&quot;headerlink&quot; title=&quot;memcached介绍&quot;&gt;&lt;/a&gt;memcached介绍&lt;/h3&gt;&lt;p&gt;Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。&lt;br&gt;memcached在实现分布式群集部署时，memcached服务之间是不能进行通讯的，分布式也是通过客户端的算法把数据保存在不同的memcached中。magent是一款开源的代理服务软件，我们可以通过它来实现缓存数据的同步。magent还可以使用keepalived来实现高可用。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="memcached" scheme="https://rosinelan.github.io/tags/memcached/"/>
    
  </entry>
  
  <entry>
    <title>python访问redis(二)</title>
    <link href="https://rosinelan.github.io/2018/05/18/python%E8%AE%BF%E9%97%AEredis-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/05/18/python访问redis-二/</id>
    <published>2018-05-18T06:15:06.000Z</published>
    <updated>2018-05-18T17:27:20.265Z</updated>
    
    <content type="html"><![CDATA[<p>关于常用nosql数据库介绍及redis安装配置的介绍，点击<a href="https://rosinelan.coding.me/2018/05/17/python%E8%AE%BF%E9%97%AEredis/" target="_blank" rel="noopener">python访问redis</a>查看。<br>前面介绍了<code>redis</code>常用的数据类型，包括<code>String</code>、<code>List</code>、<code>Hash</code>、<code>Set</code>和<code>Sorted Set</code>。下面针对不同数据类型的操作进行介绍。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>set(name, value)<br>设置值，默认不存在则创建，存在则修改<a id="more"></a></li><li><p>get(name)<br>获取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">"118.24.18.158"</span>, port=<span class="number">6379</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(r.get(<span class="string">"db"</span>))    <span class="comment">#输出结果：b'oracle'</span></span><br><span class="line">print(r.get(<span class="string">"db"</span>).decode())    <span class="comment">#输出结果：oracle</span></span><br></pre></td></tr></table></figure></li><li><p>mset(<em>args, *</em>kwargs)<br>批量设置值，传入参数为类型为<code>dict</code></p></li><li>mget(keys, *args)<br>批量获取key的值，传入参数类型为<code>tuple</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.mset(db1=<span class="string">"oracle"</span>, db2=<span class="string">"mysql"</span>, db3=<span class="string">"redis"</span>)</span><br><span class="line">print(r.mget(<span class="string">"db1"</span>, <span class="string">"db2"</span>, <span class="string">"db3"</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql', b'redis']</span></span><br></pre></td></tr></table></figure></li></ul><p>或者使用下面传递参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.mset(&#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>, <span class="string">"db3"</span>: <span class="string">"redis"</span>&#125;)</span><br><span class="line">print(r.mget([<span class="string">"db1"</span>, <span class="string">"db2"</span>, <span class="string">"db3"</span>]))    <span class="comment">#输出结果：[b'oracle', b'mysql', b'redis']</span></span><br></pre></td></tr></table></figure></p><ul><li>append(key, value)<br>在key对应的value后面追加内容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(r.get(<span class="string">"db"</span>))     <span class="comment">#输出结果：b'oracle'</span></span><br><span class="line">r.append(<span class="string">"db"</span>, <span class="string">" and "</span>)</span><br><span class="line">r.append(<span class="string">"db"</span>, <span class="string">"mysql"</span>)</span><br><span class="line">print(r.get(<span class="string">"db"</span>))     <span class="comment">#输出结果：b'oracle and mysql'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>在redis中，list类型的存储按照一个name对应一个list来存储。  </p><ul><li>lpush(name, *values)<br>左边添加<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"mysql"</span>)</span><br><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br></pre></td></tr></table></figure></li></ul><p>或者可以如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br></pre></td></tr></table></figure></p><ul><li><p>rpush(name, *values)<br>右边添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.rpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">r.rpush(<span class="string">"db"</span>, <span class="string">"mysql"</span>)</span><br><span class="line">r.rpush(<span class="string">"db"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql', b'redis']</span></span><br></pre></td></tr></table></figure></li><li><p>linsert(name, where, refvalue, value)<br>根据where参数，在列表name的值refvalue前面或者后面插入值value，成功则返回值为新的列表的长度，否则返回-1。<br>where取值为before或者after。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'oracle']</span></span><br><span class="line">r.linsert(<span class="string">"db"</span>, <span class="string">"after"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql']</span></span><br><span class="line">r.linsert(<span class="string">"db"</span>, <span class="string">"before"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'oracle', b'redis', b'mysql']</span></span><br></pre></td></tr></table></figure></li><li><p>lpop(name)<br>删除列表name中的第一个元素，返回值为删除的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br><span class="line">print(r.lpop(<span class="string">"db"</span>))    <span class="comment">#输出结果：b'redis'</span></span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'mysql', b'oracle']</span></span><br></pre></td></tr></table></figure></li><li><p>lrange(name, start, end)<br>通过分片返回list位于start和end范围的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"mysql"</span>)</span><br><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">2</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br><span class="line">print(r.lrange(<span class="string">"db"</span>,<span class="number">0</span>, <span class="number">1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql']</span></span><br></pre></td></tr></table></figure></li><li><p>lset(name, index, value)<br>修改list中指定位置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br><span class="line">r.lset(<span class="string">"db"</span>, <span class="number">1</span>, <span class="string">"nosql"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'nosql', b'oracle']</span></span><br></pre></td></tr></table></figure></li><li><p>lrem(name, value, num)<br>删除列表name中最先出现的num个值为value的元素。<br><code>num</code>默认值为0，表示删除全部值为value的元素；<br><code>num&gt;0</code>表示删除值为value的元素时从头到尾匹配；<br><code>num&gt;0</code>表示删除值为value的元素时从尾到头匹配。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r.lpush(<span class="string">"db"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'redis', b'mysql', b'oracle']</span></span><br><span class="line">r.lrem(<span class="string">"db"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'mysql', b'oracle']</span></span><br><span class="line">r.lpush(<span class="string">"db1"</span>, <span class="string">"oracle"</span>, <span class="string">"redis"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db1"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'redis', b'mysql', b'redis', b'oracle']</span></span><br><span class="line">r.lrem(<span class="string">"db1"</span>, <span class="string">"redis"</span>, <span class="number">1</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db1"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'redis', b'oracle']</span></span><br><span class="line">r.lpush(<span class="string">"db2"</span>, <span class="string">"oracle"</span>, <span class="string">"redis"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db2"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'redis', b'mysql', b'redis', b'oracle']</span></span><br><span class="line">r.lrem(<span class="string">"db2"</span>, <span class="string">"redis"</span>, <span class="number">-2</span>)</span><br><span class="line">print(r.lrange(<span class="string">"db2"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'redis', b'mysql', b'oracle']</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set集合就是不允许重复元素的列表。  </p><ul><li>sadd(name, *values)<br>集合name中添加值。</li><li>scard(name)<br>返回集合name中元素的数量。  </li><li><p>smembers(name)<br>返回集合的所有成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.scard(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：3</span></span><br><span class="line">print(r.smembers(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：&#123;b'mysql', b'redis', b'oracle'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>spop(name)<br>随机删除并返回集合name中的一个元素。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.smembers(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：&#123;b'redis', b'oracle', b'mysql'&#125;</span></span><br><span class="line">print(r.spop(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：b'mysql'</span></span><br><span class="line">print(r.smembers(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：&#123;b'oracle', b'redis'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>srem(name, *values)<br>从集合name中删除指定的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.smembers(<span class="string">"dbset"</span>))     <span class="comment">#输出结果：&#123;b'oracle', b'redis', b'mysql'&#125;</span></span><br><span class="line">r.srem(<span class="string">"dbset"</span>, <span class="string">"mysql"</span>, <span class="string">"redis"</span>)</span><br><span class="line">print(r.smembers(<span class="string">"dbset"</span>))     <span class="comment">#输出结果：&#123;b'oracle'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>sunion(keys, *args)<br>返回多个集合的并集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">"set1"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">r.sadd(<span class="string">"set2"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br><span class="line">r.sadd(<span class="string">"set3"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</span><br><span class="line">print(r.sunion(<span class="string">"set1"</span>, <span class="string">"set2"</span>, <span class="string">"set3"</span>))    <span class="comment">#输出结果：&#123;b'5', b'2', b'3', b'1', b'4'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>sinter()<br>返回多个集合的交集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sadd(<span class="string">"set1"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>)</span><br><span class="line">r.sadd(<span class="string">"set2"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br><span class="line">r.sadd(<span class="string">"set3"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>)</span><br><span class="line">print(r.sinter(<span class="string">"set1"</span>, <span class="string">"set2"</span>, <span class="string">"set3"</span>))    <span class="comment">#输出结果：&#123;b'3'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><p>Zset也就是sorted Set，有序集合。在集合的基础上元素的排序根据另外一个值进行比较。所以有序集合每个元素有2个值，即值和分数，分数专门用来做排序。  </p><ul><li><p>zadd(name, <em>args, *</em>kwargs)<br>集合添加元素，下面两种写法是等价的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.zadd(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>, <span class="number">1</span>, <span class="string">"redis"</span>, <span class="number">3</span>, <span class="string">"mysql"</span>, <span class="number">2</span>)</span><br><span class="line">r.zadd(<span class="string">"dbset"</span>, oracle=<span class="number">1</span>, redis=<span class="number">3</span>, mysql=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>zcard(name)<br>有序集合中名称为name的元素个数。  </p></li><li><p>zrange(name, start, end)<br>返回有序集合name中位于start和end之间的元素，默认为升序排列。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.zadd(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>, <span class="number">1</span>, <span class="string">"redis"</span>, <span class="number">3</span>, <span class="string">"mysql"</span>, <span class="number">2</span>)</span><br><span class="line">print(r.zrange(<span class="string">"dbset"</span>, <span class="number">0</span>, <span class="number">-1</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql', b'redis']</span></span><br><span class="line">print(r.zcard(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：3</span></span><br></pre></td></tr></table></figure></li><li><p>zrem(name, *values)<br>删除有序集合name中的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.zadd(<span class="string">"dbset"</span>, oracle=<span class="number">1</span>, redis=<span class="number">3</span>, mysql=<span class="number">2</span>)</span><br><span class="line">r.zrem(<span class="string">"dbset"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(r.zrange(<span class="string">"dbset"</span>, <span class="number">0</span>, <span class="number">-1</span>))   <span class="comment">#输出结果：[b'mysql', b'redis']</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>redis中的Hash在内存中类似于一个name对应一个dict来存储。  </p><ul><li>hset(name, key, value)<br>名称为name的hash中，将key的值设置为value。<br>若成功添加则返回1，否则返回0.  </li><li><p>hget(name, key)<br>在名称的name的hash中，返回key的对应值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.hset(<span class="string">"dbhash"</span>, <span class="string">"db1"</span>, <span class="string">"oracle"</span>)</span><br><span class="line">print(r.hget(<span class="string">"dbhash"</span>, <span class="string">"db1"</span>))    <span class="comment">#输出结果：b'oracle'</span></span><br></pre></td></tr></table></figure></li><li><p>hmset(name, mapping)<br>名称为name的hash中，根据mapping字典内容添加对应的key和value。  </p></li><li><p>hmget(name, keys, *args)<br>名称为name的hash中获取多个keys的值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hmget(<span class="string">"dbhash"</span>, <span class="string">"db1"</span>, <span class="string">"db2"</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql']</span></span><br></pre></td></tr></table></figure></li><li><p>hkeys(name)<br>列表形式返回名称为name的hash中的keys。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hkeys(<span class="string">"dbhash"</span>))     <span class="comment">#输出结果：[b'db1', b'db2']</span></span><br></pre></td></tr></table></figure></li><li><p>hvals()<br>列表形式返回名称为name的hash中的values。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hvals(<span class="string">"dbhash"</span>))    <span class="comment">#输出结果：[b'oracle', b'mysql']</span></span><br></pre></td></tr></table></figure></li><li><p>hexists(name, key)<br>名称为name的hash中是否存在key。返回值为布尔值。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hexists(<span class="string">"dbhash"</span>, <span class="string">"db1"</span>))     <span class="comment">#输出结果：True</span></span><br><span class="line">print(r.hexists(<span class="string">"dbhash"</span>, <span class="string">"db3"</span>))     <span class="comment">#输出结果：False</span></span><br></pre></td></tr></table></figure></li><li><p>hdel(name, keys)<br>删除名称为name的hash中的keys。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hdel(<span class="string">"dbhash"</span>, <span class="string">"db1"</span>))    <span class="comment">#输出结果：1</span></span><br><span class="line">print(r.hkeys(<span class="string">"dbhash"</span>))    <span class="comment">#输出结果：[b'db2']</span></span><br></pre></td></tr></table></figure></li><li><p>hlen(name)<br>返回名称为name的hash中元素的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.hmset(<span class="string">"dbhash"</span>, &#123;<span class="string">"db1"</span>: <span class="string">"oracle"</span>, <span class="string">"db2"</span>: <span class="string">"mysql"</span>&#125;)</span><br><span class="line">print(r.hlen(<span class="string">"dbhash"</span>))    <span class="comment">#输出结果：2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="其它常用操作"><a href="#其它常用操作" class="headerlink" title="其它常用操作"></a>其它常用操作</h3><p>下面的操作适用于上述所有类型</p><ul><li><p>keys(pattern=’*’)<br>返回匹配pattern的key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="number">1</span>)</span><br><span class="line">r.set(<span class="string">"dbstr"</span>, <span class="number">2</span>)</span><br><span class="line">r.set(<span class="string">"int"</span>, <span class="number">3</span>)</span><br><span class="line">print(r.keys(pattern=<span class="string">'db*'</span>))    <span class="comment">#输出结果：[b'dbstr', b'dbset']</span></span><br></pre></td></tr></table></figure></li><li><p>delete(<em>names)<br>删除</em>name指定的一个或多个keys。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="number">1</span>)</span><br><span class="line">r.set(<span class="string">"dbstr"</span>, <span class="number">2</span>)</span><br><span class="line">r.set(<span class="string">"int"</span>, <span class="number">3</span>)</span><br><span class="line">print(r.delete(<span class="string">"dbset"</span>, <span class="string">"dbstr"</span>))</span><br><span class="line">print(r.keys())</span><br></pre></td></tr></table></figure></li><li><p>exists(name)<br>判断key为name是否存在。返回值为布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="number">1</span>)</span><br><span class="line">print(r.exists(<span class="string">"dbset"</span>))     <span class="comment">#输出结果：True</span></span><br><span class="line">print(r.exists(<span class="string">"dbstr"</span>))     <span class="comment">#输出结果：False</span></span><br></pre></td></tr></table></figure></li><li><p>rename(src, dst)<br>修改key的名称，修改成功返回True，否则返回错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="number">1</span>)</span><br><span class="line">print(r.rename(<span class="string">"dbset"</span>, <span class="string">"db"</span>))    <span class="comment">#输出结果：True</span></span><br><span class="line">print(r.keys())    <span class="comment">#输出结果：[b'db']</span></span><br></pre></td></tr></table></figure></li><li><p>expire(name, time)<br>设置key的过期时间。  </p></li><li><p>type()<br>返回key所存储值的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="number">1</span>)</span><br><span class="line">print(r.type(<span class="string">"dbset"</span>))    <span class="comment">#输出结果：b'string'</span></span><br><span class="line">r.zadd(<span class="string">"dbset1"</span>, oracle=<span class="number">1</span>, redis=<span class="number">3</span>, mysql=<span class="number">2</span>)</span><br><span class="line">print(r.type(<span class="string">"dbset1"</span>))    <span class="comment">#输出结果：b'zset'</span></span><br></pre></td></tr></table></figure></li><li><p>move(name, db)<br>将key为name的元素迁移至db。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.set(<span class="string">"dbset"</span>, <span class="string">"dbstr"</span>)</span><br><span class="line">print(r.move(<span class="string">"dbset"</span>, <span class="number">1</span>))    <span class="comment">#输出结果：True</span></span><br></pre></td></tr></table></figure></li><li><p>flushall()<br>删除所有的key。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于常用nosql数据库介绍及redis安装配置的介绍，点击&lt;a href=&quot;https://rosinelan.coding.me/2018/05/17/python%E8%AE%BF%E9%97%AEredis/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python访问redis&lt;/a&gt;查看。&lt;br&gt;前面介绍了&lt;code&gt;redis&lt;/code&gt;常用的数据类型，包括&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;和&lt;code&gt;Sorted Set&lt;/code&gt;。下面针对不同数据类型的操作进行介绍。&lt;/p&gt;
&lt;h3 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;set(name, value)&lt;br&gt;设置值，默认不存在则创建，存在则修改
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="redis" scheme="https://rosinelan.github.io/tags/redis/"/>
    
      <category term="get" scheme="https://rosinelan.github.io/tags/get/"/>
    
      <category term="set" scheme="https://rosinelan.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>python访问redis</title>
    <link href="https://rosinelan.github.io/2018/05/17/python%E8%AE%BF%E9%97%AEredis/"/>
    <id>https://rosinelan.github.io/2018/05/17/python访问redis/</id>
    <published>2018-05-17T00:05:59.000Z</published>
    <updated>2018-05-18T17:13:57.356Z</updated>
    
    <content type="html"><![CDATA[<p>首先看个案例<br>无论是电商网站还是支付系统，都离不开数据的存储和增删改查，在这种情况下，每一次登录、访问等都会访问，这样会给数据库造成很大的压力，当数据库无法支撑过高的访问量，轻则影响用户体验，重则导致数据库宕机，网站无法访问。<br>如何解决数据库压力过大的问题呢？  </p><ol><li>优化应用程序，减少数据库的连接数，尽量使用数据库连接池。<a id="more"></a></li><li>使用消息队列，常见的有RabbitMQ,ActiveMQ，Kafka,RocketMQ等。</li><li>通过使用redis等缓存数据，分担数据库读压力，同时直接从内存读数据速度更快。</li></ol><p>下面主要针对redis等nosql数据库进行介绍。  </p><h3 id="nosql介绍"><a href="#nosql介绍" class="headerlink" title="nosql介绍"></a>nosql介绍</h3><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>对于NoSQL并没有一个明确的范围和定义，但是他们都普遍存在下面一些共同特征：</p><ol><li>不需要预定义模式：不需要事先定义数据模式，预定义表结构。数据中的每条记录都可能有不同的属性和格式。当插入数据时，并不需要预先定义它们的模式。</li><li>无共享架构：相对于将所有数据存储的存储区域网络中的全共享架构。NoSQL往往将数据划分后存储在各个本地服务器上。因为从本地磁盘读取数据的性能往往好于通过网络传输读取数据的性能，从而提高了系统的性能。</li><li>弹性可扩展：可以在系统运行的时候，动态增加或者删除结点。不需要停机维护，数据可以自动迁移。</li><li>分区：相对于将数据存放于同一个节点，NoSQL数据库需要将数据进行分区，将记录分散在多个节点上面。并且通常分区的同时还要做复制。这样既提高了并行性能，又能保证没有单点失效的问题。</li><li>异步复制：和RAID存储系统不同的是，NoSQL中的复制，往往是基于日志的异步复制。这样，数据就可以尽快地写入一个节点，而不会被网络传输引起迟延。缺点是并不总是能保证一致性，这样的方式在出现故障的时候，可能会丢失少量的数据。</li><li>BASE：相对于事务严格的ACID特性，NoSQL数据库保证的是BASE特性。BASE是最终一致性和软事务。<br>NoSQL数据库并没有一个统一的架构，两种NoSQL数据库之间的不同，甚至远远超过两种关系型数据库的不同。可以说，NoSQL各有所长，成功的NoSQL必然特别适用于某些场合或者某些应用，在这些场合中会远远胜过关系型数据库和其他的NoSQL<h4 id="常用的nosql数据库"><a href="#常用的nosql数据库" class="headerlink" title="常用的nosql数据库"></a>常用的nosql数据库</h4>临时性键值存储|永久性键值存储|面向文档的数据库|面向列的数据库<br>-|:-:|:-:|:-:|<br>Memcached|Tokyo Tyrant|MangoDB|Cassandra<br>Redis|Flare|CouchDB|HBase<br>&nbsp;|ROMA||HyperTable<br>&nbsp;|Redis||<h3 id="redis安装和配置"><a href="#redis安装和配置" class="headerlink" title="redis安装和配置"></a>redis安装和配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4>redis主要用于linux下，下面centos7下面安装最新版本redis-4.0.9。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span><br><span class="line">tar xzf redis-4.0.9.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-4.0.9/</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> src &amp;&amp; make all</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>redis可以单机多实例，通过修改配置文件，不同实例使用不同的配置文件和端口号即可。<br>下面配置文件统一存放在<code>conf</code>目录中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/   </span><br><span class="line">mv redis-4.0.9 redis    <span class="comment">#目录重命名，取消版本信息</span></span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">mkdir conf     <span class="comment">#新建配置文件目录，统一存放配置文件</span></span><br><span class="line">cp redis.conf conf/redis_6379.conf    <span class="comment">#配置文件，以端口号命名</span></span><br></pre></td></tr></table></figure></p><p>修改<code>redis_6379.conf</code>文件，默认该配置项为no，修改为yes。<br>该参数表示是否使用守护线程的方式启动。<br>当设置为<code>yes</code>时，表示开启守护进程模式。该模式下，redis在后台运行，并将进程pid写入至配置文件中设置的pidfile中，此时redis将一直运行，除非手动kill该进程。<br>当设置为<code>no</code>时，当前界面将进入redis的命令行界面，ctrl+c强制退出或者关闭连接工具都会导致redis进程退出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></p><p><strong>启动</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/src/redis/conf/redis_6379.conf</span><br></pre></td></tr></table></figure></p><p><strong>确认是否启动</strong><br>通过进程确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos conf]# ps aux|grep redis</span><br><span class="line">root     25841  0.0  0.1 141772  1976 ?        Ssl  23:26   0:00 redis-server 127.0.0.1:6379</span><br><span class="line">root     25856  0.0  0.0 112644   964 pts/1    R+   23:26   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure></p><p>通过端口号确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_4_centos conf]# netstat -lntp |grep 6379</span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      25841/redis-server</span><br></pre></td></tr></table></figure></p><h4 id="错误信息说明"><a href="#错误信息说明" class="headerlink" title="错误信息说明"></a>错误信息说明</h4><ul><li>未安装gcc编译工具<br>redis基于C语言编写，需要使用gcc等编译工具，若未安装，在<code>make</code>编译过程中会报错。使用<code>yum install gcc</code>安装，默认会安装gcc及对应的依赖包即可。</li><li>未安装<code>jemalloc</code><br>默认情况下redis的<code>memory allocator</code>是<code>jemalloc</code>，若未安装会出现下面报错信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zmalloc.h:50:31: fatal error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line"> <span class="comment">#include &lt;jemalloc/jemalloc.h&gt;</span></span><br><span class="line">                               ^</span><br><span class="line">compilation terminated.</span><br><span class="line">make[1]: *** [adlist.o] Error 1</span><br><span class="line">make[1]: Leaving directory `/usr/<span class="built_in">local</span>/src/redis-4.0.9/src<span class="string">'</span></span><br><span class="line"><span class="string">make: *** [all] Error 2</span></span><br></pre></td></tr></table></figure></li></ul><p>可以设置使用<code>libc malloc</code>，编译的时候使用<code>make MALLOC=libc</code>即可。<br>具体更多内容可以参见redis解压目录下的<code>redis.MD</code>文件中<code>Allocator</code>部分。</p><ul><li>异机连接端口不通<br>在redis配置文件中，默认情况下<code>bing 127.0.0.1</code>，也就是仅允许本机连接。当通过其他机器连接的时候会出现无法连接的情况。<br>修改redis配置文件，将<code>bing 127.0.0.1</code>修改为<code>bind 0.0.0.0</code>，然后重启<code>redis-server</code>服务。<h3 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h3>redis支持5种数据类型，分别是String(字符串)、List(列表)、Hash(字典)、Set(集合)、Sorted Set(有序集合)。<br>本质上来说，redis存储的是key-value对，其中key是字符串，对应的value类型决定了redis的数据类型。</li><li><p>String(字符串)<br>string是redis最基本的类型，其基本模型也是一个key对应一个value。<br>string类型是二进制安全的。也就是说redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET name <span class="string">"xiaohh"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line"><span class="string">"xiaohh"</span></span><br></pre></td></tr></table></figure></li><li><p>List(列表)<br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush xiaohh redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush xiaohh mongodb</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush xiaohh rabitmq</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange xiaohh 0 2</span><br><span class="line">1) <span class="string">"rabitmq"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"redis"</span></span><br></pre></td></tr></table></figure></li><li><p>Hash(字典)<br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET myhash fileld1 <span class="string">"Hello"</span> fileld2 <span class="string">"World"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash fileld1</span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line">127.0.0.1:6379&gt; HGET myhash fileld2</span><br><span class="line"><span class="string">"World"</span></span><br></pre></td></tr></table></figure></li><li><p>Set(集合)<br>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">27.0.0.1:6379&gt; sadd <span class="built_in">type</span> redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">type</span> mongodb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">type</span> rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">type</span> rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">type</span></span><br><span class="line">1) <span class="string">"rabbitmq"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"redis"</span></span><br></pre></td></tr></table></figure></li></ul><p>由于Set中元素具有唯一性的，所以重复添加的<code>rabbitmq</code>只有一个，第二次添加将被忽略。</p><ul><li>Sorted Set(有序集合)<br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd  type1 0 redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd type1 3 mongodb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd type1 2 rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd type1 2 rabbitmq</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE type1 0 10</span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"rabbitmq"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="python访问redis"><a href="#python访问redis" class="headerlink" title="python访问redis"></a>python访问redis</h3><p>python访问redis需要安装对应的<code>redis</code>包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure></p><p>redis连接池<br>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。<br>默认，每个Redis实例都会维护一个自己的连接。可以直接建立一个连接池，然后作为Redis参数，这样就可以实现多个Redis实例共享一个连接池。<br>连接redis服务器<br>连接redis服务器需要提供redis服务器的地址和端口号，默认端口号为6379。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">"118.24.18.158"</span>, port=<span class="string">"6379"</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.set(<span class="string">"name"</span>, <span class="string">"xiaohh"</span>)</span><br><span class="line">print(r.get(<span class="string">"name"</span>))    <span class="comment">#输出结果："xiaohh"</span></span><br></pre></td></tr></table></figure></p><p>通过python对redis数据库进行操作，首先建立redis的连接，然后对不同的数据类型采用不同的方法进行操作。<br>具体操作方法点击<a href="https://rosinelan.coding.me/2018/05/18/python%E8%AE%BF%E9%97%AEredis-%E4%BA%8C/" target="_blank" rel="noopener">python访问redis</a>查看。<br>更多redis相关内容可以点击查看<a href="https://redis.io/documentation" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先看个案例&lt;br&gt;无论是电商网站还是支付系统，都离不开数据的存储和增删改查，在这种情况下，每一次登录、访问等都会访问，这样会给数据库造成很大的压力，当数据库无法支撑过高的访问量，轻则影响用户体验，重则导致数据库宕机，网站无法访问。&lt;br&gt;如何解决数据库压力过大的问题呢？  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优化应用程序，减少数据库的连接数，尽量使用数据库连接池。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="nosql" scheme="https://rosinelan.github.io/tags/nosql/"/>
    
      <category term="redis" scheme="https://rosinelan.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>python中使用SQLAlchemy(二)</title>
    <link href="https://rosinelan.github.io/2018/05/14/python%E4%B8%AD%E4%BD%BF%E7%94%A8SQLAlchemy-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/05/14/python中使用SQLAlchemy-二/</id>
    <published>2018-05-14T07:30:26.000Z</published>
    <updated>2018-05-14T09:21:05.187Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>SQLAlchemy</code>使用建表、插入和查询内容，点击<a href="https://rosinelan.coding.me/2018/05/11/python%E4%B8%AD%E4%BD%BF%E7%94%A8SQLAlchemy/" target="_blank" rel="noopener">python中使用SQLAlchemy</a>查看。<br>继续以前面建立的<code>student</code>表作为示例进行后面的操作。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name    | varchar(100) | YES  |     | NULL    |                |</span><br><span class="line">| age     | int(11)      | YES  |     | NULL    |                |</span><br><span class="line">| address | varchar(100) | YES  |     | NULL    |                |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">4 rows in set (0.15 sec)</span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| id   | name  | age  | address |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| 1001 | Alice |   25 | anhui   |</span><br><span class="line">| 1002 | Bob   |   69 | beijing |</span><br><span class="line">| 1003 | Cerry |   14 | jiangsu |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">3 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>更新时，首先查询需要更新的数据，然后直接更新对应字段即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">student1 = session.query(Student).filter(Student.name == <span class="string">'Alice'</span>).one()</span><br><span class="line">print(<span class="string">"更新前age：&#123;0&#125;"</span>.format(student1.age))</span><br><span class="line">student1.age = <span class="string">'38'</span></span><br><span class="line">session.commit()</span><br><span class="line">print(<span class="string">"更新后age：&#123;0&#125;"</span>.format(student1.age))</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更新前age：<span class="number">25</span></span><br><span class="line">更新后age：<span class="number">38</span></span><br></pre></td></tr></table></figure></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除时，首先查询出需要删除的数据，然后直接调用<code>delete()</code>方法直接删除即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student2 = session.query(Student).filter(Student.name == <span class="string">'Alice'</span>).delete()</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p>数据库结果确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| id   | name  | age  | address |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| 1002 | Bob   |   69 | beijing |</span><br><span class="line">| 1003 | Cerry |   14 | jiangsu |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>在进行分组及排序操作前，先插入几条数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">student1 = Student(id=<span class="number">1001</span>, name=<span class="string">'Alice'</span>, age=<span class="number">22</span>, address=<span class="string">'beijing'</span>)</span><br><span class="line">student2 = Student(id=<span class="number">1004</span>, name=<span class="string">'Dany'</span>, age=<span class="number">14</span>, address=<span class="string">'beijing'</span>)</span><br><span class="line">student3 = Student(id=<span class="number">1005</span>, name=<span class="string">'Ever'</span>, age=<span class="number">97</span>, address=<span class="string">'beijing'</span>)</span><br><span class="line">student4 = Student(id=<span class="number">1006</span>, name=<span class="string">'For'</span>, age=<span class="number">50</span>, address=<span class="string">'beijing'</span>)</span><br><span class="line">session.add_all([student1, student2, student3, student4])</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p>数据库结果确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from student;</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| id   | name  | age  | address |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">| 1001 | Alice |   22 | beijing |</span><br><span class="line">| 1002 | Bob   |   69 | beijing |</span><br><span class="line">| 1003 | Cerry |   14 | jiangsu |</span><br><span class="line">| 1004 | Dany  |   14 | beijing |</span><br><span class="line">| 1005 | Ever  |   97 | beijing |</span><br><span class="line">| 1006 | For   |   50 | beijing |</span><br><span class="line">+------+-------+------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>统计方法为<code>count()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count_student = session.query(Student).filter(Student.name.like(<span class="string">'%e%'</span>)).count()</span><br><span class="line">print(<span class="string">"姓名中带字母e的人&#123;0&#125;个"</span>.format(count_student))</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名中带字母e的人<span class="number">3</span>个</span><br></pre></td></tr></table></figure></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组方法为<code>group_by()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">group_student = session.query(Student).group_by(Student.address).all()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> group_student:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span> Alice <span class="number">22</span> beijing</span><br><span class="line"><span class="number">1003</span> Cerry <span class="number">14</span> jiangsu</span><br></pre></td></tr></table></figure></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序方法为<code>order_by()</code>，默认为升序，反序在order_by里面使用<code>desc()</code>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">order_student = session.query(Student).filter(Student.age &gt; <span class="number">30</span>).order_by(Student.age).all()</span><br><span class="line">print(<span class="string">"默认排序输出"</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> order_student:</span><br><span class="line">    print(x.id, x.name, x.age, x.address)</span><br><span class="line"></span><br><span class="line">orderdesc_student = session.query(Student).filter(Student.age &gt; <span class="number">30</span>).order_by(Student.age.desc()).all()</span><br><span class="line">print(<span class="string">"反序输出"</span>)</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> orderdesc_student:</span><br><span class="line">    print(y.id, y.name, y.age, y.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">默认排序输出</span><br><span class="line"><span class="number">1006</span> For <span class="number">50</span> beijing</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1005</span> Ever <span class="number">97</span> beijing</span><br><span class="line">反序输出</span><br><span class="line"><span class="number">1005</span> Ever <span class="number">97</span> beijing</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1006</span> For <span class="number">50</span> beijing</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li><p>创建引擎engine</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br></pre></td></tr></table></figure></li><li><p>定义模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span>    <span class="comment">#Student类继承自Base类，</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span>    <span class="comment">#对应数据库表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)    <span class="comment">#对应数据库各字段</span></span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br></pre></td></tr></table></figure></li></ol><p>接下来基于前面创建的<code>session</code>和<code>Student</code>类及属性进行增删改查的操作。</p><h4 id="常见查询总结"><a href="#常见查询总结" class="headerlink" title="常见查询总结"></a>常见查询总结</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单查询</span></span><br><span class="line">print(session.query(Student).all())</span><br><span class="line">print(session.query(Student.id, Student.name).all())</span><br><span class="line">print(session.query(Student, Student.name).all())</span><br><span class="line"><span class="comment">#带条件查询</span></span><br><span class="line">print(session.query(Student).filter_by(name=<span class="string">'Bob'</span>).all())</span><br><span class="line">print(session.query(Student).filter(Student.name == <span class="string">'Bob'</span>).all())</span><br><span class="line">print(session.query(Student).filter(Student.name.like(<span class="string">'%e%'</span>)).all())</span><br><span class="line"><span class="comment">#多条件查询</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_</span><br><span class="line">print(session.query(Student).filter(and_(Student.age &gt; <span class="number">20</span>, Student.name.like(<span class="string">'%e%'</span>))).all())</span><br><span class="line">print(session.query(Student).filter(or_(Student.age &gt; <span class="number">20</span>, Student.name.like(<span class="string">'%e%'</span>))).all())</span><br><span class="line"><span class="comment">#sql过滤</span></span><br><span class="line">print(session.query(Student).filter(<span class="string">"id=:id"</span>).params(id=<span class="number">1001</span>).all())</span><br><span class="line"><span class="comment">#关联查询</span></span><br><span class="line">print(session.query(User, Address).filter(User.id == Address.user_id).all())</span><br><span class="line">print(session.query(User).join(User.addresses).all())</span><br><span class="line">print(session.query(User).outerjoin(User.addresses).all())</span><br><span class="line"><span class="comment">#聚合查询</span></span><br><span class="line">print(session.query(User.name, func.count(<span class="string">'*'</span>).label(<span class="string">"user_count"</span>)).group_by(User.name).all())</span><br><span class="line">print(session.query(User.name, func.sum(User.id).label(<span class="string">"user_id_sum"</span>)).group_by(User.name).all())</span><br><span class="line"><span class="comment">#子查询</span></span><br><span class="line"> stmt = session.query(Address.user_id, func.count(<span class="string">'*'</span>).label(<span class="string">"address_count"</span>)).group_by(Address.user_id).subquery()</span><br><span class="line">print(session.query(User, stmt.c.address_count).outerjoin((stmt, User.id == stmt.c.user_id)).order_by(User.id).all())</span><br><span class="line"><span class="comment">#exists</span></span><br><span class="line">print(session.query(User).filter(exists().where(Address.user_id == User.id)))</span><br><span class="line">print(session.query(User).filter(User.addresses.any()))</span><br></pre></td></tr></table></figure><p>限制返回字段查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person = session.query(Person.name, Person.created_at,                     </span><br><span class="line">             Person.updated_at).filter_by(name=<span class="string">"zhongwei"</span>).order_by(            </span><br><span class="line">             Person.created_at).first()</span><br></pre></td></tr></table></figure></p><p>记录总数查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">session.query(func.count(User.id))</span><br><span class="line"></span><br><span class="line">session.query(func.count(User.id)).\</span><br><span class="line">        group_by(User.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> distinct</span><br><span class="line"></span><br><span class="line">session.query(func.count(distinct(User.name)))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;SQLAlchemy&lt;/code&gt;使用建表、插入和查询内容，点击&lt;a href=&quot;https://rosinelan.coding.me/2018/05/11/python%E4%B8%AD%E4%BD%BF%E7%94%A8SQLAlchemy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python中使用SQLAlchemy&lt;/a&gt;查看。&lt;br&gt;继续以前面建立的&lt;code&gt;student&lt;/code&gt;表作为示例进行后面的操作。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="update" scheme="https://rosinelan.github.io/tags/update/"/>
    
      <category term="delete" scheme="https://rosinelan.github.io/tags/delete/"/>
    
      <category term="count" scheme="https://rosinelan.github.io/tags/count/"/>
    
      <category term="groupby" scheme="https://rosinelan.github.io/tags/groupby/"/>
    
      <category term="orderby" scheme="https://rosinelan.github.io/tags/orderby/"/>
    
      <category term="统计" scheme="https://rosinelan.github.io/tags/%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="分组" scheme="https://rosinelan.github.io/tags/%E5%88%86%E7%BB%84/"/>
    
      <category term="排序" scheme="https://rosinelan.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>python中使用SQLAlchemy</title>
    <link href="https://rosinelan.github.io/2018/05/11/python%E4%B8%AD%E4%BD%BF%E7%94%A8SQLAlchemy/"/>
    <id>https://rosinelan.github.io/2018/05/11/python中使用SQLAlchemy/</id>
    <published>2018-05-11T03:35:35.000Z</published>
    <updated>2018-05-13T12:40:16.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h3><ul><li>ORM<br><code>ORM</code>是Object-Relational Mapping的简写。今天学习的<code>SQLAlchemy</code>其实就是ORM框架中最有名的一个。<br><code>SQLAlchemy</code>框架工作<br>通过数据的API，使用关系对象映射进行数据库操作，也就是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。  <a id="more"></a><img src="http://cdn.rosinelan.com/blog/program/orm-sqlalchemy-core.jpg" alt="orm-sqlalchemy-core" title="orm-sqlalchemy-core"><br>SQLAlchemy本身无法操作数据库，其必须通过<code>pymysql</code>等第三方插件。上图中Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作。  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqldb</span></span><br><span class="line">mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"><span class="comment"># pymysql</span></span><br><span class="line">mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"><span class="comment"># mysql-connector</span></span><br><span class="line">mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"><span class="comment"># cx_oracle</span></span><br><span class="line"> oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br></pre></td></tr></table></figure></li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>ORM思想的核心是隐藏了数据访问细节，提供了通用的数据库交互。并且完全不用考虑SQL语句，从而快速开发。  </p><ul><li>使用SQL创建表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  age <span class="built_in">int</span>,</span><br><span class="line">  address <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>上述是一个简单的创建单表的语句。  </p><ul><li>使用SQLAlchemy<br>方法1<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer, MetaData</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">Base = declarative_base()    <span class="comment">#生成orm基类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span>    <span class="comment">#指定表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(engine)    <span class="comment">#创建表结构</span></span><br></pre></td></tr></table></figure></li></ul><p>方法2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, MetaData, Column, Integer, String, create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> mapper</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">metadata = MetaData()</span><br><span class="line"></span><br><span class="line">student = Table(<span class="string">'student'</span>, metadata,</span><br><span class="line">             Column(<span class="string">'id'</span>, Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">             Column(<span class="string">'name'</span>, String(<span class="number">100</span>)),</span><br><span class="line">             Column(<span class="string">'age'</span>, Integer),</span><br><span class="line">             Column(<span class="string">'address'</span>, String(<span class="number">100</span>))</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, address)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.address = address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mapper(Student, student)    <span class="comment">#此处有问题，待解决</span></span><br></pre></td></tr></table></figure></p><p>说明<br><code>echo=True</code> 显示每条执行的SQL语句，可以关闭。<br><code>create_engine()</code>返回一个Engine的实例，并且表示通过数据库语法处理细节的核心接口，这种情况下数据库语法将被解释成python的类方法。<br>上面简单示例对比了下使用SQL直接创建表和使用ORM框架建表的区别，下面开始介绍<code>SQLAlchemy</code>的使用。  </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>通过<code>pip install SQLAlchemy</code>安装，访问mysql使用<code>pymysql</code>，安装方法<code>pip install pumysql</code>。可以参照<a href="https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/" target="_blank" rel="noopener">python访问mysql</a>。  </p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer, MetaData</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123456@localhost/test"</span>, encoding=<span class="string">'UTF-8'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine) <span class="comment">#创建与数据库的会话session class ,注意,这里返回给session的是个class,不是实例</span></span><br><span class="line">session = DBsession()    <span class="comment">#生成session实例</span></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    address = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student1 = Student(id=<span class="number">1001</span>, name=<span class="string">'Alice'</span>, age=<span class="number">25</span>, address=<span class="string">"anhui"</span>)</span><br><span class="line">student2 = Student(id=<span class="number">1002</span>, name=<span class="string">'Bob'</span>, age=<span class="number">69</span>, address=<span class="string">"beijing"</span>)</span><br><span class="line">student3 = Student(id=<span class="number">1003</span>, name=<span class="string">'Cerry'</span>, age=<span class="number">14</span>, address=<span class="string">"jiangsu"</span>)</span><br><span class="line"></span><br><span class="line">session.add_all([student1, student2, student3])</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查询是通过Session的<code>query()</code>方法创建一个查询对象，这个函数的参数可以是任何类或者类的描述的集合。<br>查询出来的数据是一个对象，直接通过对象的属性调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> db.orm2 <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:123456@localhost/test'</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line"></span><br><span class="line">a = session.query(Student)</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT student.id AS student_id, student.name AS student_name, student.age AS student_age, student.address AS student_address </span><br><span class="line">FROM student</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1003</span> Cerry <span class="number">14</span> jiangsu</span><br></pre></td></tr></table></figure></p><p><code>session.query(Student)</code>结果为查询的SQL语句，若出现查询结果错误可以通过查看SQL确认。  </p><ul><li>filter()和filter_by()<br>过滤条件。<code>==</code>、<code>!=</code>、<code>like</code>等过滤操作都可以在filter函数中使用。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> db.orm2 <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:123456@localhost/test'</span>)</span><br><span class="line">DBsession = sessionmaker(bind=engine)</span><br><span class="line">session = DBsession()</span><br><span class="line"></span><br><span class="line">a = session.query(Student).filter(Student.id == <span class="number">1001</span>)</span><br><span class="line">b = session.query(Student).filter_by(id=<span class="number">1001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x.id, x.name, x.age, x.address)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br></pre></td></tr></table></figure></p><p><code>filter()</code>和<code>filter_by()</code>区别<br>filter可以像写sql的where条件那样写&gt;、&lt;等条件，但引用列名时，需要通过<code>类名.属性名</code>的方式。<br>filter_by可以使用python的正常参数传递方法传递条件，指定列名时，不需要额外指定类名，参数名对应类中的属性名，不能使用&gt;、&lt;等条件。<br>当使用filter的时候条件之间是使用<code>==</code>，filter_by使用的是<code>=</code>。<br>filter不支持组合查询，只能连续调用filter变相实现。filter_by的参数是**kwargs，直接支持组合查询。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filters = &#123;<span class="string">'id'</span>:<span class="number">1002</span>, <span class="string">'name'</span>:<span class="string">'Bob'</span>&#125;</span><br><span class="line">b = session.query(Student).filter_by(**filters)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    print(i.id, i.name, i.age, i.address)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br></pre></td></tr></table></figure></p><ul><li>all()<br>返回一个列表，可以通过遍历列表获取每个对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id &gt; <span class="number">1001</span>).all()</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    print(x.id, x.name, x.age, x.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&lt;db.orm2.Student object at <span class="number">0x00000197ECC759E8</span>&gt;, &lt;db.orm2.Student object at <span class="number">0x00000197ECC75A58</span>&gt;]</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br><span class="line"><span class="number">1003</span> Cerry <span class="number">14</span> jiangsu</span><br></pre></td></tr></table></figure></p><ul><li>one()<br>返回且仅返回一个查询结果。当结果数量不足或者多于一个时会报错。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id == <span class="number">1001</span>).one()</span><br><span class="line">print(a)</span><br><span class="line">print(a.id, a.name, a.age, a.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;db.orm2.Student object at <span class="number">0x000001B7C57E7908</span>&gt;</span><br><span class="line"><span class="number">1001</span> Alice <span class="number">25</span> anhui</span><br></pre></td></tr></table></figure></p><ul><li>first()<br>返回至多一个结果，而且以单项形式，而不是只有一个元素的tuple形式返回。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(Student).filter(Student.id &gt; <span class="number">1001</span>).first()</span><br><span class="line">print(a)</span><br><span class="line">print(a.id, a.name, a.age, a.address)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;db.orm2.Student object at <span class="number">0x000001C63E536B00</span>&gt;</span><br><span class="line"><span class="number">1002</span> Bob <span class="number">69</span> beijing</span><br></pre></td></tr></table></figure></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>MetaData类<br>主要用于保存表结构，连接字符串等数据，是一个多表共享的对象。<br><code>metadata = MetaData(engine)</code>绑定一个数据源的metadata。<br><code>metadata.create_all(engine)</code> 创建表，该操作会先判断表是否存在，若存在则不创建。  </li><li>Table类<br>构造函数为<code>Table.__init__(self, name, metadata,*args, **kwargs)</code><br>name  表名<br>metadata 共享的元数据<br><em>args中<code>Column</code>是列定义<br>下面是可变参数`*</em>kwargs`定义<br>schema 此表的结构名称，默认None<br>autoload 自动从现有表中读入表结构，默认False<br>autoload_with 从其他engine读取结构，默认None<br>include_columns 如果autoload设置为True，则此项数组中的列明将被引用，没有写的列明将被忽略，None表示所有都列明都引用，默认None<br>mustexist 如果为True，表示这个表必须在其他的python应用中定义，必须是metadata的一部分，默认False<br>useexisting 如果为True，表示这个表必须被其他应用定义过，将忽略结构定义，默认False<br>owner 表所有者，用于Orcal，默认None<br>quote 设置为True，如果表明是SQL关键字，将强制转义，默认False<br>quote_schema  设置为True，如果列明是SQL关键字，将强制转义，默认False<br>mysql_engine  mysql专用，可以设置’InnoDB’或’MyISAM’</li><li>Column类<br>构造函数为<code>Column.__init__(self,  name,  type_,  *args,  **kwargs)</code><br>name 列名<br>type_ 类型，更多类型sqlalchemy.types<br>下面是<code>*args</code>参数定义<br>Constraint（约束）<br>ForeignKey（外键）<br>ColumnDefault（默认）<br>Sequenceobjects（序列）定义<br>key 列名的别名，默认None<br>下面是<code>**kwargs</code>参数定义<br>primary_key 如果为True，则是主键<br>nullable 是否可为Null，默认是True<br>default 默认值，默认是None<br>index 是否是索引，默认是True<br>unique 是否唯一键，默认是False<br>onupdate 指定一个更新时候的值，这个操作是定义在SQLAlchemy中，不是在数据库里的，当更新一条数据时设置，大部分用于updateTime这类字段<br>autoincrement 设置为整型自动增长，只有没有默认值，并且是Integer类型，默认是True<br>quote 如果列明是关键字，则强制转义，默认False</li><li>创建会话<br>Session的主要目的是建立与数据库的会话，它维护你加载和关联的所有数据库对象。它是数据库查询（Query）的一个入口。<br>在<code>SQLAlchemy</code>中，数据库的查询操作是通过Query对象来实现的,而Session提供了创建Query对象的接口。Query对象返回的结果是一组同一映射（Identity Map）对象组成的集合。事实上，集合中的一个对象，对应于数据库表中的一行（即一条记录）。所谓同一映射，是指每个对象有一个唯一的ID。如果两个对象（的引用）ID相同，则认为它们对应的是相同的对象。<br>要完成数据库查询，就需要建立与数据库的连接。这就需要用到Engine对象。一个Engine可能是关联一个Session对象，也可能关联一个数据库表。<br>当然Session最重要的功能还是实现原子操作。<br>ORM通过session与数据库建立连接进行通信，如下所示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line">session = DBSession()</span><br></pre></td></tr></table></figure></li></ol><p>通过sessionmake方法创建一个Session工厂，然后在调用工厂的方法来实例化一个Session对象。</p><p>要了解更多关于<code>SQLAlchemy</code>内容可以点击<a href="http://docs.sqlalchemy.org/en/latest/dialects/index.html" target="_blank" rel="noopener">SQLAlchemy Documentation</a>查看官方介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念简介&quot;&gt;&lt;a href=&quot;#概念简介&quot; class=&quot;headerlink&quot; title=&quot;概念简介&quot;&gt;&lt;/a&gt;概念简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ORM&lt;br&gt;&lt;code&gt;ORM&lt;/code&gt;是Object-Relational Mapping的简写。今天学习的&lt;code&gt;SQLAlchemy&lt;/code&gt;其实就是ORM框架中最有名的一个。&lt;br&gt;&lt;code&gt;SQLAlchemy&lt;/code&gt;框架工作&lt;br&gt;通过数据的API，使用关系对象映射进行数据库操作，也就是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="ORM" scheme="https://rosinelan.github.io/tags/ORM/"/>
    
      <category term="SQLAIchemy" scheme="https://rosinelan.github.io/tags/SQLAIchemy/"/>
    
  </entry>
  
  <entry>
    <title>python访问mysql(二)</title>
    <link href="https://rosinelan.github.io/2018/05/09/python%E8%AE%BF%E9%97%AEmysql-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/05/09/python访问mysql-二/</id>
    <published>2018-05-09T12:46:13.000Z</published>
    <updated>2018-05-10T00:29:26.772Z</updated>
    
    <content type="html"><![CDATA[<p>关于mysql中的事务、python访问mysql简单步骤、mysql常见操作等内容点击<a href="https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/" target="_blank" rel="noopener">python访问mysql</a>查看。<br>在前面介绍<code>python访问mysql</code>的一个典型执行过程中出现了<code>cursor()</code>方法，它就是游标。我们执行sql命令或者得到执行结果都需要使用游标。  </p><h3 id="curosr"><a href="#curosr" class="headerlink" title="curosr()"></a>curosr()</h3><p><code>cursor</code>游标是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。可以将游标当做一个指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理。<br><a id="more"></a><br>建立数据库连接之后，使用<code>cursor</code>提供的方法执行命令或者返回结果。  </p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><ul><li>execute(self, query, args=None)<br>执行一个数据库sql命令。  </li><li>executemany(self, query, args)<br>执行多个数据库sql命令。  </li><li>callproc(self, procname, args=())<br>执行存储过程。  </li></ul><p>上述方法返回结果为受影响的行数。</p><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><ul><li>fetchall(self)<br>接受全部的返回结果行。</li><li>fetchmany(self, size=None)<br>接受<code>size</code>条返回结果行。如果size值大于结果行的数量则返回cursor.arraysize条数据。</li><li>fetchone(self)<br>返回结果行的下一行。  </li></ul><p>上述方法返回结果为元组<code>tuple</code>。<br>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db_config=&#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'mysql'</span></span><br><span class="line">    &#125;</span><br><span class="line">    conn = pymysql.connect(**db_config)</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line">cnm = conn_mysql()</span><br><span class="line">cus = cnm.cursor()</span><br><span class="line">sql = <span class="string">'select host,user from user'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cus.execute(sql)</span><br><span class="line">    print(cus.fetchmany(size=<span class="number">1</span>))    <span class="comment">#输出结果：(('localhost', 'mysql.session'),)</span></span><br><span class="line">    print(cus.fetchall())    <span class="comment">#输出结果：(('localhost', 'mysql.sys'), ('localhost', 'root'))</span></span><br><span class="line">    print(cus.fetchone())    <span class="comment">#输出结果：None</span></span><br><span class="line">    cus.close()    <span class="comment">#关闭游标对象</span></span><br><span class="line">    cnm.commit()    <span class="comment">#正确则提交</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    cnm.rollback()    <span class="comment">#错误则回滚</span></span><br><span class="line">    print(<span class="string">"错误"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cnm.close()    <span class="comment">#数据库连接需要关闭</span></span><br></pre></td></tr></table></figure></p><p>说明：<br>执行该sql最后结果为3条，<code>fetchall()</code>、<code>fetchmany()</code>和<code>fetchone()</code>出现位置不同，则结果不同。<br>fetchmany(size=1) 取出结果集中的第一条。此时游标处于第二行开始位置。<br>fetchall() 取出结果集中的全部，也就是游标当前位置至结束，此时游标处于结果集末尾。<br>fetchone() 取出结果集中的下一条，此时游标处于末尾，返回None。<br><strong>executemany说明</strong><br>executemany()主要是针对一条sql需要执行多次，每次执行的参数不同情况。数据量较多时建议使用executemany()方法，速度较快。<br>下面是executemany()简单示例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'test'</span>)</span><br><span class="line">cus = conn.cursor()</span><br><span class="line">sql = <span class="string">'insert into test(id, name) values(%s, %s)'</span></span><br><span class="line">args = [(<span class="number">1</span>, <span class="string">'Alice'</span>), (<span class="number">2</span>, <span class="string">'Bob'</span>), (<span class="number">3</span>, <span class="string">'Cellary'</span>)]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(cus.executemany(sql, args))    <span class="comment">#输出结果：3</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"执行出错：&#123;0&#125;"</span>.format(e))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cus.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>python编程中使用pymysql进行数据库的连接及诸如查询/插入/更新等操作，但是每次连接mysql数据库请求时都是独立的额请求，比较浪费资源，而且访问数量达到一定数量时，对mysql性能会产生较大的影响。因此在实际使用过程中通常会使用数据库的连接池技术来访问数据库，从而实现资源复用。同时也可以保证数据库不会因为连接数过多而造成数据库宕机。<br>在python中<code>DBUtils</code>是一套数据库连接池包，提供2种接口。  </p><ul><li>PersistentDB ：提供线程专用的数据库连接，并自动管理连接。</li><li>PooledDB ：提供线程间可共享的数据库连接，并自动管理连接。</li></ul><p>下面使用PooledDB示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">db_config = &#123;</span><br><span class="line">        <span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"user"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"passwd"</span>: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="string">"db"</span>: <span class="string">"test"</span>,</span><br><span class="line">        <span class="comment"># "charset": "utf8"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">spool = PooledDB(pymysql, <span class="number">5</span>, **db_config)  <span class="comment"># 5为连接池里的最少连接数</span></span><br><span class="line">conn = spool.connection()  <span class="comment"># 以后每次需要数据库连接就是用connection（）函数获取连接</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line">SQL = <span class="string">"select * from test;"</span></span><br><span class="line">r = cur.execute(SQL)</span><br><span class="line">r = cur.fetchall()</span><br><span class="line">print(r)</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>常见的mysql操作温习<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看所有的库  <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">切换数据库  <span class="keyword">use</span> <span class="keyword">test</span></span><br><span class="line">查看库中所有的表  <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">查看数据库连接数  <span class="keyword">show</span> <span class="keyword">processlist</span></span><br><span class="line">授权超级用户  <span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'user'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line">查询建表语句 <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student\G</span><br><span class="line">查询表结构 <span class="keyword">desc</span> student;</span><br><span class="line">查看index  <span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><p><code>\G</code>可以使结果显示更容易查看。<br>数据库操作其实就是SQL语句，介绍常用的<code>增删改查</code>语句。  </p><ul><li>建表create<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    StdID <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    StdName <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    Gender enum(<span class="string">'M'</span>,<span class="string">'F'</span>),</span><br><span class="line">    Age <span class="built_in">int</span>,</span><br><span class="line">    Score <span class="built_in">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>mysql中常用数据类型为<code>int</code>(整型)和<code>varchar</code>(字符型)，当字段取值为固定值时，可以采用枚举类型<code>enum</code>。<br>char和varchar区别在于存储数据时，当数据大小小于声明的大小时，<code>varchar</code>按照实际数据大小存放，<code>char</code>则会添加空格至声明的数据大小。<br>varchar(5)存储123，实际存储为<code>123</code>。<br>char(5)存储123，实际存储为<code>123</code>(后面带2空格)。</p><ul><li>插入insert<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Gender,Age,Score)<span class="keyword">values</span>(<span class="number">01</span>,<span class="string">'xiaohh'</span>,<span class="string">'M'</span>,<span class="number">18</span>,<span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Score,Age)<span class="keyword">values</span>(<span class="number">02</span>,<span class="string">'Bob'</span>,<span class="number">59</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(StdID,StdName,Score)<span class="keyword">values</span>(<span class="number">03</span>,<span class="string">'Alice'</span>,<span class="number">68</span>),(<span class="number">04</span>,<span class="string">'Lisa'</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure></li></ul><p>最后一条语句为插入多行的写法。</p><ul><li><p>更新update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> Score=<span class="number">100</span> <span class="keyword">where</span> StdID=<span class="number">01</span> <span class="keyword">and</span> Score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> StdID,Score <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> Score &gt; <span class="number">59</span> <span class="keyword">and</span> Gender=<span class="string">'M'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> Score &lt; <span class="number">60</span>;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure></li></ul><p><code>truncate</code>：清空表中的数据，和不带where条件的delete作用一样。<br><code>drop</code>：删除表结构。</p><ul><li><p>创建索引index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_std_stID <span class="keyword">on</span> student(StdID);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">index</span> idx_std_stScore(StdID,Score);</span><br></pre></td></tr></table></figure></li><li><p>删除索引index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">index</span> idx_std_stScore;</span><br></pre></td></tr></table></figure></li></ul><p>通过常见索引可以加快语句查询的速度，类似于字典中的目录。<br>那么我们如何确定语句是否使用索引呢？使用explain+sql语句即可。<br><code>explain select StdID from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_StdID.png" alt="mysql_explain_StdID" title="mysql_explain_StdID"><br><code>explain select Score from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_Score.png" alt="mysql_explain_Score" title="mysql_explain_Score"><br><code>explain select Age from student;</code><br><img src="http://cdn.rosinelan.com/blog/program/mysql_explain_Age.png" alt="mysql_explain_Age" title="mysql_explain_Age"><br>从字段<code>key</code>中可以看到索引名称，若为null则表示未使用索引。<br><strong>备注</strong><br>对于sql语句及index索引只是介绍基本的语法规则，更多内容以后继续学习。<br>查询中可能涉及到多表的<code>join</code>，可能会用到分组<code>group by</code>，也可能会使用到更多的<code>count()</code>、<code>order by</code>等函数。<br>索引可能会涉及到唯一索引<code>UNIQUE INDEX</code>、全文索引<code>FULLTEXT INDEX</code>等内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于mysql中的事务、python访问mysql简单步骤、mysql常见操作等内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python访问mysql&lt;/a&gt;查看。&lt;br&gt;在前面介绍&lt;code&gt;python访问mysql&lt;/code&gt;的一个典型执行过程中出现了&lt;code&gt;cursor()&lt;/code&gt;方法，它就是游标。我们执行sql命令或者得到执行结果都需要使用游标。  &lt;/p&gt;
&lt;h3 id=&quot;curosr&quot;&gt;&lt;a href=&quot;#curosr&quot; class=&quot;headerlink&quot; title=&quot;curosr()&quot;&gt;&lt;/a&gt;curosr()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cursor&lt;/code&gt;游标是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。可以将游标当做一个指针，它可以指定结果中的任何位置，然后允许用户对指定位置的数据进行处理。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="update" scheme="https://rosinelan.github.io/tags/update/"/>
    
      <category term="delete" scheme="https://rosinelan.github.io/tags/delete/"/>
    
      <category term="游标" scheme="https://rosinelan.github.io/tags/%E6%B8%B8%E6%A0%87/"/>
    
      <category term="cursor" scheme="https://rosinelan.github.io/tags/cursor/"/>
    
      <category term="insert" scheme="https://rosinelan.github.io/tags/insert/"/>
    
      <category term="select" scheme="https://rosinelan.github.io/tags/select/"/>
    
      <category term="drop" scheme="https://rosinelan.github.io/tags/drop/"/>
    
  </entry>
  
  <entry>
    <title>python访问mysql</title>
    <link href="https://rosinelan.github.io/2018/05/06/python%E8%AE%BF%E9%97%AEmysql/"/>
    <id>https://rosinelan.github.io/2018/05/06/python访问mysql/</id>
    <published>2018-05-06T14:26:38.000Z</published>
    <updated>2018-05-09T12:59:36.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>python中的<code>DB-API</code>为大多数数据库实现了接口，使用它连接数据库，就可以使用相同的方式操作各数据库。<br>使用<code>DB-API</code>基本流程<br><a id="more"></a></p><ol><li>引入<code>API</code>模块。  </li><li>获取数据库连接参数，打开数据库连接。  </li><li>执行SQL语句和存储过程。  </li><li>关闭数据库连接。  </li></ol><p>使用<code>pymysql</code>(同时支持python2和3)作为连接mysql数据库的接口。直接使用<code>pip install pymysql</code>安装即可。<br>注意：<code>pip</code>安装之后使用pycharm<code>import pymysql</code>可能出现无法使用的情况，此时可直接在pycharm中安装<code>pymysql</code>包。通过File–&gt;Settings–&gt;Project:XXX–&gt;Project Interpreter可以看到所有已安装的包，点击右边绿色<code>+</code>即可添加。<br>python2.X中还可以使用<code>MySQLdb</code>(仅支持python2)，点击<a href="https://pypi.org/project/MySQL-python/1.2.5/#files" target="_blank" rel="noopener">mysqldb</a>可下载安装。  </p><h3 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h3><h4 id="mysql中的事务"><a href="#mysql中的事务" class="headerlink" title="mysql中的事务"></a>mysql中的事务</h4><p>事务是必须满足4个条件（ACID）： Atomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）。  </p><ul><li>原子性：一组事务，要么成功；要么撤回。</li><li>稳定性：有非法数据（外键约束之类），事务撤回。</li><li>隔离性：事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。</li><li>可靠性：软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候吧事务保存到日志里<br>mysql中<code>autocommit</code>参数默认为开启，若需要多条sql语句同时提交，可以通过<code>start transaction</code>开启事务，通过<code>rollback</code>回滚事务，通过<code>commit</code>提交事务。<br>查询<code>autocommit</code>参数状态：<code>show variables like autocommit</code>。<h4 id="mysql常用操作"><a href="#mysql常用操作" class="headerlink" title="mysql常用操作"></a>mysql常用操作</h4></li><li>mysql安装<br>当前mysql最新版本为<code>8.0</code>,常用版本为<code>5.6</code>和<code>5.7</code>，可以根据自己需要选择合适版本。<br>点击<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载</a>跳转下载。  </li><li><p>常用操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">授权超级用户 <span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'user'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;  </span><br><span class="line">创建普通用户并授权 <span class="keyword">grant</span> all <span class="keyword">on</span> *.* <span class="keyword">to</span> db1.user1 <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;   </span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> db1.* <span class="keyword">to</span> <span class="string">'user2'</span>@<span class="string">'10.0.2.100'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'111222'</span>; </span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> db1.* <span class="keyword">to</span> <span class="string">'user3'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'231222'</span>;</span><br><span class="line">更改密码 <span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">"newpwd"</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'username'</span> ;</span><br><span class="line"></span><br><span class="line">查看库 <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">查看都有哪些库  <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">查看某个库的表 <span class="keyword">use</span> db; <span class="keyword">show</span> <span class="keyword">tables</span> \G; </span><br><span class="line">查看表的字段 desc tb;</span><br><span class="line">查看建表语句 <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb;</span><br><span class="line">当前是哪个用户 <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">当前库 <span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">创建库 <span class="keyword">create</span> <span class="keyword">database</span> db1; </span><br><span class="line">创建表 <span class="keyword">create</span> <span class="keyword">table</span> t1 (<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">40</span>) adress <span class="built_in">varchar</span>(<span class="number">30</span>));  </span><br><span class="line">查看数据库版本 <span class="keyword">select</span> <span class="keyword">version</span>(); </span><br><span class="line">查看mysql状态 <span class="keyword">show</span> <span class="keyword">status</span>;</span><br><span class="line">修改mysql参数 <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connect%'</span>; <span class="keyword">set</span> <span class="keyword">global</span> max_connect_errors = <span class="number">1000</span>; </span><br><span class="line">查看mysql队列 <span class="keyword">show</span> <span class="keyword">processlist</span>; </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">sleep的可以忽略，qurey查询的才有</span><br><span class="line"> </span><br><span class="line">查询 <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> mysql.user; <span class="keyword">select</span> * <span class="keyword">from</span> mysql.db; <span class="keyword">select</span> * <span class="keyword">from</span> mysql.db <span class="keyword">where</span> host <span class="keyword">like</span> <span class="string">'10.0.%'</span>; </span><br><span class="line">插入 <span class="keyword">update</span> db1.t1 <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'aaa'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;  </span><br><span class="line">清空表 <span class="keyword">truncate</span> <span class="keyword">table</span> db1.t1; </span><br><span class="line">删除表 <span class="keyword">drop</span> <span class="keyword">table</span> db1.t1; </span><br><span class="line">删除数据库 <span class="keyword">drop</span> <span class="keyword">database</span> db1; </span><br><span class="line">修复表 <span class="keyword">repair</span> <span class="keyword">table</span> tb1 [<span class="keyword">use</span> frm];</span><br><span class="line">查看权限<span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> root@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line">执行sql mysql -uroot -p1234556 -e "<span class="keyword">select</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'/home/mysql/1.txt'</span> <span class="keyword">from</span> mysql.user;"；</span><br></pre></td></tr></table></figure></li><li><p>数据库连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn=pymysql.connect(host=<span class="string">"192.168.48.128"</span>,user=<span class="string">"xiang"</span>,passwd=<span class="string">"123456"</span>,db=<span class="string">"python"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>参数说明<br>host：数据库主机名.默认是用本地主机。<br>user：数据库登陆名.默认是当前用户。<br>passwd：数据库登陆的秘密.默认为空。<br>db：要使用的数据库名.没有默认值。<br>port：MySQL服务使用的TCP端口.默认是3306，数字类型。</p><h3 id="python访问mysql"><a href="#python访问mysql" class="headerlink" title="python访问mysql"></a>python访问mysql</h3><p>一个典型的执行过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">"192.168.48.136"</span>, port=<span class="number">3306</span>, user=<span class="string">"xiang"</span>, passwd=<span class="string">"xiang"</span>, db=<span class="string">"test"</span>)    <span class="comment">#创建连接</span></span><br><span class="line">cus = conn.cursor()    <span class="comment">#连接对象的cursor方法</span></span><br><span class="line">sql = <span class="string">"select * from test2;"</span></span><br><span class="line">cus.execute(sql)    <span class="comment">#执行sql</span></span><br><span class="line">result = cus.fetchall()    <span class="comment">#游标对象的方法，获取所有返回结果</span></span><br><span class="line">print(result)</span><br><span class="line">cus.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><p>在实际编码过程中，推荐通过函数形式调用，方便重复使用和修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    db_config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'192.168.48.128'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'xiang'</span>,</span><br><span class="line">        <span class="string">'passwd'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="string">'python'</span>,</span><br><span class="line">        <span class="string">'charset'</span>: <span class="string">'utf8'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cnx = pymysql.connect(**db_config)</span><br><span class="line">    <span class="keyword">return</span> cnx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;python中的&lt;code&gt;DB-API&lt;/code&gt;为大多数数据库实现了接口，使用它连接数据库，就可以使用相同的方式操作各数据库。&lt;br&gt;使用&lt;code&gt;DB-API&lt;/code&gt;基本流程&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="mysql" scheme="https://rosinelan.github.io/tags/mysql/"/>
    
      <category term="pymysql" scheme="https://rosinelan.github.io/tags/pymysql/"/>
    
      <category term="事务" scheme="https://rosinelan.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>python正则表达式练习题</title>
    <link href="https://rosinelan.github.io/2018/05/04/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://rosinelan.github.io/2018/05/04/python正则表达式练习题/</id>
    <published>2018-05-04T06:43:36.000Z</published>
    <updated>2018-05-04T13:15:35.136Z</updated>
    
    <content type="html"><![CDATA[<p>针对前面<code>正则表达式</code>及<code>re</code>模块进行复习，然后题目实战。  </p><h3 id="正则常用语法"><a href="#正则常用语法" class="headerlink" title="正则常用语法"></a>正则常用语法</h3><p>熟悉最常用的正则语法。  </p><ul><li>单字符匹配<br><code>.</code> 匹配除换行符之外的任意一个字符。<br><code>[...]</code> 表示匹配一个字符集集合，如<code>[A-Za-z0-9]</code>表示匹配所有字母和数字。  <a id="more"></a><code>[^...]</code> 表示匹配除该字符集集合指定字符外的任意字符。如<code>[^0-9]</code>表示匹配除数字之外的所有字符。<br><code>\</code> 转义字符，用来改变特殊字符的原有含义(使其表示本身)。  </li><li>预定义字符集<br><code>\d</code> 表示数字<br><code>\D</code> 表示非数字<br><code>\s</code> 表示空白字符<br><code>\S</code> 表示非空白字符<br><code>\w</code> 表示字母和数字<br><code>\W</code> 表示非字母和数字</li><li>字符次数匹配<br><code>*</code> 匹配前一个字符0或者无限次<br><code>+</code> 匹配前一个字符1或者无限次<br><code>?</code> 匹配前一个字符0或者1次</li><li>边界匹配<br><code>^</code> 匹配字符串开头<br><code>$</code> 匹配字符串结尾  </li><li>分组<br><code>(...)</code> 分组<br><code>(?P&lt;NAME&gt;)</code> 分组，并且指定该分组的名称为NAME。<br><code>(?P=NAME)</code> 引用名称为NAME的分组所匹配到的字符串，配合上一个使用。  <h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3>从地址<code>http://qwd.jd.com/fcgi-bin/qwd_searchitem_ex?skuid=26878432382%7C1658610413%7C26222795271%7C25168000024%7C11731514723%7C26348513019%7C20000220615%7C4813030%7C25965247088%7C5327182%7C19588651151%7C1780924%7C15495544751%7C10114188069%7C27036535156%7C10123099847%7C26016197600%7C10503200866%7C16675691362%7C15904713681</code>得到的json字符串，使用正则匹配，查找出商品对应的<code>skuid</code>(商品唯一编码)和<code>skuimgurl</code>(商品图片)。</li><li>题目分析</li></ul><ol><li>首先使用简单的爬虫功能得到需要匹配的数据；</li><li>根据json字符串的规律编写对应的正则表达式</li><li>输出</li></ol><ul><li>代码实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://qwd.jd.com/fcgi-bin/qwd_searchitem_ex?skuid=26878432382%7C1658610413%7C26222795271%7C25168000024%7C11731514723%7C26348513019%7C20000220615%7C4813030%7C25965247088%7C5327182%7C19588651151%7C1780924%7C15495544751%7C10114188069%7C27036535156%7C10123099847%7C26016197600%7C10503200866%7C16675691362%7C15904713681"</span></span><br><span class="line">session = requests.session()</span><br><span class="line">r = session.get(url)    <span class="comment">#简单爬虫使用示意，后面会讲到</span></span><br><span class="line">html = r.text</span><br><span class="line"></span><br><span class="line">reg = re.compile(<span class="string">r"\s*\"skuid\":\"(\d+)\",\s*\S*\s*\S*\s*\"skuimgurl\":\"(\S*.jpg)\""</span>)    <span class="comment">#正则表达式</span></span><br><span class="line">result = reg.findall(html)</span><br><span class="line">print(result)    <span class="comment">#使用()分组，输出结果为2个分组的数据</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'26878432382'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18226/169/1318243724/390477/5b0718ff/5ac44edcNa350dbd9.jpg'</span>), (<span class="string">'5327182'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17461/138/1837663326/68820/5f8da5cd/5ad9b1e2N42bce837.jpg'</span>), (<span class="string">'11731514723'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19231/337/2147939016/196162/4210a6ae/5aea6250N0235cd05.jpg'</span>), (<span class="string">'19588651151'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t11341/60/1553062810/120774/ab9534ff/5a02c3f4Naebe34b7.jpg'</span>), (<span class="string">'15495544751'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18088/43/2048465630/167669/dd3c8b7b/5ae12c40N57c98ea8.jpg'</span>), (<span class="string">'16675691362'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18490/21/2141098141/120513/b3ca521a/5ae90247N3b4909ae.jpg'</span>), (<span class="string">'26222795271'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19441/291/1597121495/310550/9bc2e141/5ad05fc0N1510cae5.jpg'</span>), (<span class="string">'1780924'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17167/97/1957869461/43204/d064647b/5adda3e0Ne1d3aa86.jpg'</span>), (<span class="string">'4813030'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19198/83/1908967366/189260/7538e84b/5adda865N8f547981.jpg'</span>), (<span class="string">'27036535156'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19399/140/2175516321/123017/41e6d6a8/5aea87d3N9736cc9d.jpg'</span>), (<span class="string">'26348513019'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t14857/240/2643838980/220943/c982fda1/5aaf2002Ndd25bc52.jpg'</span>), (<span class="string">'26016197600'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19894/76/195725612/190103/23c60ca1/5aeabb94N3e0266bc.jpg'</span>), (<span class="string">'25168000024'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17629/301/2062161127/434152/aa3560a5/5ae319f9N1ae1146c.jpg'</span>), (<span class="string">'25965247088'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19270/67/2232771964/253207/25f41fd9/5aea61b0Nfd21a809.jpg'</span>), (<span class="string">'10123099847'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t15511/14/1469153129/729958/b0af0ca1/5a533063N15fea56c.jpg'</span>), (<span class="string">'20000220615'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t16426/172/2638358261/151693/87020840/5ab869ddN30621fec.jpg'</span>), (<span class="string">'15904713681'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t17287/197/2249621651/366556/d36ae213/5aeadb4cN97f413f3.jpg'</span>), (<span class="string">'10114188069'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19927/88/179058964/386205/afd08ef1/5ae9717fN07f116d9.jpg'</span>), (<span class="string">'10503200866'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t18139/246/1628563908/114414/9315ac7c/5ad0647eNa9f1e2af.jpg'</span>), (<span class="string">'1658610413'</span>, <span class="string">'https://img20.360buyimg.com/n7/jfs/t19411/79/1017814440/108641/1b185d6d/5ab8b479Nd2417e97.jpg'</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><p>根据文件<code>ga10.wms5.jd.com.txt</code>中的内容，分别匹配<code>upstream</code>和<code>location</code>{}中的内容，将对应内容分别写入文件夹<code>upstream</code>和<code>location</code>，文件夹中分别是以配置名称命名的配置内容。显示结果如下<br><img src="http://cdn.rosinelan.com/blog/program/upstream.png" alt="regular" title="regular">。</p><ul><li>题目分析</li></ul><ol><li>正则匹配<code>upstream</code>内容，分组应包括名称及全部内容，名称用于文件命名，全部内容用于写入文件。  </li><li>利用<code>os</code>模块进行文件夹判断、创建、切换等功能的实现。  </li><li>最后写入文件。  </li><li><code>location</code>处理方法基本一致。 </li></ol><ul><li>代码实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">regupstream = re.compile(<span class="string">r"\s*(upstream\s+(\S+)\s+&#123;[^&#125;]+&#125;)"</span>)</span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"ga10.wms5.jd.com.txt"</span>) <span class="keyword">as</span> fum:</span><br><span class="line">    upstmlist = regupstream.findall(fum.read())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"upstream"</span>):</span><br><span class="line">        os.mkdir(<span class="string">"upstream"</span>)</span><br><span class="line">    os.chdir(<span class="string">"upstream"</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> upstmlist:</span><br><span class="line">        <span class="keyword">with</span> codecs.open(item[<span class="number">1</span>], <span class="string">"w"</span>) <span class="keyword">as</span> fumw:</span><br><span class="line">            fumw.write(item[<span class="number">0</span>])</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reglocation = re.compile(<span class="string">r"\s*(location\s+\/(\S+)\/\s+&#123;[^&#125;]+&#125;)"</span>)</span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">"ga10.wms5.jd.com.txt"</span>) <span class="keyword">as</span> flc:</span><br><span class="line">    lcalist = reglocation.findall(flc.read())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"location"</span>):</span><br><span class="line">        os.mkdir(<span class="string">"location"</span>)</span><br><span class="line">    os.chdir(<span class="string">"location"</span>)</span><br><span class="line">    <span class="keyword">for</span> ilocal <span class="keyword">in</span> lcalist:</span><br><span class="line">        filename1 = ilocal[<span class="number">1</span>]+<span class="string">".conf"</span></span><br><span class="line">        <span class="keyword">with</span> codecs.open(filename1, <span class="string">"w"</span>) <span class="keyword">as</span> flcw:</span><br><span class="line">            flcw.write(ilocal[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><img src="http://cdn.rosinelan.com/blog/program/upstream.png" alt="regular_rex" title="regular_rex"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;针对前面&lt;code&gt;正则表达式&lt;/code&gt;及&lt;code&gt;re&lt;/code&gt;模块进行复习，然后题目实战。  &lt;/p&gt;
&lt;h3 id=&quot;正则常用语法&quot;&gt;&lt;a href=&quot;#正则常用语法&quot; class=&quot;headerlink&quot; title=&quot;正则常用语法&quot;&gt;&lt;/a&gt;正则常用语法&lt;/h3&gt;&lt;p&gt;熟悉最常用的正则语法。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单字符匹配&lt;br&gt;&lt;code&gt;.&lt;/code&gt; 匹配除换行符之外的任意一个字符。&lt;br&gt;&lt;code&gt;[...]&lt;/code&gt; 表示匹配一个字符集集合，如&lt;code&gt;[A-Za-z0-9]&lt;/code&gt;表示匹配所有字母和数字。
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="re" scheme="https://rosinelan.github.io/tags/re/"/>
    
      <category term="正则" scheme="https://rosinelan.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="爬虫" scheme="https://rosinelan.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(四)</title>
    <link href="https://rosinelan.github.io/2018/04/29/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E5%9B%9B/"/>
    <id>https://rosinelan.github.io/2018/04/29/python内置模块-四/</id>
    <published>2018-04-29T13:44:57.000Z</published>
    <updated>2018-05-04T08:42:33.685Z</updated>
    
    <content type="html"><![CDATA[<p>内置模块<code>datetime</code>、<code>time</code>、<code>commands</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。<br>内置模块<code>subprocess</code>、<code>os</code>、<code>random</code>、<code>sys</code>、<code>logging</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/" target="_blank" rel="noopener">python内置模块(二)</a>查看。<br>内置模块<code>hashlib</code>、<code>StringIO</code>、<code>BytesIO</code>、<code>Json</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/" target="_blank" rel="noopener">python内置模块(三)</a>查看。  </p><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p><code>re</code>模块是python中处理正则表达式的一个模块，通过re模块的方法，把正则表达式编译成正则对象，以便使用正则对象的方法。<br><a id="more"></a></p><h4 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h4><p>首先推荐一个在线的正则表达式验证调试网站<a href="https://regex101.com/" target="_blank" rel="noopener">regular expressions 101</a>。支持<code>python</code>、<code>javascript</code>、<code>python</code>和<code>golang</code>4种语言的正则语法。使用时注意勾选正确的语言。<br>正则表达式中的字符分为<code>普通字符</code>和<code>元字符</code>，通过普通字符和元字符组合成一个特定匹配规则的表达式。除元字符之外的都是普通字符。下面介绍部分元字符。  </p><ul><li>单个字符匹配<br><code>.</code> 匹配换行符<code>\n</code>之外的任意一个字符。<br><code>[...]</code> 表示一个字符集集合。被匹配的文本对应位置可以是这个字符集合中指定的任意字符。<br><code>[^...]</code> 表示匹配除该字符集合指定的字符外的其它所有字符中的任意一个。<br><code>\</code> 转义字符，可以用来改变特殊字符的原有含义。</li><li>预定义字符集<br><code>\d</code> 数字 [0-9]<br><code>\D</code> 非数字 [^\d]<br><code>\s</code> 空白字符 [&lt;空格&gt;\t\r\n\f\v]<br><code>\S</code> 非空白字母 [^\s]<br><code>\w</code> 单词字符 [A-Za-z0-9]<br><code>\W</code> 非单词字符 [^\w]  </li><li>字符次数匹配<br><code>*</code> 匹配前一个字符0或无限次<br><code>+</code> 匹配前一个字符1或无限次<br><code>?</code> 匹配前一个字符0或1次<br><code>{m}</code> 匹配前一个字符m次<br><code>{m, n}</code> 匹配前一个字符m至n次。<br><code>*? + ???(m,n)?</code> 使变成非贪婪模式</li><li>边界匹配<br><code>^</code> 匹配字符串开头。多行模式下匹配每一行的开头。<br><code>$</code> 匹配字符串末尾。多行模式下匹配每一行的末尾。<br><code>\A</code> 仅匹配字符串开头。<br><code>\Z</code> 仅匹配字符串末尾。<br><code>\b</code> 匹配\w和\W之间。<br><code>\B</code> [^\b]</li><li>逻辑与分组<br><code>|</code> 表示逻辑或，代表它左右两边的表达式会任意匹配一个。总是优先匹配左边的表达式，若匹配成功则跳过右边的表达式匹配。若<code>|</code>没有出现在<code>()</code>中，则它的有效范围是整个正则表达式。<br><code>(...)</code> 被括起来的表达式表示一个分组，且每一个分组都有一个正整数编号，从表达式开始每遇到一个分组的左括号，分组编号就+1,。另外，分组表达式作为一个整体，后面可接表示词次数的字符。分组表达式中的<code>|</code>仅在该分组中有效。<br><code>(?P&lt;NAME...&gt;)</code> 表示一个分组，除了原有的分组编号外，又指定了一个分组名称。<br><code>\&lt;number&gt;</code> 引用编号为<code>&lt;number&gt;</code>的分组所匹配到的字符串。<br><code>(?P=name)</code> 引用名称为<code>name</code>的分组所匹配到的字符串。  </li><li>特殊构造<br><code>(?:...)</code> (…)的不分组版本，用于使用<code>|</code>或后接数量词。<br><code>(?#...)</code> #后的内容将作为注释被忽略。<br><code>(?=...)</code> 后面的字符串内容需要匹配表达式才能成功匹配。不消耗字符串的内容。<br><code>(?&lt;=...)</code> 前面的字符串内容需要匹配表达式才能成功匹配。不消耗字符串的内容。<br><code>(?!...)</code> 后面的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。<br><code>(?&lt;!...)</code> 前面的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。<br><code>(?iLmsux)</code><br><code>(?(id/name)yes-pattern|no-pattern)</code> 编号为id或别名为name的分组匹配到字符，则需要匹配yes-pattern表达式，否则需要匹配no-pattern表达式。<code>|no-pattern</code>可以省略。<br>关于更多的逻辑分组、特殊构造可以查看图片<img src="http://cdn.rosinelan.com/blog/program/regular.png" alt="regular"><h4 id="re方法"><a href="#re方法" class="headerlink" title="re方法"></a>re方法</h4></li><li>compile(pattern, flags=0)<br>使用<code>compile()</code>函数编译正则表达式，返回正则表达式对象。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(p)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">_sre</span>.<span class="title">SRE_Pattern</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>表达式对象的方法和属性<br>通过<code>compile()</code>函数返回的就是表达式对象</p><ul><li><p>match(self, string, pos=0, endpos=-1)<br>在string字符串开始位置匹配正则表达式，如果0个或者多个字符被匹配则返回相应的匹配对象，如果不匹配则返回None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(p, <span class="string">'hello'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(p, <span class="string">'hello123'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>fullmatch(self, string, pos=0, endpos=-1)<br>整个string字符串与该正则表达式对象匹配则返回相应的匹配对象，否则返回None。相当于给正则表达式加上了边界字元字符<code>^</code>和<code>$</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'[a-z]+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.fullmatch(p, <span class="string">'hello'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">'hello'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.fullmatch(p, <span class="string">'hello123'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.fullmatch(p, <span class="string">'hello123'</span>))</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></li><li><p>search(self, string, pos=0, endpos=-1)<br>扫描整个string字符串，查找正则表达式对象可以匹配的子串第一次出现的位置，并返回相应的匹配对象，如果没有匹配的内容则返回None。<br><code>search()</code>在字符串的任意位置进行匹配检测；<code>match</code>仅在字符串开始位置进行匹配检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="string">'abcdef'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.search(<span class="string">r'^c'</span>, f))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.search(<span class="string">r'^a'</span>, f))</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">'a'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>findall(self, string, pos=0, endpos=-1)<br>搜索string字符串中与正则表达式匹配的所有子串，以列表形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">"He was carefully disguised but captured quickly by police."</span>    <span class="comment">#查找以ly结尾的单词</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.findall(<span class="string">r'\w+ly'</span>, text))</span><br><span class="line">[<span class="string">'carefully'</span>, <span class="string">'quickly'</span>]</span><br></pre></td></tr></table></figure></li><li><p>finditer(self, string, pos=0, endpos=-1)<br>搜索string字符串中与正则表达式匹配的所有子串，以迭代器形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.finditer(<span class="string">r'\w+ly'</span>, text))</span><br><span class="line">&lt;callable_iterator object at <span class="number">0x0000028AF0429710</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(<span class="string">r'\w+ly'</span>, text):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"&#123;0&#125;-&#123;1&#125;:&#123;2&#125;"</span>.format(i.start(), i.end(), i.group()))</span><br><span class="line">...</span><br><span class="line"><span class="number">7</span><span class="number">-16</span>:carefully</span><br><span class="line"><span class="number">40</span><span class="number">-47</span>:quickly</span><br></pre></td></tr></table></figure></li><li><p>sub(self, repl, string, count=0)<br>替换string字符串中与正则表达式匹配的count个子串，返回替换修改后的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'pro--gr-am'</span>    <span class="comment">#替换出现的-字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.sub(<span class="string">r'-+'</span>, <span class="string">''</span>, text))</span><br><span class="line">program</span><br></pre></td></tr></table></figure></li><li><p>split(self, string, maxsplit=0)<br>以正则表达式匹配的字符串为分隔符，对一个字符串进行分割，以列表形式返回分隔后的各个字符串。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'Words, words, words.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(re.split(<span class="string">r'\W+'</span>, text))</span><br><span class="line">[<span class="string">'Words'</span>, <span class="string">'words'</span>, <span class="string">'words'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure></li></ul><p>上述方法中部分参数说明<br><code>string</code> 要匹配或处理的字符串<br><code>pos</code> 表示从string字符串的哪个位置开始<br><code>endpos</code> 表示到string字符串的哪个位置结束<br><code>maxsplit</code> 表示最大切割次数，默认值0，表示能切割多少次就尽可能多的切割多少次  </p><p>匹配对象的方法<br>用正则表达式对象的regex.match()、regex.fullmatch()和regex.search()得到的结果就是一个匹配对象</p><ul><li>group(self, *args)<br>返回一个或多个指定捕获组匹配到的内容。若只有一个参数则返回值是一个单独的字符串；若有多个参数则返回值是包含每一个指定分组所对应的匹配字符串的元组；若不指定参数，则group1默认为0，将返回整个正则表达式所匹配的内容。</li><li>groups(self, default=None)<br>返回一个包含所有分组所匹配内容的元组，如果某个分组没有匹配的内容，则取default所指定的值。</li><li>groupdict(self, default=None)<br>返回一个包含所有命名分组名称及其所匹配内容的字典对象，如果某个分组没有匹配的内容，则取default所指定的值。</li><li>start()<br>返回匹配到内容的开始位置。  </li><li>end()<br>返回匹配到内容的结束位置。  </li><li>span()<br>返回包含匹配到内容开始和结束位置的元组<code>(start, end)</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.compile(<span class="string">r'.*name\s+is\s+(\w+).*am\s+(?P&lt;age&gt;\d&#123;1,3&#125;)\s+years.*tel\s+is\s+(?P&lt;tel&gt;\d&#123;11&#125;).*'</span>, re.DOTALL)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>My name is Tom,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>I am 16 years old,</span></span><br><span class="line"><span class="string"><span class="meta">... </span>My tel is 13972773480.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = p.match(string)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group())</span><br><span class="line"></span><br><span class="line">My name <span class="keyword">is</span> Tom,</span><br><span class="line">I am <span class="number">16</span> years old,</span><br><span class="line">My tel <span class="keyword">is</span> <span class="number">13972773480.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">My name <span class="keyword">is</span> Tom,</span><br><span class="line">I am <span class="number">16</span> years old,</span><br><span class="line">My tel <span class="keyword">is</span> <span class="number">13972773480.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">1</span>))</span><br><span class="line">Tom</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">2</span>))</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="number">3</span>))</span><br><span class="line"><span class="number">13972773480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.group(<span class="string">'tel'</span>))</span><br><span class="line"><span class="number">13972773480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.groups())</span><br><span class="line">(<span class="string">'Tom'</span>, <span class="string">'16'</span>, <span class="string">'13972773480'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.groupdict())</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="string">'16'</span>, <span class="string">'tel'</span>: <span class="string">'13972773480'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>re</code>在模块级别提供的函数如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">fullmatch(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">search(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">findall(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line">sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line">split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>函数名称和<code>re</code>对象所提供的函数名称同名，其实就是正则表达式对象方法的封装，功能相同。<br>通过<code>complie()</code>声明正则对象，然后调用正则对象方法效率比直接使用模块级别函数高。  </p><ul><li>正则表达式的<code>r</code>前缀<br>对于一些特殊的字符需要通过<code>/</code>(反斜线)进行转义处理才能被正确的识别。加上<code>r</code>(raw，原始的意思)表示字符串的字面值就是其真实值，不需要进行转义等操作。  </li></ul><p>关于python正则语法，可以点击<a href="https://docs.python.org/3/howto/regex.html#regex-howto" target="_blank" rel="noopener">Regular Expression HOWTO</a>查看更多内容。<br>关于python正则模块使用，可以点击<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">Regular expression operations</a>查看更多内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内置模块&lt;code&gt;datetime&lt;/code&gt;、&lt;code&gt;time&lt;/code&gt;、&lt;code&gt;commands&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;subprocess&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;random&lt;/code&gt;、&lt;code&gt;sys&lt;/code&gt;、&lt;code&gt;logging&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(二)&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;hashlib&lt;/code&gt;、&lt;code&gt;StringIO&lt;/code&gt;、&lt;code&gt;BytesIO&lt;/code&gt;、&lt;code&gt;Json&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(三)&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;headerlink&quot; title=&quot;re&quot;&gt;&lt;/a&gt;re&lt;/h3&gt;&lt;p&gt;&lt;code&gt;re&lt;/code&gt;模块是python中处理正则表达式的一个模块，通过re模块的方法，把正则表达式编译成正则对象，以便使用正则对象的方法。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="python" scheme="https://rosinelan.github.io/tags/python/"/>
    
      <category term="re" scheme="https://rosinelan.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(三)</title>
    <link href="https://rosinelan.github.io/2018/04/27/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%B8%89/"/>
    <id>https://rosinelan.github.io/2018/04/27/python内置模块-三/</id>
    <published>2018-04-27T06:08:41.000Z</published>
    <updated>2018-04-27T15:08:50.030Z</updated>
    
    <content type="html"><![CDATA[<p>内置模块<code>datetime</code>、<code>time</code>、<code>commands</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。<br>内置模块<code>subprocess</code>、<code>os</code>、<code>random</code>、<code>sys</code>、<code>logging</code>相关内容点击<a href="https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/" target="_blank" rel="noopener">python内置模块(二)</a>查看。  </p><h3 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h3><p><code>haslib</code>模块为不同的安全哈希/安全散列(Secure Hash Algorithm)和信息摘要算法(Message Digest Algorithm)实现了一个公共的、通用的接口。haslib模块提供了很多算法的函数实现，例如：md5、sha1、sha224、sha256、sha384、sha512等。<br><a id="more"></a><br>此处简单介绍下集中数据加密方式</p><table><thead><tr><th>数据加密方式</th><th>描述</th><th>主要解决问题</th><th>常用算法</th></tr></thead><tbody><tr><td>对称加密</td><td>数据加密和解密使用相同的密钥</td><td>数据的机密性</td><td>DES,AES</td></tr><tr><td>非对称加密</td><td>也叫公钥加密，指数据加密和解密使用不同的密钥(密钥对)</td><td>身份验证</td><td>DSA,RSA</td></tr><tr><td>单向加密</td><td>只能加密数据，不能解密数据</td><td>数据的完整性验证</td><td>MD5,SHA系统算法</td></tr></tbody></table><p>摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的字符串(通常用16进制字符串表示)。常用的是<code>md5</code>算法。<br><strong>hashlib模块对应的属性和函数</strong>  </p><ul><li><p>hselib.new(name[, date])<br>通用的哈希对象构造函数，用于构造指定的哈希算法对应的哈希对象。其中<code>name</code>用于指定哈希算法名称，如<code>md5</code>、<code>sha1</code>，不区分大小写；<code>data</code>可选，表示初始数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.new(<span class="string">'md5'</span>)    <span class="comment">#构建hash对象</span></span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE948AD0</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.算法名称()<br>可以直接通过具体的哈希算法名称对应的函数获取哈希对象，如hashlib.md5()等。<br>hashlib.md5()和hashlib.new(‘md5’)是等价的。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5()</span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE9489E0</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.algorithms_guaranteed<br>它的值是该模块在所有平台都支持的哈希算法的名称集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.algorithms_guaranteed</span><br><span class="line">&#123;<span class="string">'sha384'</span>, <span class="string">'blake2b'</span>, <span class="string">'sha3_384'</span>, <span class="string">'shake_128'</span>, <span class="string">'sha3_256'</span>, <span class="string">'sha3_224'</span>, <span class="string">'md5'</span>, <span class="string">'sha3_512'</span>, <span class="string">'blake2s'</span>, <span class="string">'sha224'</span>, <span class="string">'shake_256'</span>, <span class="string">'sha256'</span>, <span class="string">'sha512'</span>, <span class="string">'sha1'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>hashlib.algorithms_available<br>当前运行python解释器中可用的哈希算法的集合。<code>algorithms_guaranteed</code>是它的子集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.algorithms_available</span><br><span class="line">&#123;<span class="string">'md4'</span>, <span class="string">'sha3_384'</span>, <span class="string">'shake_128'</span>, <span class="string">'whirlpool'</span>, <span class="string">'SHA224'</span>, <span class="string">'blake2s'</span>, <span class="string">'ripemd160'</span>, <span class="string">'MD4'</span>, <span class="string">'sha1'</span>, <span class="string">'sha384'</span>, <span class="string">'SHA384'</span>, <span class="string">'ecdsa-with-SHA1'</span>, <span class="string">'md5'</span>, <span class="string">'SHA256'</span>, <span class="string">'DSA-SHA'</span>, <span class="string">'SHA1'</span>, <span class="string">'sha3_512'</span>, <span class="string">'shake_256'</span>, <span class="string">'sha'</span>, <span class="string">'sha256'</span>, <span class="string">'sha512'</span>, <span class="string">'DSA'</span>, <span class="string">'RIPEMD160'</span>, <span class="string">'blake2b'</span>, <span class="string">'dsaEncryption'</span>, <span class="string">'SHA512'</span>, <span class="string">'sha3_224'</span>, <span class="string">'sha224'</span>, <span class="string">'SHA'</span>, <span class="string">'sha3_256'</span>, <span class="string">'MD5'</span>, <span class="string">'dsaWithSHA'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>hash对象对应的属性和方法</strong>  </p><ul><li>hash.update()<br>更新哈希对象所要计算的数据，多次调用为累加效果。<br><code>m.update(a);m.update(b)</code>等价于<code>m.update(a+b)</code>。</li><li>hash.digest()<br>返回传递给update()函数的所有数据的摘要信息(二进制格式的字符串)</li><li>hash.hexdigest()<br>返回传递给update()函数的所有数据的摘要信息(十六进制格式的字符串)</li><li>hash.copy()<br>返回该哈希对象的一个copy(“clone”)，这个函数可以用来有效的计算共享一个公共初始化子串的数据的摘要信息。</li><li>hash.digest_size<br>hash结果的字节大小，即<code>hash.digest()</code>方法返回结果的字符串长度。该值对于哈希对象是固定的。md5:16，sha1:20, sha224:28。</li><li>hash.name<br>当前哈希对象对应的哈希算法的标准名称(小写)，可以直接传递给<code>hashlib.new()</code>函数来创建另外一个同类型的哈希对象。<br><strong>使用示例</strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = hashlib.md5()    <span class="comment">#创建hash对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.update(<span class="string">'hello world'</span>.encode(<span class="string">'utf-8'</span>))    <span class="comment">#更新hash对象的计算数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)</span><br><span class="line">&lt;md5 HASH object @ <span class="number">0x00000131AE9489E0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.hexdigest())    <span class="comment">#返回对应数据摘要信息(十六进制)</span></span><br><span class="line"><span class="number">5</span>eb63bbbe01eeed093cb22bb8f5acdc3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.digest())    <span class="comment">#返回对应数据摘要信息(二进制)</span></span><br><span class="line"><span class="string">b'^\xb6;\xbb\xe0\x1e\xee\xd0\x93\xcb"\xbb\x8fZ\xcd\xc3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.name)    <span class="comment">#返回使用的哈希算法</span></span><br><span class="line">md5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m.digest_size)    <span class="comment">#返回字符串长度</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></li></ul><p>注意点：</p><ol><li>实际使用中都是获取十六进制的字符串，也就是使用<code>hash.hexdigest()</code>。  </li><li>使用hashlib模块一般是3步，通过<code>hashlib.md5()</code>创建哈希对象;通过<code>update()</code>追加需要计算的数据；通过<code>hexdigest()</code>得到数据对应的十六进制字符串(也就是摘要信息)。<h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><code>StringIO</code>主要用来在内存中写入字符串及字符串的缓存。其接口和文件操作的接口是一致的，基本所有关于文件的方法都可以用。<br>关于文件操作的方法可以点击<a href="https://rosinelan.coding.me/2018/04/13/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">python文件操作</a>查看更多内容。<br>示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = StringIO()    <span class="comment">#初始化StringIO对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'hello world'</span>)    <span class="comment">#写入字符串</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.getvalue()    <span class="comment">#获取实例中的字符串</span></span><br><span class="line"><span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></li></ol><p><code>stringIO.getvalue()</code>返回StringIO实例中的字符串。<br>读取StringIO中的字符串，也可以使用文件类似的<code>read</code>、<code>readline</code>、<code>readlines</code>等方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'\n new line'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.seek(<span class="number">0</span>)    <span class="comment">#回到文件开头</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    print(line)</span><br><span class="line">...</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"> new line</span><br></pre></td></tr></table></figure></p><h3 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h3><p><code>StringIO</code>操作只能是<code>str</code>，如果要操作二进制数据，就需要使用<code>BytesIO</code>。<br><code>BytesIO</code>实现了在内存中读写bytes。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">0</span>)    <span class="comment">#回到文件最开头</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()    <span class="comment">#读取</span></span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)    <span class="comment">#读取的内容和写入的对比</span></span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure></p><p>此处写入的内容不是<code>中文</code>字符串，而是经过UTF-8编码的bytes。</p><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><p>Json(JavaScript Object Notation)，它是一种轻量级的数据交换格式。其应用最广泛的是作为AJAX中web服务器和客户端的通讯的数据格式，现在也常用于http请求。  </p><ul><li>序列化和反序列化<br>将对象转换为可通过网络传输或可以存储到本地磁盘的数据格式(如：XML、JSON或特定数据格式)的过程称为序列化；反之则称为反序列化。<br>python的JSON模块序列化和反序列化的过程分别叫做：encoding和decoding。<br>encoding：把python对象转换成JSON字符串。<br>decoding：把JSON字符串转换成python对象。<br><strong>json模块提供了下面的方法进行序列化和反序列化操作</strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化：将python对象转换成json字符串</span></span><br><span class="line">dumps(obj, *, skipkeys=<span class="keyword">False</span>, ensure_ascii=<span class="keyword">True</span>, check_circular=<span class="keyword">True</span>, allow_nan=<span class="keyword">True</span>, cls=<span class="keyword">None</span>, indent=<span class="keyword">None</span>, separators=<span class="keyword">None</span>, default=<span class="keyword">None</span>, sort_keys=<span class="keyword">False</span>, **kw)</span><br><span class="line"><span class="comment">#反序列化：将json字符串转换成python对象</span></span><br><span class="line">loads(s, *, encoding=<span class="keyword">None</span>, cls=<span class="keyword">None</span>, object_hook=<span class="keyword">None</span>, parse_float=<span class="keyword">None</span>, parse_int=<span class="keyword">None</span>, parse_constant=<span class="keyword">None</span>, object_pairs_hook=<span class="keyword">None</span>, **kw)</span><br></pre></td></tr></table></figure></li></ul><p><strong>将序列化后得到的json数据保存到文件以及直接读取文件中的json数据进行反序列化操作</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化：将python对象转换成json字符串并存储到文件</span></span><br><span class="line">dump(obj, fp, *, skipkeys=<span class="keyword">False</span>, ensure_ascii=<span class="keyword">True</span>, check_circular=<span class="keyword">True</span>, allow_nan=<span class="keyword">True</span>, cls=<span class="keyword">None</span>, indent=<span class="keyword">None</span>, separators=<span class="keyword">None</span>, default=<span class="keyword">None</span>, sort_keys=<span class="keyword">False</span>, **kw)</span><br><span class="line"><span class="comment">#反序列化：读取指定文件中的json字符串并转换成python对象</span></span><br><span class="line">load(fp, *, cls=<span class="keyword">None</span>, object_hook=<span class="keyword">None</span>, parse_float=<span class="keyword">None</span>, parse_int=<span class="keyword">None</span>, parse_constant=<span class="keyword">None</span>, object_pairs_hook=<span class="keyword">None</span>, **kw)</span><br></pre></td></tr></table></figure></p><p><strong>json和python数据类型对应关系</strong></p><ol><li>python转换为json</li></ol><table><thead><tr><th>Python</th><th style="text-align:center">JSON</th></tr></thead><tbody><tr><td>dict</td><td style="text-align:center">object</td></tr><tr><td>list,tuple</td><td style="text-align:center">array</td></tr><tr><td>str</td><td style="text-align:center">string</td></tr><tr><td>int,float,int- &amp; float-derived Enums</td><td style="text-align:center">number</td></tr><tr><td>True</td><td style="text-align:center">true</td></tr><tr><td>False</td><td style="text-align:center">false</td></tr><tr><td>None</td><td style="text-align:center">null</td></tr></tbody></table><ol><li>json转换为python</li></ol><table><thead><tr><th>JSON</th><th style="text-align:center">Python</th></tr></thead><tbody><tr><td>object</td><td style="text-align:center">dict</td></tr><tr><td>array</td><td style="text-align:center">list</td></tr><tr><td>string</td><td style="text-align:center">str</td></tr><tr><td>number(int)</td><td style="text-align:center">int</td></tr><tr><td>number(real)</td><td style="text-align:center">float</td></tr><tr><td>true</td><td style="text-align:center">True</td></tr><tr><td>false</td><td style="text-align:center">False</td></tr><tr><td>null</td><td style="text-align:center">None</td></tr></tbody></table><p><strong>序列化示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="string">'&#123;"a": "str", "c": true, "e": 10, "b": 11.1, "d": null, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br></pre></td></tr></table></figure></p><p><code>sort_keys</code>参数： 表示序列化时是否对dict的key进行排序（dict默认是无序的）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, sort_keys=<span class="keyword">True</span>)</span><br><span class="line"><span class="string">'&#123;"a": "str", "b": 11.1, "c": true, "d": null, "e": 10, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br></pre></td></tr></table></figure></p><p><code>indent</code>参数： 表示缩进，它可以使得数据存储的格式变得更加优雅、可读性更强；如果indent是一个非负整数或字符串，则JSON array元素和object成员将会被以相应的缩进级别进行打印输出；如果indent是0或负数或空字符串，则将只会插入换行，不会有缩进。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"a"</span>: <span class="string">"str"</span>,</span><br><span class="line">    <span class="string">"b"</span>: <span class="number">11.1</span>,</span><br><span class="line">    <span class="string">"c"</span>: true,</span><br><span class="line">    <span class="string">"d"</span>: null,</span><br><span class="line">    <span class="string">"e"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"f"</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"g"</span>: [</span><br><span class="line">        <span class="number">4</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>separators</code>参数： 尽管indent参数可以使得数据存储的格式变得更加优雅、可读性更强，但是那是通过添加一些冗余的空白字符进行填充的。当json被用于网络数据通信时，应该尽可能的减少无用的数据传输，这样可以节省带宽并加快数据传输速度。json模块序列化Python对象后得到的json字符串中的’,’号和’:’号分隔符后默认都会附加一个空白字符，我们可以通过<code>separators</code>参数重新指定分隔符，从而去除无用的空白字符。<br>该参数的值应该是一个tuple(item_separator, key_separator)</p><ul><li>若indent是None，其默认值为(‘, ‘, ‘: ‘)</li><li>若indent不为None，则默认值为(‘,’, ‘: ‘)</li><li>我们可以通过为separator赋值为(‘,’, ‘:’)来消除空白字符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="string">'&#123;"a": "str", "c": true, "e": 10, "b": 11.1, "d": null, "f": [1, 2, 3], "g": [4, 5, 6]&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(&#123;<span class="string">'a'</span>:<span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, separators=(<span class="string">','</span>,<span class="string">':'</span>))</span><br><span class="line"><span class="string">'&#123;"a":"str","c":true,"e":10,"b":11.1,"d":null,"f":[1,2,3],"g":[4,5,6]&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><p><code>ensure_ascii</code>参数： 当该参数的值为True（默认值）时，输出中的所有非ASCII字符（比如中文）都会被转义成’\uXXXX’组成的序列，得到的结果是一个完全由ASCII字符组成的str实例。如果我们想得到一个人类可读的输出结果，需要把ensure_ascii参数的值设置为False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu=&#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span> : <span class="number">16</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_json = json.dumps(stu)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stu_json)</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"\u5c0f\u660e"</span>, <span class="string">"age"</span>: <span class="number">16</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stu_json01 = json.dumps(stu, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stu_json01)</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span>: <span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure></p><p>说明：<code>\u5c0f\u660e</code>是unicode字符对应的内存编码值，该内存编码名称为”unicode-escape”。可以通过<code>unicodestr.encode(&#39;unicode-escape&#39;)</code>和<code>decode(&#39;unicode-escape&#39;)</code>完成unicode字符串和Unicode内存编码序列进行相互转换。<br><strong>反序列化示例</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'&#123;"a": "str", "c": true, "b": 11.1, "e": 10, "d": null, "g": [4, 5, 6], "f": [1, 2, 3]&#125;'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'&#123;"a":"str","c":true,"b":11.1,"e":10,"d":null,"g":[4,5,6],"f":[1,2,3]&#125;'</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure></p><p><strong>load()和dump()</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化到文件中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'test.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    json.dump(&#123;<span class="string">'a'</span>:<span class="string">'str中国'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, fp, indent=<span class="number">4</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">#反序列化文件中的内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'test.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    json.load(fp)</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'str中国'</span>, <span class="string">'c'</span>: <span class="keyword">True</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">11.1</span>, <span class="string">'d'</span>: <span class="keyword">None</span>, <span class="string">'f'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'g'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;</span><br></pre></td></tr></table></figure></p><p>注意：如果试图使用相同的<code>fp</code>调用dump()函数去序列化多个对象，将会产生一个无效的JSON文件。也就是说对于一个fd只能调用一次<code>dump()</code>。<br>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/json.html" target="_blank" rel="noopener">JSON encoder and decoder</a>查看官网内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内置模块&lt;code&gt;datetime&lt;/code&gt;、&lt;code&gt;time&lt;/code&gt;、&lt;code&gt;commands&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。&lt;br&gt;内置模块&lt;code&gt;subprocess&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;random&lt;/code&gt;、&lt;code&gt;sys&lt;/code&gt;、&lt;code&gt;logging&lt;/code&gt;相关内容点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块(二)&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;hashlib&quot;&gt;&lt;a href=&quot;#hashlib&quot; class=&quot;headerlink&quot; title=&quot;hashlib&quot;&gt;&lt;/a&gt;hashlib&lt;/h3&gt;&lt;p&gt;&lt;code&gt;haslib&lt;/code&gt;模块为不同的安全哈希/安全散列(Secure Hash Algorithm)和信息摘要算法(Message Digest Algorithm)实现了一个公共的、通用的接口。haslib模块提供了很多算法的函数实现，例如：md5、sha1、sha224、sha256、sha384、sha512等。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="hashlib" scheme="https://rosinelan.github.io/tags/hashlib/"/>
    
      <category term="StringIO" scheme="https://rosinelan.github.io/tags/StringIO/"/>
    
      <category term="BytesIO" scheme="https://rosinelan.github.io/tags/BytesIO/"/>
    
      <category term="Json" scheme="https://rosinelan.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块(二)</title>
    <link href="https://rosinelan.github.io/2018/04/25/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97-%E4%BA%8C/"/>
    <id>https://rosinelan.github.io/2018/04/25/python内置模块-二/</id>
    <published>2018-04-25T00:03:32.000Z</published>
    <updated>2018-04-29T13:45:39.902Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>datetime/time/commands</code>模块的内容可以点击<a href="https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">python内置模块</a>查看。  </p><h3 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h3><p><code>subprocess</code>模块用来生成子进程，并可以通过管道连接它们的输入/输出/错误，以及获得它们的返回值。  </p><h4 id="getoutput-cmd"><a href="#getoutput-cmd" class="headerlink" title="getoutput(cmd)"></a>getoutput(cmd)</h4><p>该命令类似<code>commands</code>模块中的<code>getoutput()</code>，执行<code>cmd</code>命令返回执行结果。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS = subprocess.getoutput(<span class="string">"netstat -aon | findstr 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS1 = subprocess.getoutput(<span class="string">"netstat -aon | grep 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS1)</span><br><span class="line"><span class="string">'grep'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></p><h4 id="getstatusoutput-cmd"><a href="#getstatusoutput-cmd" class="headerlink" title="getstatusoutput(cmd)"></a>getstatusoutput(cmd)</h4><p>该命令类似<code>commands</code>模块中的<code>getstatusoutput()</code>，执行<code>cmd</code>命令返回包含2个元素的元组。<br>第一个元素为命令执行状态(int)，如果执行成功返回0，不成功返回非0。<br>第二个元素为命令执行结果(str)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS = subprocess.getstatusoutput(<span class="string">"netstat -aon | findstr 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS)  <span class="comment">#输出结果为元组</span></span><br><span class="line">(<span class="number">0</span>, <span class="string">'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\n  TCP    192.168.0.102:64793    111.202.100.60:80      TIME_WAIT       0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>PIDS1 = subprocess.getstatusoutput(<span class="string">"netstat -aon | grep 0:80"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(PIDS1)</span><br><span class="line">(<span class="number">255</span>, <span class="string">"'grep' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status, result = subprocess.getstatusoutput(<span class="string">"netstat -aon | grep 0:80"</span>)    <span class="comment">#python中典型使用方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(status)</span><br><span class="line"><span class="number">255</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line"><span class="string">'grep'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></p><h4 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h4><p>参数说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(args, *, stdin=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, timeout=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行命令并返回执行状态，其中shell参数为<code>False</code>时，命令需要以列表的方式传入，当shell为<code>True</code>时，可直接传入命令。默认情况下<code>shell=False</code>。<br><code>shell=False</code>情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.call(<span class="string">"ls"</span>)    <span class="comment">#单个不带参数的命令可直接执行</span></span><br><span class="line">anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)    <span class="comment">#命令执行结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.call(<span class="string">"ls -l"</span>)    <span class="comment">#带参数命令直接传入将会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">524</span>, <span class="keyword">in</span> call</span><br><span class="line">    <span class="keyword">return</span> Popen(*popenargs, **kwargs).wait()</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">711</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    errread, errwrite)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">1327</span>, <span class="keyword">in</span> _execute_child</span><br><span class="line">    <span class="keyword">raise</span> child_exception</span><br><span class="line">OSError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])    <span class="comment">#带参数命令以列表方式传入</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><code>shell=True</code>情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.call(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)    <span class="comment">#带参数命令也可直接传入</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><h4 id="check-call"><a href="#check-call" class="headerlink" title="check_call()"></a>check_call()</h4><p>参数说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_call(args, *, stdin=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, timeout=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行命令，若返回状态码为0，则返回<code>0</code>，否则抛出异常<code>CalledProcessError</code>。<br>注意：该方法等价于python3.5中的<code>run(..., check=True)</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_call(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.check_call(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>)    <span class="comment">#即使正确执行命令，但返回值不为0抛出异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">542</span>, <span class="keyword">in</span> check_call</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="check-output"><a href="#check-output" class="headerlink" title="check_output()"></a>check_output()</h4><p>语法说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args, *, stdin=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, universal_newlines=<span class="keyword">False</span>, timeout=<span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>执行命令，若返回状态码为0，则返回<code>执行结果</code>，否则抛出异常<code>CalledProcessError</code>。<br>注意：该方法等价于python3.5中的<code>run(..., check=True, stdout=PIPE).stdout</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = subprocess.check_output(<span class="string">"ls -l"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)    <span class="comment">#输出为执行结果</span></span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">2523</span> Apr <span class="number">21</span>  <span class="number">2016</span> anaconda-ks.cfg</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = subprocess.check_output(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/subprocess.py"</span>, line <span class="number">575</span>, <span class="keyword">in</span> check_output</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd, output=output)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h4><p>python 3.5添加的函数。<br>语法说明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="keyword">None</span>, input=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, shell=<span class="keyword">False</span>, cwd=<span class="keyword">None</span>, timeout=<span class="keyword">None</span>, check=<span class="keyword">False</span>, encoding=<span class="keyword">None</span>, errors=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>执行指定命令，等待命令执行完成后返回一个包含执行结果的<code>CompleteProcess</code>类的实例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"dir"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 A001<span class="number">-9</span>D89</span><br><span class="line"></span><br><span class="line"> C:\Users\xiaohuihui 的目录</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">19</span>  <span class="number">20</span>:<span class="number">30</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">19</span>  <span class="number">20</span>:<span class="number">30</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2017</span>/<span class="number">11</span>/<span class="number">17</span>  <span class="number">10</span>:<span class="number">16</span>    &lt;DIR&gt;          .android</span><br><span class="line">............................................</span><br><span class="line">...........................................</span><br><span class="line"><span class="number">2018</span>/<span class="number">01</span>/<span class="number">23</span>  <span class="number">16</span>:<span class="number">23</span>                 <span class="number">0</span> <span class="number">2.</span>txt</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">16</span>  <span class="number">06</span>:<span class="number">45</span>    &lt;DIR&gt;          <span class="number">3</span>D Objects</span><br><span class="line"><span class="number">2018</span>/<span class="number">04</span>/<span class="number">13</span>  <span class="number">20</span>:<span class="number">28</span>                 <span class="number">4</span> bacon.txt</span><br><span class="line">               <span class="number">8</span> 个文件  <span class="number">1</span>,<span class="number">029</span>,<span class="number">964</span>,<span class="number">132</span> 字节</span><br><span class="line">              <span class="number">24</span> 个目录 <span class="number">94</span>,<span class="number">803</span>,<span class="number">804</span>,<span class="number">160</span> 可用字节</span><br><span class="line">CompletedProcess(args=<span class="string">'dir'</span>, returncode=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"exit 1"</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Users\xiaohuihui\AppData\Local\Programs\Python\Python36\lib\subprocess.py"</span>, line <span class="number">418</span>, <span class="keyword">in</span> run</span><br><span class="line">    output=stdout, stderr=stderr)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run(<span class="string">"netstat -aon|findstr 0:80"</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">CompletedProcess(args=<span class="string">'netstat -aon|findstr 0:80'</span>, returncode=<span class="number">0</span>, stdout=<span class="string">b'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\r\n'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>subprocess中的<code>call()</code>、<code>check_call()</code>、<code>check_output()</code>以及<code>run()</code>参数列表已经列出，下面是参数的说明</p><ul><li>args<br>要执行的shell命令，默认是一个字符串序列，如<code>[&#39;df&#39;, &#39;-hT&#39;]</code>或<code>(&#39;df&#39;, &#39;-hT&#39;)</code>，也可以是一个字符串，如<code>&#39;df -hT&#39;</code>，但此时需要把shell参数的值设置为<code>True</code>。</li><li>shell<br>如果shell为True，那么指定的命令将通过shell执行。如果需要访问某些shell特性，如管道、文件名通配符等，这将非常有用。  </li><li>check<br>如果check参数的值是True，且执行命令的进程以非0的状态码退出，则会抛出一个<code>CalledProcessError</code>异常，且该异常对象会包含参数、退出状态码以及stdout和stderr(若被捕获)。  </li><li>stdout/stderr<br>程序的标准输出和错误输出。  </li><li>run()函数默认不会捕获命令执行结果的正常输出和错误输出，如果我们想获取这些内容，需要传递<code>subprocess.PIPE</code>然后可以通过返回的<code>CompleteProcess</code>类实例的stddout和stderr属性捕获相应的内容。  </li><li>call()和check_call()函数返回的是命令执行的状态码而不是<code>CompleteProcess</code>类实例，所以它们的stdout和stderr不适合赋值为<code>subprocess.PIPE</code>。</li><li>check_output()函数默认会返回执行结果，所以不用设置stdout的值，如果希望在结果中捕获错误信息，可以设置<code>stderr = subprocess.STDOUT</code>。  </li><li>cwd<br>用于设置子进程的当前目录。当它不为None时，子程序在执行前，它的当前路径会被替换成cwd的值。这个路径并不会被添加到可执行程序的搜索路径，所以cwd不能是相对路径。  </li><li>input<br>该参数是传递给<code>Popen.communicate()</code>，通常该参数的值必须是一个字节序列，如果<code>universal_newline=True</code>，则其值应该是一个字符串。  </li><li>universal_newline<br>该参数影响的是输入输出的数据格式，默认为False，此时stdout和stderr的输出是字节序列，设置为True时stdout和stderr的输出是字符串。  </li></ul><h4 id="CompleteProcess类说明"><a href="#CompleteProcess类说明" class="headerlink" title="CompleteProcess类说明"></a>CompleteProcess类说明</h4><p><code>subprocess.CompleteProcess</code>类在python3.5中才存在，表示一个已经结束进程的状态信息，包含的属性如下</p><ul><li>args:用于加载进程的参数，可能是一个列表或者一个字符串。  </li><li>returncode：子进程的退出状态码，通常情况下状态码为0表示进程成功运行；负值<code>-N</code>表示子进程被信号N终止。  </li><li>stdout：从子进程捕获的stdout。这通常是一个字节序列，如果run()函数被调用时指定<code>universal_newlines=True</code>，则该属性值是一个字符串。如果run()函数被调用时指定<code>stderr=subprocess.STDOUT</code>，那么stdout和stderr将会被整合到这一个属性中，且stderr将会为None</li><li>stderr：从子进程捕获的stderr。它的值与stdout一样，是一个字节序列或一个字符串。如果stderr没有被捕获的话，它的值就为None</li><li>check_returncode()： 如果<code>returncode</code>是一个非0值，则该方法会抛出一个<code>CalledProcessError</code>异常。</li></ul><h4 id="Popen"><a href="#Popen" class="headerlink" title="Popen"></a>Popen</h4><p>该类用于在一个新的进程中执行一个子程序。上面介绍的函数都是基于<code>subprocess.Popen</code>类实现的，通过使用这些被封装后的高级函数可以很方便的完成一些常见的需求。当无法通过上面的高级函数实现一些不太常用的功能时，可以通过<code>subprocess.Popen</code>来完成。<br>示例1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">"netstat -aon|findstr 0:80"</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p.stdout.read())</span><br><span class="line"><span class="string">b'  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4\r\n'</span></span><br></pre></td></tr></table></figure></p><p>示例2<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(1) \n'</span>)    <span class="comment">#返回写入的字符数</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(2) \n'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stdin.write(<span class="string">'print(3) \n'</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out,err = obj.communicate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(out)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(err)</span><br></pre></td></tr></table></figure></p><p>总结</p><ol><li>Python2.4版本引入了subprocess模块用来替换os.system()、os.popen()、os.spawn*()等函数以及commands模块；也就是说如果你使用的是Python 2.4及以上的版本就应该使用subprocess模块了。</li><li>如果你的应用使用的Python 2.4以上，但是是Python 3.5以下的版本，Python官方给出的建议是使用subprocess.call()函数。Python 2.5中新增了一个subprocess.check_call()函数，Python 2.7中新增了一个subprocess.check_output()函数，这两个函数也可以按照需求进行使用。</li><li>如果你的应用使用的是Python 3.5及以上的版本，Python官方给出的建议是尽量使用subprocess.run()函数。</li><li>当subprocess.call()、subprocess.check_call()、subprocess.check_output()和subprocess.run()这些高级函数无法满足需求时，我们可以使用subprocess.Popen类来实现我们需要的复杂功能。  </li></ol><p>更多关于<a href="https://docs.python.org/3.6/library/subprocess.html" target="_blank" rel="noopener">subprocess</a>说明可点击查看官方文档。  </p><h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><p><code>os</code>模块提供对操作系统的文件目录操作、文件路径操作等功能。  </p><h4 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h4><p><code>os.path</code>模块主要用于对文件路径的操作，如：路径分割和拼接、取文件相对路径和绝对路径等。  </p><ul><li><p>os.path.abspath(path)<br>返回指定文件的绝对路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.split(path)<br>将路径名称分割成两部分(head,tail)，tail是路径path名称中最后一部分且不包括斜线，head是tail之前的所有部分。如果path以斜线结尾则tail为空，如果path中没有斜线则head为空字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line">(<span class="string">'C:\\Users'</span>, <span class="string">'xiaohuihui'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">'sunny.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">"sunny.txt"</span>)</span><br><span class="line">(<span class="string">''</span>, <span class="string">'sunny.txt'</span>)</span><br></pre></td></tr></table></figure></li><li><p>os.path.splitext(path)<br>将路径名称分割成两部分(root,ext)，其中ext为后缀名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui\\sunny'</span>, <span class="string">'.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui\\'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line">(<span class="string">'C:\\Users\\xiaohuihui'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">"sunny.text"</span>)</span><br><span class="line">(<span class="string">'sunny'</span>, <span class="string">'.text'</span>)</span><br></pre></td></tr></table></figure></li><li><p>os.path.basename(path)<br>返回path路径名的基名称，也就是os.path.split(path)返回的第二个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.dirname(path)<br>返回path路径的目录名称，也就是os.path.split(path)返回的第一个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'C:\\Users'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.join(path, *paths)<br>将一个或多个路径中的非空值通过路径分隔符拼接成一个新的路径名称，如果在拼接过程中遇到绝对路径将会丢弃前面的部分并从该绝对路径重新开始拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users\\xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users"</span>, <span class="string">"xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"C:\\Users"</span>, <span class="string">"C:\\Users\\xiaohuihui"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.exists(path)<br>指定的文件路径存在则返回True，否则返回False。如果是失效的链接文件则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\www.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getatime(path)<br>返回该路径对应文件的最后一次访问时间的时间戳(秒)，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getatime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523624105.3170362</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getatime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1524141055.6605625</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getmtime(path)<br>返回该路径对应文件的最后修改时间的时间戳(秒)，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getmtime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523627463.3876014</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getmtime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1524141055.6605625</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getctime(path)<br>返回该路径对应文件的ctime，在某些系统上(unix)是最后一次元数据更改时间，其他系统上是(如windows)是路径创建时间；，如果文件不存在或无法访问则引发<code>OSError</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getctime(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">1523624105.3170362</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getctime(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">1508831681.0998952</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.getsize(path)<br>返回指定路径对应文件的字节大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="number">68</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="number">20480</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="number">20480</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.relpath(path, start=os.curdir)<br>返回path相对于start的相对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="string">'sunny.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="string">'.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="string">'.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.relpath(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, start=<span class="string">"C:\\Users"</span>)</span><br><span class="line"><span class="string">'xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.realpath(path)<br>获取path的真实、绝对路径(可用于获取软链接文件指向的文件路径)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.realpath(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui\\sunny.txt'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isabs(path)<br>判断path是否为绝对路径，是则返回True，否则返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isabs(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isabs(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isfile(path)<br>判断path是否是一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.isdir(path)<br>判断path是否是一个目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui\\"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">"C:\\Users\\xiaohuihui"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.islink(path)<br>判断path是否是一个链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.islink(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.ismount(path)<br>判断path是否是一个挂载点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.ismount(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.ismount(<span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.path.samefile(path1, path2)<br>判断path1和path2是否为同一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.samefile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, <span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.samefile(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>, <span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="os-1"><a href="#os-1" class="headerlink" title="os"></a>os</h4><p>在使用os模块过程中，在一些unix平台的许多文件或目录的操作函数支持下面的特性</p><ol><li>指定一个文件描述符<br>对于某些函数。path参数不仅可以是一个字符串，也可以是文件描述符。该函数会操作这个文件描述符引用的文件。可以通过<code>os.supports_fd</code>来检查当前平台的path参数是否可以指定为一个文件描述符，如果不可用将引发<code>NotImplementedError</code>。如果该函数还支持dir_fd或follow_symlinks参数，当path被以文件描述符的方式提供时，指定dir_fd或follow_symlinks参数是错误的。</li><li>相对于目录描述符的路径<br>如果dir_fd不是None，它应该是一个指向某个目录的文件描述符，并且要操作的path应该是一个相对于该目录的相对路径；如果path是一个绝对路径，dir_fd将会被忽略。  </li><li>不遵循符号链接<br>如果follow_symlinks是False，并且要操作的路径中最后一个元素是一个符号链接时，该函数将会操作这个链接文件，而不是操作这个链接文件指向的文件。</li></ol><ul><li><p>os.access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)<br>测试当前用户是否对path所指向的文件有某种访问权限。<br>mode可取值为：os.F_OK（文件存在）、os.R_OK（可读）、os.W_OK（可写）、os.X_OK（可执行）中的一个或用逻辑运算符‘|’连接起来的多个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.access(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>,os.F_OK)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.access(<span class="string">"C:\\Users\\xiaohuihui\\sunny.txt"</span>,os.R_OK|os.W_OK)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.chdir(path)<br>更改当前工作目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">"D:\\rhce"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'D:\\rhce'</span></span><br></pre></td></tr></table></figure></li><li><p>os.getcwd()<br>返回一个表示当前目录的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Users\\xiaohuihui'</span></span><br></pre></td></tr></table></figure></li><li><p>os.listrdir(path=’.’)<br>返回指定目录中所有的文件列表，顺序不固定，且不包含<code>.</code>和<code>..</code>，python2中path无默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">"D:\Dns"</span>)</span><br><span class="line">[<span class="string">'1.txt'</span>, <span class="string">'DNSTEST'</span>]</span><br></pre></td></tr></table></figure></li><li><p>os.mkdir(path, mode=0777, *, dir_fd=None)<br>创建一个名为path的目录并指定目录权限，如果目录已经存在则会引起FileExistsError；dir_fd是Python3.3开始新加的参数。<br>需要说明的是该函数与os.makedirs()、os.mkfifo()函数创建的目或逛到文件的权限会受到umask的影响，比如指定mode为0777，实际目录权限为 0777 - umask = 0755</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)    <span class="comment">#判断test1目录是否存在</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">"test1"</span>)    <span class="comment">#创建目录test1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">"test1"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileExistsError: [WinError <span class="number">183</span>] 当文件已存在时，无法创建该文件。: <span class="string">'test1'</span></span><br></pre></td></tr></table></figure></li><li><p>os.remove(path, *, dir_fd=None)<br>删除指定的文件，如果path是个目录将会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">"C:\\Users\\xiaohuihui\\sunny1.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>os.rmdir(path, *, dir_fd=None)<br>删除指定的空目录，如果目录不为空会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">"test1"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"C:\\Users\\xiaohuihui\\test1"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">"oracle"</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">OSError: [WinError <span class="number">145</span>] 目录不是空的。: <span class="string">'oracle'</span></span><br></pre></td></tr></table></figure></li><li><p>os.rename(src, dst, *, src_dir_fd=-None, dst_dir_fd=None)<br>目录或文件重命名，如果dst是一个目录将会引发OSError。在Unix平台上，如果dst存在且是一个文件，那么只要用户有权限就将会被静默替换；而在Windows平台上，如果dst存在，即使它是一个文件也会引发OSError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">"sunny.txt"</span>, <span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)<br>与os.rename()功能相同，区别在于：对于os.replace()来说，如果dst存在且是一个文件，那么只要用户有权限就将会被静默替换，而没有平台上的差别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.replace(<span class="string">"sunny1.txt"</span>,<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny1.txt"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">"sunny.txt"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>os.linesep<br>输出当前平台使用的行终止符。windows下使用的是<code>\r\n</code>，linxu下使用的是<code>\n</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep   <span class="comment">#windows下执行</span></span><br><span class="line"><span class="string">'\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep    <span class="comment">#linux下执行</span></span><br><span class="line"><span class="string">'\n'</span></span><br></pre></td></tr></table></figure></li><li><p>os.name<br>返回当前系统平台，windows则返回<code>nt</code>，unix则返回<code>posix</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name    <span class="comment">#windows下执行</span></span><br><span class="line"><span class="string">'nt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name    <span class="comment">#linux下执行</span></span><br><span class="line"><span class="string">'posix'</span></span><br></pre></td></tr></table></figure></li><li><p>os.system(cmd)<br>执行指定命令并返回执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"netstat -aon|findstr 0:80"</span>)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><p>知识点分享<br>在执行命令的时候，windows和unix的命令不尽相同，可以使用<code>os.name</code>进行区分，保证代码的兼容性。类似下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> os.name == <span class="string">"nt"</span>:</span><br><span class="line">    cmd = <span class="string">"ipconfig"</span></span><br><span class="line"><span class="keyword">elif</span> os.name == <span class="string">"posix"</span>:</span><br><span class="line">    cmd = <span class="string">"ifconfig"</span></span><br><span class="line"></span><br><span class="line">os.system(cmd)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = os.popen(<span class="string">"netstat -aon|findstr 0:80"</span>).read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">  TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>             <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4</span></span><br><span class="line">  TCP    <span class="number">10.12</span><span class="number">.5</span><span class="number">.244</span>:<span class="number">57008</span>      <span class="number">140.205</span><span class="number">.34</span><span class="number">.20</span>:<span class="number">80</span>       ESTABLISHED     <span class="number">32052</span></span><br></pre></td></tr></table></figure></p><p>os是一个操作系统接口模块，提供了各种和操作系统相关的功能，上面写到的文件和目录操作等知识其中的一部分。更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/os.html" target="_blank" rel="noopener">Miscellaneous operating system interfaces</a>查看官网介绍。</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>random是随机数操作模块，可以用来生成随机数和完成与随机数相关的功能。  </p><ul><li><p>random.random()<br>用于生成半开区间[0.0, 1.0)内的一个随机浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="number">0.5716693670763958</span></span><br></pre></td></tr></table></figure></li><li><p>random.uniform(a, b)<br>用于生成一个指定范围内[a, b]的随机浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">48.107294751423076</span></span><br></pre></td></tr></table></figure></li><li><p>random.randint(a, b)<br>用于生成一个指定范围内[a, b]的整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></li><li><p>random.randrange(start, stop[, step])<br>用于从指定范围[start, stop)。按指定基数step递增的集合中获取一个随机数，step默认为1。<br>random.randrange(stop)等价于random.randrange(0,stop)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">50</span>)</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">50</span>)</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure></li><li><p>random.choice(seq)<br>从指定序列seq中随机获取一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">"abc1234"</span>)</span><br><span class="line"><span class="string">'2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="string">"a"</span>])</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p>random.sample(population, k)<br>从指定序列中随机抽取k个不重复的元素，并以列表的形式返回，用于不进行内容替换的随机抽样。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(list, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(list1, <span class="number">5</span>)</span><br><span class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>random.shuffle(x[, random])<br>用于随机打乱一个列表中的元素，需要注意的是该函数操作的是列表对象，且没有返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(random.shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))    <span class="comment">#该函数无返回值，直接给列表操作无效</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(list)    <span class="comment">#传递的参数必须是列表对象。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list)</span><br><span class="line">[<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(list)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/random.html" target="_blank" rel="noopener">Generate pseudo-random numbers</a>查看官网内容。</p><h3 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h3><p>sys模块提供访问由解释器使用或维护的变量和在与解释器交互使用到的函数。</p><ul><li>sys.argv()<br>给程序传递参数，其中argv[0]表示脚本名称。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''usage'''</span></span><br><span class="line">    print(<span class="string">'Usage: %s %s %s %s'</span> % (sys.argv[<span class="number">0</span>], <span class="string">'tokenid'</span>, <span class="string">'Subject'</span>, <span class="string">'Content'</span>))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        usage()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(sys.argv[<span class="number">0</span>])</span><br><span class="line">        print(sys.argv[<span class="number">1</span>])</span><br><span class="line">        print(sys.argv[<span class="number">2</span>])</span><br><span class="line">        print(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xiaohuihui&gt;python D:/pythondev/calculate/module/sys1.py <span class="number">12</span> <span class="number">22</span> <span class="number">32</span></span><br><span class="line">D:/pythondev/calculate/module/sys1.py</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><ul><li><p>sys.path<br>获取指定模块模块搜索路径的字符串集合。将写好的模块放在得到的某个路径下，就可以在import的时候正确找到。在import模块名称的时候就是根据<code>sys.path</code>搜索模块。也可以自定义添加模块路径<code>sys.path.append(path)</code>，但只是临时生效，退出当前环境之后失效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">''</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\python36.zip'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\DLLs'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Roaming\\Python\\Python36\\site-packages'</span>, <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages'</span>]</span><br></pre></td></tr></table></figure></li><li><p>sys.modules<br><code>sys.modules</code>是一个全局字典，该字典在python启动之后就加载在内存中。当导入新模块时，sys.modules将自动记录该模块，第二次导入该模块时python会自动从字典中查找从而加快程序运行速度。它拥有字典的一切方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.keys()    <span class="comment">#返回所有已导入的模块列表</span></span><br><span class="line">dict_keys([<span class="string">'builtins'</span>, <span class="string">'sys'</span>, ...., <span class="string">'os'</span>, <span class="string">'errno'</span>, <span class="string">'stat'</span>, <span class="string">'_stat'</span>, <span class="string">'ntpath'</span>, <span class="string">'genericpath'</span>, <span class="string">'os.path'</span>, <span class="string">'_collections_abc'</span>, <span class="string">'_sitebuiltins'</span>, <span class="string">'sysconfig'</span>, <span class="string">'atexit'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.values()    <span class="comment">#返回模块(含对应路径)</span></span><br><span class="line">dict_values([&lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, ...., &lt;module <span class="string">'atexit'</span> (built-<span class="keyword">in</span>)&gt;])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">"os"</span>]    <span class="comment">#指定key对应的values</span></span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\xiaohuihui\\AppData\\Local\\Programs\\Python\\Python36\\lib\\os.py'</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>sys.exit([arg])<br>表示退出程序。<br>一般情况下程序执行到末尾解释器自动退出，若需要中途退出，可以调用<code>sys.exit()</code>函数，带有一个可选的整数参数返回给调用它的程序。(0表示正常退出，其他表示异常)也可以使用字符串参数，传递对应的报错信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"This exit test"</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)     <span class="comment"># 退出程序</span></span><br><span class="line">print(<span class="string">"there"</span>)  <span class="comment"># 不会被print</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This exit test</span><br></pre></td></tr></table></figure></p><ul><li>sys.stdin/stdout/stderr<br>stdin/stdout/stderr变量包含与标准I/O流对应流对象。如果需要更好的控制输入输出，而print不能满足要求的情况下可以使用。<br>print其实就是调用<code>stdout.write(obj+&#39;\n&#39;)</code>方法。<br>stdin示例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">"Please input your name: "</span>)</span><br><span class="line">name = sys.stdin.readline()    <span class="comment">#和input功能类似。</span></span><br><span class="line">print(<span class="string">"name:&#123;0&#125;"</span>.format(name))</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please input your name: </span><br><span class="line">xiaohh</span><br><span class="line">name:xiaohh</span><br></pre></td></tr></table></figure></p><p>stdout示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"sunny2.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">sys.stdout = f</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></p><ul><li>sys.platform<br>获取当前系统平台，如win32/linux等。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform    <span class="comment">#windows系统执行</span></span><br><span class="line"><span class="string">'win32'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform    <span class="comment">#linux系统执行</span></span><br><span class="line"><span class="string">'linux'</span></span><br></pre></td></tr></table></figure></li></ul><p>判断系统平台执行不同命令，推荐使用下面方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.platform.startswith(<span class="string">'freebsd'</span>):</span><br><span class="line">    <span class="comment"># FreeBSD-specific code here...</span></span><br><span class="line"><span class="keyword">elif</span> sys.platform.startswith(<span class="string">'linux'</span>):</span><br><span class="line">    <span class="comment"># Linux-specific code here...</span></span><br></pre></td></tr></table></figure></p><p>更多更详细的内容可以点击[System-specific parameters and functions]<a href="https://docs.python.org/3.6/library/sys.html)查看官网内容。" target="_blank" rel="noopener">https://docs.python.org/3.6/library/sys.html)查看官网内容。</a></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string模块主要是对字符串进行处理。</p><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><ul><li><p>string.ascii_lowercase<br>小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br></pre></td></tr></table></figure></li><li><p>string.ascii_uppercase<br>大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase</span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure></li><li><p>string.ascii_letters<br>包含所有大小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_letters</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure></li><li><p>string.digits<br>数字0到9的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits</span><br><span class="line"><span class="string">'0123456789'</span></span><br></pre></td></tr></table></figure></li><li><p>string.hexdigits<br>包含十六进制所有字符的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.hexdigits</span><br><span class="line"><span class="string">'0123456789abcdefABCDEF'</span></span><br></pre></td></tr></table></figure></li><li><p>string.octdigits<br>包含八进制所有字符的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.octdigits</span><br><span class="line"><span class="string">'01234567'</span></span><br></pre></td></tr></table></figure></li><li><p>string.punctuation<br>所有标点符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure></li><li><p>string.printable<br>可打印的字符的字符串，包括数字、字母、标点符号和空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable</span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure></li><li><p>string.whitespace<br>空白字符，包括space, tab, linefeed(换行), return, formfeed(换页), and vertical tab。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.whitespace</span><br><span class="line"><span class="string">' \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ul><li><p>string.capitalize()<br>字符串首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.capitalize())</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.center(width)<br>将原字符串用空格填充成一个长度为<code>width</code>的字符串，原字符串居中。<br>下面原字符串<code>hello world!</code>长度为12，左面填充空格9个，右面填充空格8个。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.center(<span class="number">29</span>))</span><br><span class="line">         hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.strip()<br>去掉字符串两边的空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.center(<span class="number">30</span>).strip())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure></li><li><p>string.count(s)<br>返回字符串s在字符串中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.count(<span class="string">"o"</span>))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>string.isalnum()<br>若字符串至少有一个字符且都是字母或数字则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isalnum())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isalpha()<br>若字符串至少有一个字符并且都是字母则返回<code>True</code>,否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isalpha())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isdigit()<br>若字符串只包含数字则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isdigit())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.isspace()<br>若字符串中只包含空格，则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.isspace())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.istitle()<br>若字符串是标题化的(单词首字母大写，其余小写)则返回<code>True</code>，否则返回<code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.istitle())</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>string.title()<br>返回标题华的字符串，即所有单词都是大写开始，其余字母均为小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.title())</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><p>string.partition(s)<br>用<code>s</code>将字符串分割成三个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"hello world!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.partition(<span class="string">"o"</span>))</span><br><span class="line">(<span class="string">'hell'</span>, <span class="string">'o'</span>, <span class="string">' world!'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串模板Template"><a href="#字符串模板Template" class="headerlink" title="字符串模板Template"></a>字符串模板Template</h4><p>通过<code>string.Template</code>可以为python定制字符串的替换标准。替换规则如下</p><ul><li><code>$$</code>将会被替换成<code>$</code>。</li><li><code>$identifier</code>定义了一个可替换的占位符，用来匹配<code>identifier</code>。默认情况下，<code>identifier</code>只能以下划线或者ASCII字符开头，并且区分大小写(除首字母外，其他部分可以使用数字)。</li><li><code>${identifier}</code>和<code>$identifier</code>是等价的。当有效的标识符紧跟着占位符但不属于占位符时，需要使用<code>{}</code>，例如<code>${noun}ification</code>。</li></ul><p><code>$</code>之后出现非字符数字内容，将会出现<code>ValueError</code>异常信息。<br>Template类定义如下<br><code>class string.Template(template)</code>，参数是模板字符串。<br>提供2个方法  </p><ul><li>substitute(mapping, <strong>kwds)<br>执行模板替换操作，返回一个新的字符串。<br><code>mapping</code>参数是一个类似字典的对象，<code>keys</code>和占位符名称一致。也可以提供关键字参数，其中关键字参数和占位符名称一致。<br>当<code>mapping</code>和`</strong>kwds<code>都提供参数且重复的时候，将会优先选择</code>**kwds`提供的占位符参数。  </li><li><p>safe_substitute(mapping, <strong>kwds)<br>当<code>mapping</code>和`</strong>kwds<code>提供的参数无法替换全部的占位符，使用</code>substitute()<code>会报</code>ValueError<code>错误，使用</code>safe_substitute()<code>，未被替换的占位符将会完整输出(不改变)。同样，在</code>$<code>后的占位符出现非法字符，使用</code>substitute()<code>会报</code>ValueError<code>错误，使用</code>safe_substitute()<code>将会原样输出。  总之，使用</code>safe_substitute()`将会返回一个可用的字符串，而不是抛出异常信息。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Template(<span class="string">'$who like $what'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.substitute(who=<span class="string">'tim'</span>, what=<span class="string">'kung pao'</span>)</span><br><span class="line"><span class="string">'tim like kung pao'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(who=<span class="string">'tim'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'Give $who $100'</span>).substitute(d)    <span class="comment">#占位符以数字开头</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ..........</span><br><span class="line">ValueError: Invalid placeholder <span class="keyword">in</span> string: line <span class="number">1</span>, col <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$who like $what'</span>).substitute(d)    <span class="comment">#缺少key报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ..........</span><br><span class="line">KeyError: <span class="string">'what'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$who like $what'</span>).safe_substitute(d)    <span class="comment">#缺少key正常输出</span></span><br><span class="line"><span class="string">'tim like $what'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Template(<span class="string">'$&#123;who&#125;likePython'</span>).substitute(who=<span class="string">'I'</span>)</span><br><span class="line"><span class="string">'IlikePython'</span></span><br></pre></td></tr></table></figure></li><li><p>Template高级用法<br>通过继承<code>string.Template</code>，重写变量delimiter(定界符)和idpattern(替换格式)，定制不同形式的模板。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">template_text = <span class="string">''' Delimiter : $de \n Replaced : %with_underscore \n Ingored : %notunderscored '''</span></span><br><span class="line">d = &#123;<span class="string">'de'</span>: <span class="string">'not replaced'</span>,</span><br><span class="line">     <span class="string">'with_underscore'</span>: <span class="string">'replaced'</span>,</span><br><span class="line">     <span class="string">'notunderscored'</span>: <span class="string">'not replaced'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTemplate</span><span class="params">(string.Template)</span>:</span>    <span class="comment">#继承自string.Template</span></span><br><span class="line">    delimiter = <span class="string">'%'</span>    <span class="comment">#定界符为%</span></span><br><span class="line">    idpattern = <span class="string">'[a-z]+_[a-z]+'</span>    <span class="comment">#替换模式为含有下划线</span></span><br><span class="line"></span><br><span class="line">print(string.Template(template_text).safe_substitute(d) ) <span class="comment">#使用原有方法，定界符为$ </span></span><br><span class="line"></span><br><span class="line">print(MyTemplate(template_text).safe_substitute(d))  <span class="comment">#使用重写的方法，定界符为%</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Delimiter : <span class="keyword">not</span> replaced </span><br><span class="line"> Replaced : %with_underscore </span><br><span class="line"> Ingored : %notunderscored</span><br><span class="line"></span><br><span class="line"> Delimiter : $de </span><br><span class="line"> Replaced : replaced </span><br><span class="line"> Ingored : %notunderscored</span><br></pre></td></tr></table></figure></p><h4 id="字符串处理技巧"><a href="#字符串处理技巧" class="headerlink" title="字符串处理技巧"></a>字符串处理技巧</h4><ol><li><p>反转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s[::<span class="number">-1</span>])</span><br><span class="line"><span class="number">654321</span></span><br></pre></td></tr></table></figure></li><li><p>字符串链接<br>尽量使用<code>join()</code>链接字符串，使用<code>+</code>连接n个字符串需要申请<code>n-1</code>次内存，使用<code>join()</code>需要申请<code>1</code>次内存。  </p></li><li><p>固定长度分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r'.&#123;1,3&#125;'</span>, s)    <span class="comment">#使用正则</span></span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用()生成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sql = (<span class="string">'select count() from table '</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'where id = "10" '</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'group by sex'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sql)</span><br><span class="line">select count() <span class="keyword">from</span> table where id = <span class="string">"10"</span> group by sex</span><br></pre></td></tr></table></figure></li></ol><p>更多更详细的内容可以点击<a href="https://docs.python.org/3/library/string.html" target="_blank" rel="noopener">Common string operations</a>查看官网内容。</p><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><ol><li>日志级别</li></ol><p>下面列出的是日志级别及对应的值，当需要自定义日志级别及对应的值时，需要参考已经预先定义的级别及数值。<br>假如自定义的级别的数值和预先定义好的出现冲突，默认将会改写预定义的值，同时对应预定义的级别名称也失效。  </p><table><thead><tr><th>级别</th><th style="text-align:center">数字值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>CRITICAL</td><td style="text-align:center">50</td><td style="text-align:center">发生严重错误，导致应用程序不能继续运行</td></tr><tr><td>ERROR</td><td style="text-align:center">40</td><td style="text-align:center">由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td></tr><tr><td>WARNING</td><td style="text-align:center">30</td><td style="text-align:center">在某些不期望的事情发生时记录的信息，但是此时应用程序可以正常运行</td></tr><tr><td>INFO</td><td style="text-align:center">20</td><td style="text-align:center">信息详细程度仅次于DEBUG，通常只记录关键节点信息，确认程序按照预期运行</td></tr><tr><td>DEBUG</td><td style="text-align:center">10</td><td style="text-align:center">最详细的日志信息，典型应用场景是问题诊断</td></tr><tr><td>NOTSET</td><td style="text-align:center">0</td><td style="text-align:center">等同于DEBUG</td></tr></tbody></table><p>上述对应的级别，从上到下日志输出量是越来越多，越来越详细。<br>当为某个应用程序指定一个日志级别之后，应用程序会记录所有日志级别大于或等于指定日志级别的日志信息，而不是仅仅记录指定级别的日志信息，小于该级别的日志记录将会被丢弃。  </p><ol><li>使用方式<br>logging模块提供两种记录日志的方式</li></ol><ul><li>第一种是使用logging提供的模块级别的函数</li><li>第二种是使用logging日志系统的四大组件</li></ul><p>其中logging提供的模块级别的函数也是对logging日志系统相关类的封装。<br>logging模块定义的模块级别的常用函数<br>函数|说明<br>-|:-:</p><p>更多更详细的内容可以点击<a href="https://docs.python.org/3.6/library/logging.html" target="_blank" rel="noopener">Logging facility for Python</a>查看官网内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于&lt;code&gt;datetime/time/commands&lt;/code&gt;模块的内容可以点击&lt;a href=&quot;https://rosinelan.coding.me/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python内置模块&lt;/a&gt;查看。  &lt;/p&gt;
&lt;h3 id=&quot;subprocess&quot;&gt;&lt;a href=&quot;#subprocess&quot; class=&quot;headerlink&quot; title=&quot;subprocess&quot;&gt;&lt;/a&gt;subprocess&lt;/h3&gt;&lt;p&gt;&lt;code&gt;subprocess&lt;/code&gt;模块用来生成子进程，并可以通过管道连接它们的输入/输出/错误，以及获得它们的返回值。  &lt;/p&gt;
&lt;h4 id=&quot;getoutput-cmd&quot;&gt;&lt;a href=&quot;#getoutput-cmd&quot; class=&quot;headerlink&quot; title=&quot;getoutput(cmd)&quot;&gt;&lt;/a&gt;getoutput(cmd)&lt;/h4&gt;&lt;p&gt;该命令类似&lt;code&gt;commands&lt;/code&gt;模块中的&lt;code&gt;getoutput()&lt;/code&gt;，执行&lt;code&gt;cmd&lt;/code&gt;命令返回执行结果。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="subprocess" scheme="https://rosinelan.github.io/tags/subprocess/"/>
    
      <category term="Popen" scheme="https://rosinelan.github.io/tags/Popen/"/>
    
      <category term="log" scheme="https://rosinelan.github.io/tags/log/"/>
    
      <category term="sys" scheme="https://rosinelan.github.io/tags/sys/"/>
    
      <category term="os" scheme="https://rosinelan.github.io/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>python内置模块</title>
    <link href="https://rosinelan.github.io/2018/04/23/python%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/"/>
    <id>https://rosinelan.github.io/2018/04/23/python内置模块/</id>
    <published>2018-04-23T07:05:50.000Z</published>
    <updated>2018-04-25T15:01:19.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><p>在python中内置了很多模块，无须额外配置就可使用。<br>模块和目录的区别:是否有<code>__init__.py</code>文件，若无则是目录，有则是模块。  </p><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><p>datetime是进行日期和时间处理的标准库。<br><a id="more"></a></p><h5 id="获取当前时间和日期"><a href="#获取当前时间和日期" class="headerlink" title="获取当前时间和日期"></a>获取当前时间和日期</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">nowtime = datetime.now()     <span class="comment">#获取当前日期和时间</span></span><br><span class="line">print(nowtime)    <span class="comment">#输出结果：2018-04-23 22:55:05.386948</span></span><br><span class="line">print(type(nowtime))    <span class="comment">#输出结果：&lt;class 'datetime.datetime'&gt;</span></span><br><span class="line">print(datetime.now().year)    <span class="comment">#输出结果：2018</span></span><br><span class="line">print(datetime.now().month)    <span class="comment">#输出结果：4</span></span><br><span class="line">print(datetime.now().day)    <span class="comment">#输出结果：23</span></span><br></pre></td></tr></table></figure><p><code>datetime</code>是一个模块，其中包含<code>datetime</code>类，我们使用的是<code>datetime.now()</code>中是<code>datetime</code>这个类。<br>通过<code>from datetime import datetime</code>导入的才是<code>datetime</code>类，若仅导入<code>import datetime</code>，则需要使用<code>datetime.datetime.now()</code>方式使用。<br><code>datetime.now()</code>返回的是当前日期和时间，类型为<code>datetime</code>。  </p><h5 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h5><ul><li><p>指定日期和时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">30</span>))    <span class="comment">#输出结果：2018-08-12 11:30:00</span></span><br></pre></td></tr></table></figure></li><li><p>datetime转换为str<br>使用<code>datetime.strftime()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>))    <span class="comment">#输出结果：2018-04-23 23:18:10</span></span><br></pre></td></tr></table></figure></li><li><p>str转换为datetime<br>使用<code>datetime.strptime()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.strptime(<span class="string">'2018-04-20 18:30:00'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>))    <span class="comment">#输出结果：2018-04-20 18:30:00</span></span><br></pre></td></tr></table></figure></li><li><p>datetime转换为timestamp<br><code>timestamp</code>也就是常说的时间戳，表示自<code>1970-01-01 00:00:00 UTC+00:00</code>以来的秒数。<br>使用<code>timestamp()</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now().timestamp())    <span class="comment">#输出结果：1524497381.170269</span></span><br></pre></td></tr></table></figure></li><li><p>timestamp转换为datetime<br>使用<code>fromtimestamp</code>实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.fromtimestamp(<span class="number">1524497333.38282</span>))    <span class="comment">#输出结果：2018-04-23 23:28:53.382820</span></span><br><span class="line">print(datetime.utcfromtimestamp(<span class="number">1524497333.38282</span>))    <span class="comment">#输出结果：2018-04-23 15:28:53.382820</span></span><br></pre></td></tr></table></figure></li></ul><p>此处<code>fromtimestamp</code>转换之后的datetime默认为本地时间，也就是计算机配置的时区对应的时间(本机为UTC+8:00)。<br>使用<code>utcfromtimestamp</code>转换之后的datetime为UTC标准时区的时间</p><ul><li>datetime加减<br>对日期进行向前或者向后的推算，使用<code>timedelta</code>类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">print(datetime.now())    <span class="comment">#输出结果：2018-04-23 23:41:12.694505</span></span><br><span class="line">print(datetime.now() + timedelta(hours=<span class="number">2</span>))    <span class="comment">#输出结果：2018-04-24 01:41:12.694505</span></span><br><span class="line">print(datetime.now() - timedelta(hours=<span class="number">2</span>))    <span class="comment">#输出结果：2018-04-23 21:41:12.694505</span></span><br><span class="line">print(datetime.now() - timedelta(weeks=<span class="number">1</span>))    <span class="comment">#输出结果：2018-04-16 23:41:12.694505</span></span><br><span class="line">print(datetime.now() + timedelta(days=<span class="number">1</span>))    <span class="comment">#输出结果：2018-04-24 23:41:12.694505</span></span><br></pre></td></tr></table></figure></li></ul><p><code>timedelta</code>后面的参数还有<code>minutes</code>、<code>seconds</code>、<code>microseconds</code>。  </p><p>python中常用的日期时间格式化符号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%y 两位数的年份表示（<span class="number">00</span><span class="number">-99</span>）</span><br><span class="line">%Y 四位数的年份表示（<span class="number">000</span><span class="number">-9999</span>）</span><br><span class="line">%m 月份（<span class="number">01</span><span class="number">-12</span>）</span><br><span class="line">%d 月内中的一天（<span class="number">0</span><span class="number">-31</span>）</span><br><span class="line">%H <span class="number">24</span>小时制小时数（<span class="number">0</span><span class="number">-23</span>）</span><br><span class="line">%I <span class="number">12</span>小时制小时数（<span class="number">01</span><span class="number">-12</span>）</span><br><span class="line">%M 分钟数（<span class="number">00</span>=<span class="number">59</span>）</span><br><span class="line">%S 秒（<span class="number">00</span><span class="number">-59</span>）</span><br><span class="line">%c 本地相应的日期表示和时间表示</span><br></pre></td></tr></table></figure></p><p>更多的<a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" target="_blank" rel="noopener">格式化符号</a>点击查看。  </p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>在<code>time</code>模块中，函数<code>gmtime()</code>、<code>localtime()</code>和<code>strptime()</code>以时间元组<code>struct_time</code>形式返回。<br>首先介绍时间元组的表示格式</p><h5 id="struct-time"><a href="#struct-time" class="headerlink" title="struct_time"></a>struct_time</h5><p>时间格式<code>time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=9, tm_min=3, tm_sec=26, tm_wday=1, tm_yday=114, tm_isdst=0)</code><br>索引值|属性|值<br>-|:-:|:-:<br>0|tm_year|年(如2015)<br>1|tm_mon|月，1-12<br>2|tm_mday|日，1-31<br>3|tm_hour|时，0-23<br>4|tm_min|分，0-59<br>5|tm_sec|秒，0-61<br>6|tm_wday|星期，0-6(0表示星期一)<br>7|tm_yday|一年中第几天(1-266)<br>8|tm_isdst|是否为夏令时。0,1,-1</p><p>说明<br><code>tm_sec</code>取值范围为0-61是考虑了闰秒和双闰秒的因素。<br><code>tm_isdst</code>中，使用夏令时为1，不使用夏令时为0，当不确定是否使用夏令时为-1。<br>夏令时(DST,Daylight Saving Time)指利用夏天天亮的早，人为的将时间提前一小时，以充分利用光照资源减少照明时间，从而节约照明。  </p><h5 id="time-time"><a href="#time-time" class="headerlink" title="time.time()"></a>time.time()</h5><p>返回当前时间的时间戳。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.time())    <span class="comment">#输出结果：1524531805.2834768</span></span><br></pre></td></tr></table></figure></p><h5 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h5><p>线程推迟指定的时间运行，单位为秒。</p><h5 id="time-clock"><a href="#time-clock" class="headerlink" title="time.clock()"></a>time.clock()</h5><p>在unix系统，返回进程时间，用秒表示的浮点数(时间戳)。<br>在windows系统，第一次调用返回的是进程运行的时间，第二次之后调用均返回自第一次调用以后到现在的运行时间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：4.105467826269739e-07</span></span><br><span class="line">time.sleep(<span class="number">1</span>)    <span class="comment">#线程推迟1秒运行</span></span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：1.0005993983026353</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">print(time.clock())    <span class="comment">#输出结果：1.9998817625266034</span></span><br></pre></td></tr></table></figure></p><h5 id="time-localtime-secs"><a href="#time-localtime-secs" class="headerlink" title="time.localtime([secs)"></a>time.localtime([secs)</h5><p>将一个时间戳转换为当前时区的<code>struct_time</code>，若未提供<code>secs</code>参数，返回当前时间的<code>struct_time</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.localtime())     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=9, tm_min=43, tm_sec=22, tm_wday=1, tm_yday=114, tm_isdst=0)</span></span><br><span class="line">print(time.localtime(<span class="number">1304575584.1361799</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=14, tm_min=6, tm_sec=24, tm_wday=3, tm_yday=125, tm_isdst=0)</span></span><br></pre></td></tr></table></figure></p><h5 id="time-gmtime-secs"><a href="#time-gmtime-secs" class="headerlink" title="time.gmtime([secs])"></a>time.gmtime([secs])</h5><p>将一个时间戳转换为UTC时区的<code>struct_time</code>，若未提供<code>secs</code>参数，返回当前时间的对应的UTC时区<code>struct_time</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.gmtime())</span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=1, tm_min=46, tm_sec=28, tm_wday=1, tm_yday=114, tm_isdst=0)</span></span><br><span class="line">print(time.gmtime(<span class="number">1304575584.1361799</span>))</span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=6, tm_min=6, tm_sec=24, tm_wday=3, tm_yday=125, tm_isdst=0)</span></span><br></pre></td></tr></table></figure></p><h5 id="time-mktime-t"><a href="#time-mktime-t" class="headerlink" title="time.mktime(t)"></a>time.mktime(t)</h5><p>将一个<code>struct_time</code>转换为时间戳。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.mktime(time.localtime()))    <span class="comment">#输出结果：1524534556.0</span></span><br></pre></td></tr></table></figure></p><h5 id="time-asctime-t"><a href="#time-asctime-t" class="headerlink" title="time.asctime([t])"></a>time.asctime([t])</h5><p>把一个表示时间的元组或者<code>struct_time</code>表示为<code>Sun Jun 20 23:21:05 1993</code>形式，若没有参数，将会<code>time.localtime()</code>作为参数传入。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.asctime(time.localtime()))    <span class="comment">#输出结果：Tue Apr 24 09:53:03 2018</span></span><br></pre></td></tr></table></figure></p><h5 id="time-ctime-secs"><a href="#time-ctime-secs" class="headerlink" title="time.ctime([secs])"></a>time.ctime([secs])</h5><p>把一个时间戳转换为<code>Sun Jun 20 23:21:05 1993</code>形式，若没有参数或None的时候，默认将<code>time.time()</code>作为参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.ctime())    <span class="comment">#输出结果：Tue Apr 24 09:55:15 2018</span></span><br><span class="line">print(time.ctime(<span class="number">1304575584.1361799</span>))     <span class="comment">#输出结果：Thu May  5 14:06:24 2011</span></span><br></pre></td></tr></table></figure></p><h5 id="time-strftime-format-t"><a href="#time-strftime-format-t" class="headerlink" title="time.strftime(format[,t])"></a>time.strftime(format[,t])</h5><p>把一个表示时间的元组或者<code>struct_time</code>转换为格式化的时间字符串。如果未指定t(也就是表示时间的元组)，传入<code>time.localtime()</code>。如果元组中的任何一个元素越界，<code>ValueError</code>错误将会被抛出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))     <span class="comment">#输出结果：2018-04-24 10:00:14</span></span><br></pre></td></tr></table></figure></p><h5 id="time-strptime-string-format"><a href="#time-strptime-string-format" class="headerlink" title="time.strptime(string[,format])"></a>time.strptime(string[,format])</h5><p>把一个格式化时间字符串转换为<code>struct_time</code>。也就是<code>strftime()</code>的逆操作。<br>当不指定字符串格式时，<code>format</code>默认格式为”%a %b %d %H:%M:%S %Y”(下面第二行的格式)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.strptime(<span class="string">"2018-04-24 10:00:14"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=10, tm_min=0, tm_sec=14, tm_wday=1, tm_yday=114, tm_isdst=-1)</span></span><br><span class="line">print(time.strptime(<span class="string">"Tue Apr 24 10:03:14 2018"</span>))     </span><br><span class="line"><span class="comment">#输出结果：time.struct_time(tm_year=2018, tm_mon=4, tm_mday=24, tm_hour=10, tm_min=3, tm_sec=14, tm_wday=1, tm_yday=114, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure></p><ul><li>总结<br>在time模块中，一共有3种时间表示方式，分别是<code>timstamp</code>(时间戳)、<code>struct_time</code>(元组)和<code>格式化字符串</code>(str)。  </li></ul><ol><li>返回时间戳(timestamp)的方法<br>time()  无参数<br>mktime()  参数为struct_time</li><li>返回元组(struct_time)的方法<br>localtime()  无参数<br>gmtime()  参数为timestamp<br>strptime()  参数为str</li><li>返回字符串(str)的方法<br>asctime()  参数为struct_time<br>ctime()  参数为timestamp<br>strftime()  参数为struct_time</li></ol><p>更多的关于<a href="https://docs.python.org/3/library/time.html" target="_blank" rel="noopener"><code>time</code>模块内容</a>点击查看。</p><h4 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h4><p><code>commands</code>是linux下特有的模块，用来执行linux命令。cmd代表系统命令。<br>注意：在python3.X中该模块已移除，使用<code>subprocess</code>替代。下面均为linux系统中<code>python2.7.5</code>环境执行结果。    </p><h5 id="getoutput-cmd"><a href="#getoutput-cmd" class="headerlink" title="getoutput(cmd)"></a>getoutput(cmd)</h5><p><code>getoutput(cmd)</code>返回结果为cmd命令的执行结果（字符串）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getoutput(<span class="string">"uname -a"</span>)</span><br><span class="line"><span class="string">'Linux localhost.localdomain 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getoutput(<span class="string">"uname -r"</span>)</span><br><span class="line"><span class="string">'3.10.0-693.el7.x86_64'</span></span><br></pre></td></tr></table></figure></p><h5 id="getstatusoutput-cmd"><a href="#getstatusoutput-cmd" class="headerlink" title="getstatusoutput(cmd)"></a>getstatusoutput(cmd)</h5><p><code>getstatusoutput(cmd)</code>返回包含2个元素的元组。<br>第一个元素为命令执行状态(int)，如果执行成功返回0，不成功返回非0。<br>第二个元素为命令执行结果(str)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"uname -r"</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="string">'3.10.0-693.el7.x86_64'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"uname -a"</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="string">'Linux localhost.localdomain 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>commands.getstatusoutput(<span class="string">"ls -l /eee/dd"</span>)</span><br><span class="line">(<span class="number">512</span>, <span class="string">'ls: \xe6\x97\xa0\xe6\xb3\x95\xe8\xae\xbf\xe9\x97\xae/eee/dd: \xe6\xb2\xa1\xe6\x9c\x89\xe9\x82\xa3\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe6\x88\x96\xe7\x9b\xae\xe5\xbd\x95'</span>)</span><br></pre></td></tr></table></figure></p><p>python中更为常用的是<code>status, result = commands.getstatusoutput(&quot;uname -a&quot;)</code>命令，通过一一对一个的方式赋值给status和result。<br>python内置模块相关官方文档<a href="https://docs.python.org/3.6/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a>点击查看。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内置模块&quot;&gt;&lt;a href=&quot;#内置模块&quot; class=&quot;headerlink&quot; title=&quot;内置模块&quot;&gt;&lt;/a&gt;内置模块&lt;/h3&gt;&lt;p&gt;在python中内置了很多模块，无须额外配置就可使用。&lt;br&gt;模块和目录的区别:是否有&lt;code&gt;__init__.py&lt;/code&gt;文件，若无则是目录，有则是模块。  &lt;/p&gt;
&lt;h4 id=&quot;datetime&quot;&gt;&lt;a href=&quot;#datetime&quot; class=&quot;headerlink&quot; title=&quot;datetime&quot;&gt;&lt;/a&gt;datetime&lt;/h4&gt;&lt;p&gt;datetime是进行日期和时间处理的标准库。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="datetime" scheme="https://rosinelan.github.io/tags/datetime/"/>
    
      <category term="times" scheme="https://rosinelan.github.io/tags/times/"/>
    
      <category term="timedelta" scheme="https://rosinelan.github.io/tags/timedelta/"/>
    
      <category term="commands" scheme="https://rosinelan.github.io/tags/commands/"/>
    
  </entry>
  
  <entry>
    <title>python异常处理</title>
    <link href="https://rosinelan.github.io/2018/04/23/python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://rosinelan.github.io/2018/04/23/python异常处理/</id>
    <published>2018-04-23T07:05:40.000Z</published>
    <updated>2018-04-23T15:48:14.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>一般情况下在python无法正常处理程序时就会发生一个异常。<br>异常是python对象，表示一个错误。当python程序发生错误时需要捕获处理，否则程序会终止执行。  </p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>捕获异常可以使用<code>try/except</code>语句。<br><a id="more"></a><br>该语句用来检测<code>try</code>语句块中的错误，从而让<code>except</code>语句捕获异常信息并处理。  </p><ul><li><p>语法规则  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;：</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了'name'异常</span></span><br><span class="line"><span class="keyword">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果引发了'name'异常，获得附加的数据</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果没有异常发生</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#不管如何，最后一定执行的代码</span></span><br></pre></td></tr></table></figure></li><li><p>处理流程<br>当开始一个try语句后，python会在当前程序的上下文中进行标记，这样当异常出现时就可以回到这里，try子句先执行，接下来发生什么依赖于执行时是否出现异常。  </p></li></ul><ol><li>当try后面的语句执行出现异常，python就会调回try并执行第一个匹配该异常的except子句，异常处理完成，然后控制流通过整个try语句。    </li><li>当try后面的语句执行出现异常，却没有匹配的except子句，异常将会被递交到上层的try，或者到程序的最上层(也就是结束程序，并打印出缺省的出错信息)。  </li><li>当try子句执行没有异常，python将执行else后面的语句，然后控制流通过整个try语句。<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3></li></ol><ul><li>有异常出现被捕获的情况<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">0</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">除数不能为<span class="number">0</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>根据输出结果可以看到，有异常出现的时候，先执行<code>try</code>语句，遇到异常则停止执行下面的语句(<code>print(&quot;计算结果为:{0}&quot;.format(result))</code>未执行)，跳转至错误处理代码，也就是<code>except</code>语句块，执行完<code>except</code>后执行<code>finally</code>语句块。不执行<code>else</code>语句块。  </p><ul><li>无异常出现情况<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">1</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">计算结果为:<span class="number">2.0</span></span><br><span class="line">无异常出现</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>根据输出结果可以看到，无异常出现的时候先后执行了<code>try</code>、<code>else</code>和<code>finally</code>语句块，未执行<code>except</code>语句块。<br>在异常处理时<code>else</code>和<code>finally</code>语句块可以没有。</p><ul><li>raise抛出错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/<span class="number">0</span></span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e    <span class="comment">#添加raise语句抛出错误</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">除数不能为<span class="number">0</span></span><br><span class="line">done</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>通过添加<code>raise</code>抛出错误，我们可以看到错误类型为<code>ZeroDivisionError</code>。<br>在python中内置了很多的错误类型，我们可以通过针对不同的错误类型，可以使用不同的<code>except</code>语句处理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"开始计算"</span>)</span><br><span class="line">    result = <span class="number">2</span>/int(<span class="string">'a'</span>)</span><br><span class="line">    print(<span class="string">"计算结果为:&#123;0&#125;"</span>.format(result))</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">"ValueError"</span>)</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"无异常出现"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始计算</span><br><span class="line">ValueError</span><br><span class="line">done</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p><p>此时执行<code>try</code>语句块时，<code>int()</code>函数抛出<code>ValueError</code>异常，所以执行了第二个<code>except</code>捕获对应异常信息。<br>前面我们在<code>except</code>中直接使用<code>Exception</code>，由于大部分的错误类型都是继承自该类型，所以可直接捕获其子类。<br>python中所有的错误都是从<code>BaseException</code>类派生的，点击查看<a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">常见的错误类型和继承关系</a>。  </p><h3 id="异常信息规范输出"><a href="#异常信息规范输出" class="headerlink" title="异常信息规范输出"></a>异常信息规范输出</h3><p>在常见的前后端分离开发环境中，对于异常信息通常都是按照约定格式，返回json字符串，从而将异常信息记录下来。<br>下面是一个示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">()</span>:</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="number">2</span>/<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result[<span class="string">"msg"</span>] = <span class="string">"Division can not be 0"</span></span><br><span class="line">        result[<span class="string">"code"</span>] = <span class="number">250</span></span><br><span class="line">        result[<span class="string">"data"</span>] = [&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;, &#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(result)    <span class="comment">#字典转换为json串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(log())</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"msg"</span>: <span class="string">"Division can not be 0"</span>, <span class="string">"code"</span>: <span class="number">250</span>, <span class="string">"data"</span>: [&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;, &#123;<span class="string">"b"</span>: <span class="number">2</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h3&gt;&lt;p&gt;一般情况下在python无法正常处理程序时就会发生一个异常。&lt;br&gt;异常是python对象，表示一个错误。当python程序发生错误时需要捕获处理，否则程序会终止执行。  &lt;/p&gt;
&lt;h3 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;p&gt;捕获异常可以使用&lt;code&gt;try/except&lt;/code&gt;语句。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://rosinelan.github.io/categories/program/"/>
    
      <category term="python" scheme="https://rosinelan.github.io/categories/program/python/"/>
    
    
      <category term="try" scheme="https://rosinelan.github.io/tags/try/"/>
    
      <category term="except" scheme="https://rosinelan.github.io/tags/except/"/>
    
      <category term="raise" scheme="https://rosinelan.github.io/tags/raise/"/>
    
      <category term="finally" scheme="https://rosinelan.github.io/tags/finally/"/>
    
  </entry>
  
</feed>
